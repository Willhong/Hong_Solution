<?xml version="1.0"?>
<doc>
    <assembly>
        "Cognex.VisionPro.OCRMax"
    </assembly>
    <members>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.StartTracking">
            <summary>
Starts listening to events on sub objects
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InternalRun(System.String@)">
            <summary>
Implementation of the tool's run algorithm.
</summary>
            <param name="msg">
A brief description of the status returned from running the tool
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="msg" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InternalCreateLastRunRecord(Cognex.VisionPro.ICogRecord,System.Int32,System.Int32)">
            <summary>
Implementation of the tool's last run record generation.
</summary>
            <param name="newRecord">
The record to which last run information is to be added.
</param>
            <param name="lastRunRecordEnable">
The flags which dictate what graphics to add to the last run record.
</param>
            <param name="lastRunRecordDiagEnable">
The diagnostic flags which dictate what graphics to add to the last run
record.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="newRecord" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InternalCreateCurrentRecord(Cognex.VisionPro.ICogRecord,System.Int32)">
            <summary>
Implementation of the tool's current record generation.
</summary>
            <param name="newRecord">
The record to which current run information is to be added.
</param>
            <param name="currentRecordEnable">
The flags which dictate what graphics to add to the current record.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="newRecord" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxTool.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.OnDeserialization(System.Object)">
            <summary>
Called to complete the deserialziation of the OCRMaxTool
</summary>
            <param name="sender">
The object which called this method
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="sender" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.UpdateToolFromCachedMembers(Cognex.VisionPro.OCRMax.CogOCRMaxTuneData,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxClassifier)">
            <summary>
COGNEX INTERNAL USE ONLY
</summary>
            <remarks>
Used to restore the state of the tool from some 
cached data when a tune operation is cancelled
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Tune">
            <summary>
Tunes the OCRMax Tool based on the collection of Tune Records
contained in the TuneData property and the current tool parameters.
<para>
Tuning searches for OCRMax parameters that produce line results
that match the tune records in TuneData (which are known to be
correct).
</para></summary>
            <remarks>
                <para>
Correct tune records are added to the TuneData by calling AutoTune()
on the OCRMax tool, or by calling AddTuneRecord() directly on the
OCRMaxTool's TuneData property.
</para>
                <para>
A "correct" record contains the image, region, and
correct string of character codes, and the mark and
cell rects which correctly identify the location of
each character in the image.
</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if TuneParams is null.</item>
                    <item>Thrown if TuneData is null.</item>
                    <item>Thrown if Segmenter is null.</item>
                    <item>Thrown if ClassifierRunParams is null.</item>
                    <item>Thrown if Classifier.TrainParams is null.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
                <list type="bullet">
                    <item>Thrown if any tune record has an unallocated image</item>
                    <item>Thrown if any tune record contains no character codes</item>
                    <item>Thrown if any tune record has a character code which is the unknown character marker</item>
                    <item>Thrown if any tune records has a mark rect which has an angle or skew greater than 45 degrees relative to the region</item>
                    <item>Thrown if (number of mark rects != number of cell rects != number of character codes) for any tune record</item>
                </list>
            </exception>
            <example>
                <!-- CogOCRMaxExample2 -->
                <!-- Show's simple use of CogOCRMaxTool Tune API
     The sample:
     1. Loads an image.
     2. Runs the OCRMaxTool on the image.
     3. OCRMax fails to read the text :(.
     3. Extracts a Tune Record from the OCRMaxTool
        result.
     4. AutoCorrects the Tune Record.
     3. Uses the corrected Tune Record to Tune the
        OCRMaxTool    
     4. Runs the Tool again.
     6. OCRMaxTool reads the text :). 
-->
                <code lang="Visual Basic">
' Create a new CogOCRMaxTool to demonstrate OCRMax tuning.
Dim myOCRMaxTool As New CogOCRMaxTool()

' Load an image which contains the text "Date:10/01/2009"
Dim ifPath As String = System.Environment.GetEnvironmentVariable("VPRO_ROOT")  &amp; _
                       "\images\OCRMax_dotmatrix_multiline.idb"

Dim imageFileTool As New CogImageFileTool()
imageFileTool.[Operator].Open(ifPath, CogImageFileModeConstants.Read)
imageFileTool.Run()
Dim image As CogImage8Grey = TryCast(imageFileTool.OutputImage, CogImage8Grey)
myOCRMaxTool.InputImage = image

' Set up the OCRMaxTool's Region so that it contains the text
' we wish to read.
Dim region As New CogRectangleAffine()
region.SetCenterLengthsRotationSkew(236.822, 65.6591, 433.645, 43.7727, 0, 0)
myOCRMaxTool.Region = region

' Run the OCRMaxTool on the image
myOCRMaxTool.Run()

' Note that the OCRMaxTool was unable to correctly read the string.

' Here we extract a tune record from the OCRMaxTool's line result.
Dim extractedRecord As CogOCRMaxTuneRecord = _
  myOCRMaxTool.LineResult.CreateTuneRecordFromResult(myOCRMaxTool.InputImage, _
                                                     myOCRMaxTool.Region)

' A collection of UTF-32 character codes is created which represents
' the string contained in the image.
Dim characterCodes As New CogOCRMaxCharKeyCollection("Date:10/01/2009", "?")

' Here we update the extracted tune records with the 
' character codes we expect the tool to read.
extractedRecord.CharacterCodes = characterCodes

' Now use the OCRMaxTool's Auto Correct feature to locate the 
' enclosing cell and mark rectangle of each character.
Dim autoCorrectResult As CogOCRMaxTuneRecordCollection = _
  myOCRMaxTool.AutoCorrect(extractedRecord)

' Here we assume the first autoCorrectResult is correct.
' In practice we would want to display the autoCorrectResults 
' and get confirmation before proceeding to the next step.
Dim correctedRecord As CogOCRMaxTuneRecord = autoCorrectResult(0)

' To display the record call:
' CogGraphicCollection myGraphics = correctRecord.CreateTuneRecordGraphics("?");
' myCogDisplay.Image = correctRecord.Image;
' myCogDisplay.StaticGraphics.AddList(myGraphics, "tuneRecordGraphics");

' Note that if none of the autoCorrectResult records are actually correct, we
' must choose one of the records and manually modify it so that it is correct.
' The process to manually modify a record is more complex and is beyond the 
' scope of this sample.

' Note that if you do manually correct an autoCorrectResult record before
' passing it to AutoTune you must also set the SegmenterCorrected and
' ClassifierCorrected properties of the record to indicate that it was
' manually corrected.

' Once we have a correct record, the OCRMaxTool can be tuned.
' Tuning the OCRMaxTool updates the Segmenter and Classifier.Font
' properties of the OCRMaxTool such that the new settings can 
' successfully read the tune record image (and future images
' which are similar).
myOCRMaxTool.AutoTune(correctedRecord)

' All tuned records are stored in the OCRMaxTool's TuneData property.
' Copies of the tuned records can be accessed like this:      
'   CogOCRMaxTuneRecordCollection tunedRecords = 
'     myOCRMaxTool.TuneData.GetTuneRecords();

' Tune Records can be removed from the OCRMaxTool's TuneData like this:     
'   myOCRMaxTool.TuneData.RemoveTuneRecord(0); 

' After the OCRMaxTool has been tuned it should be able to
' succesfully read the image.
myOCRMaxTool.Run()

' Check to see that the tool now reads the record correctly
Assert.IsTrue(myOCRMaxTool.LineResult.ResultString = "Date:10/01/2009")

' At this point the user would continue running the OCRMaxTool
' on new images until an image which could not be read is encountered.

' When this happens the steps, starting with extracting the tune record
' from the failing result, are repeated.

</code>
                <code lang="C#">
  // Create a new CogOCRMaxTool to demonstrate OCRMax tuning.
  CogOCRMaxTool myOCRMaxTool = new CogOCRMaxTool();

  // Load an image which contains the text "Date:10/01/2009"
  string ifPath = System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
  @"\images\OCRMax_dotmatrix_multiline.idb";

  CogImageFileTool imageFileTool = new CogImageFileTool();
  imageFileTool.Operator.Open(ifPath, CogImageFileModeConstants.Read);
  imageFileTool.Run();
  CogImage8Grey image = imageFileTool.OutputImage as CogImage8Grey;
  myOCRMaxTool.InputImage = image;

  // Set up the OCRMaxTool's Region so that it contains the text
  // we wish to read.
  CogRectangleAffine region = new CogRectangleAffine();
  region.SetCenterLengthsRotationSkew(236.822, 65.6591, 433.645, 43.7727, 0, 0);
  myOCRMaxTool.Region = region;

  // Run the OCRMaxTool on the image
  myOCRMaxTool.Run();

  // Note that the OCRMaxTool was unable to correctly read the string.

  // Here we extract a tune record from the OCRMaxTool's line result.
  CogOCRMaxTuneRecord extractedRecord =
  myOCRMaxTool.LineResult.CreateTuneRecordFromResult(myOCRMaxTool.InputImage,
  myOCRMaxTool.Region);

  // A collection of UTF-32 character codes is created which represents
  // the string contained in the image.
  CogOCRMaxCharKeyCollection characterCodes =
  new CogOCRMaxCharKeyCollection(@"Date:10/01/2009", "?");

  // Here we update the extracted tune records with the
  // character codes we expect the tool to read.
  extractedRecord.CharacterCodes = characterCodes;

  // Now use the OCRMaxTool's Auto Correct feature to locate the
  // enclosing cell and mark rectangle of each character.
  CogOCRMaxTuneRecordCollection autoCorrectResult =
  myOCRMaxTool.AutoCorrect(extractedRecord);

  // Here we assume the first autoCorrectResult is correct.
  // In practice we would want to display the autoCorrectResults
  // and get confirmation before proceeding to the next step.
  CogOCRMaxTuneRecord correctedRecord = autoCorrectResult[0];

  // To display the record call:
  // CogGraphicCollection myGraphics = correctRecord.CreateTuneRecordGraphics("?");
  // myCogDisplay.Image = correctRecord.Image;
  // myCogDisplay.StaticGraphics.AddList(myGraphics, "tuneRecordGraphics");

  // Note that if none of the autoCorrectResult records are actually correct, we
  // must choose one of the records and manually modify it so that it is correct.
  // The process to manually modify a record is more complex and is beyond the
  // scope of this sample.

  // Note that if you do manually correct an autoCorrectResult record before
  // passing it to AutoTune you must also set the SegmenterCorrected and
  // ClassifierCorrected properties of the record to indicate that it was
  // manually corrected.

  // Once we have a correct record, the OCRMaxTool can be tuned.
  // Tuning the OCRMaxTool updates the Segmenter and Classifier.Font
  // properties of the OCRMaxTool such that the new settings can
  // successfully read the tune record image (and future images
  // which are similar).
  myOCRMaxTool.AutoTune(correctedRecord);

  // All tuned records are stored in the OCRMaxTool's TuneData property.
  // Copies of the tuned records can be accessed like this:
  //   CogOCRMaxTuneRecordCollection tunedRecords =
  //     myOCRMaxTool.TuneData.GetTuneRecords();

  // Tune Records can be removed from the OCRMaxTool's TuneData like this:
  //   myOCRMaxTool.TuneData.RemoveTuneRecord(0);

  // After the OCRMaxTool has been tuned it should be able to
  // succesfully read the image.
  myOCRMaxTool.Run();

  // Check to see that the tool now reads the record correctly
  Assert.IsTrue(myOCRMaxTool.LineResult.ResultString == "Date:10/01/2009");

  // At this point the user would continue running the OCRMaxTool
  // on new images until an image which could not be read is encountered.

  // When this happens the steps, starting with extracting the tune record
  // from the failing result, are repeated.
</code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.AutoTune(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord)">
            <summary>
                <para>
For use with OCRMaxTool Tuning
</para>
                <para>
Tunes the OCRMax Tool. Tuning searches for parameters
that produce a line result which matches <paramref name="correctRecord" />
which is known to be correct.
</para>
                <para>
AutoTune takes into account previously AutoTuned records
and current tool parameters when tuning.
</para>
            </summary>
            <remarks>
                <para>
A "correct" record contains the image, region, and
correct string of character codes, and the mark and
cell rects which correctly identify the location of
each character in the image.
</para>
            </remarks>
            <param name="correctRecord">
An OCRMax tune record which the user has verified to be correct.
The tune record should be a representative example of the types of
images you wish the tool to read.
</param>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item>Thrown if <paramref name="correctRecord" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>
Thrown if <paramref name="correctRecord" /> does not contain the same number of
CharacterCodes, MarkRects, and CellRects.</item>
                </list>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if TuneParams is null.</item>
                    <item>Thrown if TuneData is null.</item>
                    <item>Thrown if Segmenter is null.</item>
                    <item>Thrown if ClassifierRunParams is null.</item>
                    <item>Thrown if Classifier.TrainParams is null.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
                <list type="bullet">
                    <item>Thrown if the <paramref name="correctRecord" /> has an unallocated image</item>
                    <item>Thrown if <paramref name="correctRecord" /> contains no character codes</item>
                    <item>Thrown if <paramref name="correctRecord" /> character codes contains an unknown character marker</item>
                    <item>Thrown if <paramref name="correctRecord" /> has a mark rect which has an angle or skew greater than 45 degrees relative to the region</item>
                    <item>Thrown if <paramref name="correctRecord" /> number of mark rects != number of cell rects != number of character codes</item>
                </list>
            </exception>
            <example>
                <!-- CogOCRMaxExample2 -->
                <!-- Show's simple use of CogOCRMaxTool Tune API
     The sample:
     1. Loads an image.
     2. Runs the OCRMaxTool on the image.
     3. OCRMax fails to read the text :(.
     3. Extracts a Tune Record from the OCRMaxTool
        result.
     4. AutoCorrects the Tune Record.
     3. Uses the corrected Tune Record to Tune the
        OCRMaxTool    
     4. Runs the Tool again.
     6. OCRMaxTool reads the text :). 
-->
                <code lang="Visual Basic">
' Create a new CogOCRMaxTool to demonstrate OCRMax tuning.
Dim myOCRMaxTool As New CogOCRMaxTool()

' Load an image which contains the text "Date:10/01/2009"
Dim ifPath As String = System.Environment.GetEnvironmentVariable("VPRO_ROOT")  &amp; _
                       "\images\OCRMax_dotmatrix_multiline.idb"

Dim imageFileTool As New CogImageFileTool()
imageFileTool.[Operator].Open(ifPath, CogImageFileModeConstants.Read)
imageFileTool.Run()
Dim image As CogImage8Grey = TryCast(imageFileTool.OutputImage, CogImage8Grey)
myOCRMaxTool.InputImage = image

' Set up the OCRMaxTool's Region so that it contains the text
' we wish to read.
Dim region As New CogRectangleAffine()
region.SetCenterLengthsRotationSkew(236.822, 65.6591, 433.645, 43.7727, 0, 0)
myOCRMaxTool.Region = region

' Run the OCRMaxTool on the image
myOCRMaxTool.Run()

' Note that the OCRMaxTool was unable to correctly read the string.

' Here we extract a tune record from the OCRMaxTool's line result.
Dim extractedRecord As CogOCRMaxTuneRecord = _
  myOCRMaxTool.LineResult.CreateTuneRecordFromResult(myOCRMaxTool.InputImage, _
                                                     myOCRMaxTool.Region)

' A collection of UTF-32 character codes is created which represents
' the string contained in the image.
Dim characterCodes As New CogOCRMaxCharKeyCollection("Date:10/01/2009", "?")

' Here we update the extracted tune records with the 
' character codes we expect the tool to read.
extractedRecord.CharacterCodes = characterCodes

' Now use the OCRMaxTool's Auto Correct feature to locate the 
' enclosing cell and mark rectangle of each character.
Dim autoCorrectResult As CogOCRMaxTuneRecordCollection = _
  myOCRMaxTool.AutoCorrect(extractedRecord)

' Here we assume the first autoCorrectResult is correct.
' In practice we would want to display the autoCorrectResults 
' and get confirmation before proceeding to the next step.
Dim correctedRecord As CogOCRMaxTuneRecord = autoCorrectResult(0)

' To display the record call:
' CogGraphicCollection myGraphics = correctRecord.CreateTuneRecordGraphics("?");
' myCogDisplay.Image = correctRecord.Image;
' myCogDisplay.StaticGraphics.AddList(myGraphics, "tuneRecordGraphics");

' Note that if none of the autoCorrectResult records are actually correct, we
' must choose one of the records and manually modify it so that it is correct.
' The process to manually modify a record is more complex and is beyond the 
' scope of this sample.

' Note that if you do manually correct an autoCorrectResult record before
' passing it to AutoTune you must also set the SegmenterCorrected and
' ClassifierCorrected properties of the record to indicate that it was
' manually corrected.

' Once we have a correct record, the OCRMaxTool can be tuned.
' Tuning the OCRMaxTool updates the Segmenter and Classifier.Font
' properties of the OCRMaxTool such that the new settings can 
' successfully read the tune record image (and future images
' which are similar).
myOCRMaxTool.AutoTune(correctedRecord)

' All tuned records are stored in the OCRMaxTool's TuneData property.
' Copies of the tuned records can be accessed like this:      
'   CogOCRMaxTuneRecordCollection tunedRecords = 
'     myOCRMaxTool.TuneData.GetTuneRecords();

' Tune Records can be removed from the OCRMaxTool's TuneData like this:     
'   myOCRMaxTool.TuneData.RemoveTuneRecord(0); 

' After the OCRMaxTool has been tuned it should be able to
' succesfully read the image.
myOCRMaxTool.Run()

' Check to see that the tool now reads the record correctly
Assert.IsTrue(myOCRMaxTool.LineResult.ResultString = "Date:10/01/2009")

' At this point the user would continue running the OCRMaxTool
' on new images until an image which could not be read is encountered.

' When this happens the steps, starting with extracting the tune record
' from the failing result, are repeated.

</code>
                <code lang="C#">
  // Create a new CogOCRMaxTool to demonstrate OCRMax tuning.
  CogOCRMaxTool myOCRMaxTool = new CogOCRMaxTool();

  // Load an image which contains the text "Date:10/01/2009"
  string ifPath = System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
  @"\images\OCRMax_dotmatrix_multiline.idb";

  CogImageFileTool imageFileTool = new CogImageFileTool();
  imageFileTool.Operator.Open(ifPath, CogImageFileModeConstants.Read);
  imageFileTool.Run();
  CogImage8Grey image = imageFileTool.OutputImage as CogImage8Grey;
  myOCRMaxTool.InputImage = image;

  // Set up the OCRMaxTool's Region so that it contains the text
  // we wish to read.
  CogRectangleAffine region = new CogRectangleAffine();
  region.SetCenterLengthsRotationSkew(236.822, 65.6591, 433.645, 43.7727, 0, 0);
  myOCRMaxTool.Region = region;

  // Run the OCRMaxTool on the image
  myOCRMaxTool.Run();

  // Note that the OCRMaxTool was unable to correctly read the string.

  // Here we extract a tune record from the OCRMaxTool's line result.
  CogOCRMaxTuneRecord extractedRecord =
  myOCRMaxTool.LineResult.CreateTuneRecordFromResult(myOCRMaxTool.InputImage,
  myOCRMaxTool.Region);

  // A collection of UTF-32 character codes is created which represents
  // the string contained in the image.
  CogOCRMaxCharKeyCollection characterCodes =
  new CogOCRMaxCharKeyCollection(@"Date:10/01/2009", "?");

  // Here we update the extracted tune records with the
  // character codes we expect the tool to read.
  extractedRecord.CharacterCodes = characterCodes;

  // Now use the OCRMaxTool's Auto Correct feature to locate the
  // enclosing cell and mark rectangle of each character.
  CogOCRMaxTuneRecordCollection autoCorrectResult =
  myOCRMaxTool.AutoCorrect(extractedRecord);

  // Here we assume the first autoCorrectResult is correct.
  // In practice we would want to display the autoCorrectResults
  // and get confirmation before proceeding to the next step.
  CogOCRMaxTuneRecord correctedRecord = autoCorrectResult[0];

  // To display the record call:
  // CogGraphicCollection myGraphics = correctRecord.CreateTuneRecordGraphics("?");
  // myCogDisplay.Image = correctRecord.Image;
  // myCogDisplay.StaticGraphics.AddList(myGraphics, "tuneRecordGraphics");

  // Note that if none of the autoCorrectResult records are actually correct, we
  // must choose one of the records and manually modify it so that it is correct.
  // The process to manually modify a record is more complex and is beyond the
  // scope of this sample.

  // Note that if you do manually correct an autoCorrectResult record before
  // passing it to AutoTune you must also set the SegmenterCorrected and
  // ClassifierCorrected properties of the record to indicate that it was
  // manually corrected.

  // Once we have a correct record, the OCRMaxTool can be tuned.
  // Tuning the OCRMaxTool updates the Segmenter and Classifier.Font
  // properties of the OCRMaxTool such that the new settings can
  // successfully read the tune record image (and future images
  // which are similar).
  myOCRMaxTool.AutoTune(correctedRecord);

  // All tuned records are stored in the OCRMaxTool's TuneData property.
  // Copies of the tuned records can be accessed like this:
  //   CogOCRMaxTuneRecordCollection tunedRecords =
  //     myOCRMaxTool.TuneData.GetTuneRecords();

  // Tune Records can be removed from the OCRMaxTool's TuneData like this:
  //   myOCRMaxTool.TuneData.RemoveTuneRecord(0);

  // After the OCRMaxTool has been tuned it should be able to
  // succesfully read the image.
  myOCRMaxTool.Run();

  // Check to see that the tool now reads the record correctly
  Assert.IsTrue(myOCRMaxTool.LineResult.ResultString == "Date:10/01/2009");

  // At this point the user would continue running the OCRMaxTool
  // on new images until an image which could not be read is encountered.

  // When this happens the steps, starting with extracting the tune record
  // from the failing result, are repeated.
</code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.AutoCorrect(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord)">
            <summary>
                <para>
For use with OCRMAXTool Tuning
</para>
                <para>
AutoCorrect() makes educated guesses at a "correct" tune record 
by trying different OCRMax tool parameters and looking for parameters
that produce a result string which matches the expected 
result string contained in the input record.
</para>
                <para>
A "correct" record contains an image, a region, and
the correct string of character codes in the image.
A "correct" record also contains the mark and cell rects 
which identify the location of each character in the image.
</para>
            </summary>
            <remarks>
                <para>
AutoCorrect() is primarily used during tuning to aid the user
in creating "correct" tune records that can be then passed to
AutoTune().
In many cases calling AutoCorrect() will be easier than
manually constructing the corrected record.
</para>
                <para>
AutoCorrect may use data from prior corrected tune records
that have been passed to AutoTune() as well as any current tool 
parameters as hints when trying to find a correct record.
</para>
            </remarks>
            <param name="inputRecord">
A tune record which contains the image, region, and correct character codes.
</param>
            <returns>
Returns a set of corrected tune records which have the mark and cell
rects filled in to match the input character codes.
</returns>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item>Thrown if <paramref name="inputRecord" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if TuneParams is null.</item>
                    <item>Thrown if TuneData is null.</item>
                    <item>Thrown if Segmenter is null.</item>
                    <item>Thrown if ClassifierRunParams is null.</item>
                    <item>Thrown if Classifier.TrainParams is null.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
                <list type="bullet">
                    <item>Thrown if the <paramref name="inputRecord" /> has an unallocated image</item>
                    <item>Thrown if <paramref name="inputRecord" /> contains no character codes</item>
                    <item>Thrown if <paramref name="inputRecord" /> character codes contains an unknown character marker</item>
                    <item>Thrown if <paramref name="inputRecord" /> has a mark rect which has an angle or skew greater than 45 degrees relative to the region</item>
                </list>
            </exception>
            <example>
                <!-- CogOCRMaxExample2 -->
                <!-- Show's simple use of CogOCRMaxTool Tune API
     The sample:
     1. Loads an image.
     2. Runs the OCRMaxTool on the image.
     3. OCRMax fails to read the text :(.
     3. Extracts a Tune Record from the OCRMaxTool
        result.
     4. AutoCorrects the Tune Record.
     3. Uses the corrected Tune Record to Tune the
        OCRMaxTool    
     4. Runs the Tool again.
     6. OCRMaxTool reads the text :). 
-->
                <code lang="Visual Basic">
' Create a new CogOCRMaxTool to demonstrate OCRMax tuning.
Dim myOCRMaxTool As New CogOCRMaxTool()

' Load an image which contains the text "Date:10/01/2009"
Dim ifPath As String = System.Environment.GetEnvironmentVariable("VPRO_ROOT")  &amp; _
                       "\images\OCRMax_dotmatrix_multiline.idb"

Dim imageFileTool As New CogImageFileTool()
imageFileTool.[Operator].Open(ifPath, CogImageFileModeConstants.Read)
imageFileTool.Run()
Dim image As CogImage8Grey = TryCast(imageFileTool.OutputImage, CogImage8Grey)
myOCRMaxTool.InputImage = image

' Set up the OCRMaxTool's Region so that it contains the text
' we wish to read.
Dim region As New CogRectangleAffine()
region.SetCenterLengthsRotationSkew(236.822, 65.6591, 433.645, 43.7727, 0, 0)
myOCRMaxTool.Region = region

' Run the OCRMaxTool on the image
myOCRMaxTool.Run()

' Note that the OCRMaxTool was unable to correctly read the string.

' Here we extract a tune record from the OCRMaxTool's line result.
Dim extractedRecord As CogOCRMaxTuneRecord = _
  myOCRMaxTool.LineResult.CreateTuneRecordFromResult(myOCRMaxTool.InputImage, _
                                                     myOCRMaxTool.Region)

' A collection of UTF-32 character codes is created which represents
' the string contained in the image.
Dim characterCodes As New CogOCRMaxCharKeyCollection("Date:10/01/2009", "?")

' Here we update the extracted tune records with the 
' character codes we expect the tool to read.
extractedRecord.CharacterCodes = characterCodes

' Now use the OCRMaxTool's Auto Correct feature to locate the 
' enclosing cell and mark rectangle of each character.
Dim autoCorrectResult As CogOCRMaxTuneRecordCollection = _
  myOCRMaxTool.AutoCorrect(extractedRecord)

' Here we assume the first autoCorrectResult is correct.
' In practice we would want to display the autoCorrectResults 
' and get confirmation before proceeding to the next step.
Dim correctedRecord As CogOCRMaxTuneRecord = autoCorrectResult(0)

' To display the record call:
' CogGraphicCollection myGraphics = correctRecord.CreateTuneRecordGraphics("?");
' myCogDisplay.Image = correctRecord.Image;
' myCogDisplay.StaticGraphics.AddList(myGraphics, "tuneRecordGraphics");

' Note that if none of the autoCorrectResult records are actually correct, we
' must choose one of the records and manually modify it so that it is correct.
' The process to manually modify a record is more complex and is beyond the 
' scope of this sample.

' Note that if you do manually correct an autoCorrectResult record before
' passing it to AutoTune you must also set the SegmenterCorrected and
' ClassifierCorrected properties of the record to indicate that it was
' manually corrected.

' Once we have a correct record, the OCRMaxTool can be tuned.
' Tuning the OCRMaxTool updates the Segmenter and Classifier.Font
' properties of the OCRMaxTool such that the new settings can 
' successfully read the tune record image (and future images
' which are similar).
myOCRMaxTool.AutoTune(correctedRecord)

' All tuned records are stored in the OCRMaxTool's TuneData property.
' Copies of the tuned records can be accessed like this:      
'   CogOCRMaxTuneRecordCollection tunedRecords = 
'     myOCRMaxTool.TuneData.GetTuneRecords();

' Tune Records can be removed from the OCRMaxTool's TuneData like this:     
'   myOCRMaxTool.TuneData.RemoveTuneRecord(0); 

' After the OCRMaxTool has been tuned it should be able to
' succesfully read the image.
myOCRMaxTool.Run()

' Check to see that the tool now reads the record correctly
Assert.IsTrue(myOCRMaxTool.LineResult.ResultString = "Date:10/01/2009")

' At this point the user would continue running the OCRMaxTool
' on new images until an image which could not be read is encountered.

' When this happens the steps, starting with extracting the tune record
' from the failing result, are repeated.

</code>
                <code lang="C#">
  // Create a new CogOCRMaxTool to demonstrate OCRMax tuning.
  CogOCRMaxTool myOCRMaxTool = new CogOCRMaxTool();

  // Load an image which contains the text "Date:10/01/2009"
  string ifPath = System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
  @"\images\OCRMax_dotmatrix_multiline.idb";

  CogImageFileTool imageFileTool = new CogImageFileTool();
  imageFileTool.Operator.Open(ifPath, CogImageFileModeConstants.Read);
  imageFileTool.Run();
  CogImage8Grey image = imageFileTool.OutputImage as CogImage8Grey;
  myOCRMaxTool.InputImage = image;

  // Set up the OCRMaxTool's Region so that it contains the text
  // we wish to read.
  CogRectangleAffine region = new CogRectangleAffine();
  region.SetCenterLengthsRotationSkew(236.822, 65.6591, 433.645, 43.7727, 0, 0);
  myOCRMaxTool.Region = region;

  // Run the OCRMaxTool on the image
  myOCRMaxTool.Run();

  // Note that the OCRMaxTool was unable to correctly read the string.

  // Here we extract a tune record from the OCRMaxTool's line result.
  CogOCRMaxTuneRecord extractedRecord =
  myOCRMaxTool.LineResult.CreateTuneRecordFromResult(myOCRMaxTool.InputImage,
  myOCRMaxTool.Region);

  // A collection of UTF-32 character codes is created which represents
  // the string contained in the image.
  CogOCRMaxCharKeyCollection characterCodes =
  new CogOCRMaxCharKeyCollection(@"Date:10/01/2009", "?");

  // Here we update the extracted tune records with the
  // character codes we expect the tool to read.
  extractedRecord.CharacterCodes = characterCodes;

  // Now use the OCRMaxTool's Auto Correct feature to locate the
  // enclosing cell and mark rectangle of each character.
  CogOCRMaxTuneRecordCollection autoCorrectResult =
  myOCRMaxTool.AutoCorrect(extractedRecord);

  // Here we assume the first autoCorrectResult is correct.
  // In practice we would want to display the autoCorrectResults
  // and get confirmation before proceeding to the next step.
  CogOCRMaxTuneRecord correctedRecord = autoCorrectResult[0];

  // To display the record call:
  // CogGraphicCollection myGraphics = correctRecord.CreateTuneRecordGraphics("?");
  // myCogDisplay.Image = correctRecord.Image;
  // myCogDisplay.StaticGraphics.AddList(myGraphics, "tuneRecordGraphics");

  // Note that if none of the autoCorrectResult records are actually correct, we
  // must choose one of the records and manually modify it so that it is correct.
  // The process to manually modify a record is more complex and is beyond the
  // scope of this sample.

  // Note that if you do manually correct an autoCorrectResult record before
  // passing it to AutoTune you must also set the SegmenterCorrected and
  // ClassifierCorrected properties of the record to indicate that it was
  // manually corrected.

  // Once we have a correct record, the OCRMaxTool can be tuned.
  // Tuning the OCRMaxTool updates the Segmenter and Classifier.Font
  // properties of the OCRMaxTool such that the new settings can
  // successfully read the tune record image (and future images
  // which are similar).
  myOCRMaxTool.AutoTune(correctedRecord);

  // All tuned records are stored in the OCRMaxTool's TuneData property.
  // Copies of the tuned records can be accessed like this:
  //   CogOCRMaxTuneRecordCollection tunedRecords =
  //     myOCRMaxTool.TuneData.GetTuneRecords();

  // Tune Records can be removed from the OCRMaxTool's TuneData like this:
  //   myOCRMaxTool.TuneData.RemoveTuneRecord(0);

  // After the OCRMaxTool has been tuned it should be able to
  // succesfully read the image.
  myOCRMaxTool.Run();

  // Check to see that the tool now reads the record correctly
  Assert.IsTrue(myOCRMaxTool.LineResult.ResultString == "Date:10/01/2009");

  // At this point the user would continue running the OCRMaxTool
  // on new images until an image which could not be read is encountered.

  // When this happens the steps, starting with extracting the tune record
  // from the failing result, are repeated.
</code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.ExecuteOperators(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRectangleAffine,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxFielding,System.String@,Cognex.VisionPro.CogToolResultConstants@,System.Exception@)">
            <summary>
Cognex Internal Use Only
</summary>
            <param name="image">
The image on which to run OCRMax.
</param>
            <param name="region">
The region on which to run OCRMax.
</param>
            <param name="segmenter">
The segmenter operator used to run OCRMax.
</param>
            <param name="fielding">
The fielding operator used to run OCRMax.
</param>
            <param name="msg">
A return message from running OCRMax.
</param>
            <param name="result">
A return result from running OCRMax... was there an error that prevented
the ExecuteOperators method from returning a proper
CogOCRMaxLineResult.
</param>
            <param name="result">
A return result from running OCRMax... was there an error that prevented
the ExecuteOperators method from returning a proper
CogOCRMaxLineResult.
</param>
            <param name="exception">
Returns the exception that happened the method was called,
or null if no exception happened. 
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Run">
            <summary>
Runs the tool using the current parameter settings.
</summary>
            <remarks>
                <para>
Performs OCRMax analysis on the
<see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage" />
using the supplied
<see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Segmenter" />, 
<see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Classifier" />, and
<see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Fielding" />.
Only the part of the input image contained within 
<see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Region" />
is searched for text.
</para>
                <para>
The OCRMax Tool runs the OCRMax Segmenter, followed by the OCRMax Classifier,
and optionally runs OCRMax Fielding. After running OCRMax, the Tool's result
is stored in the Tool's
<see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.LineResult" /> property.
</para>
                <para>
The Run method is guranteed not to throw an exception.
Instead errors and exceptions that occured while running the OCRMax Tool
are reflected in the Tool's 
<see cref="P:Cognex.VisionPro.Implementation.CogToolBase.RunStatus" /> property.
</para>
                <para>
Running the OCRMax Tool may result in a
<see cref="P:Cognex.VisionPro.Implementation.CogToolBase.RunStatus" /> error 
for in the follwing situations.
<list type="bullet"><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Segmenter" /> is null</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Classifier" /> is null</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.ClassifierRunParams" /> is null</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Fielding" /> is null</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage" /> is null</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage" /> is not of type CogImage8Grey, CogImage16Grey, or CogImage16Range</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage" /> has not been Allocated</item><item><see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage" /> is of type CogImage16Range and LineRefinementMode is set to Classic</item><item>The <see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Timeout" /> has expired</item><item>The <see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Region" /> is entirely outside the image</item><item>The <see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Region" /> is partially outside the input image</item><item>The <see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage" /> contains a non-linear transform</item><item>The <see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SwapCharSet" /> is null</item><item>The <see cref="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.FieldingDefinitions" /> contains any entries with duplicate Alias fields</item></list></para>
                <para>
For range images, the OCRMax tool automatically replaces missing 
range image pixels with a neighborhood interpolation filter of the image within
the region.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogTool.Running">
Fires before the tool runs.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>
Fires when the tool runs. If the run was successful, results are
generated; if the run was not successful, no results are generated
and the previous results are cleared. Use
<see cref="P:Cognex.VisionPro.Implementation.CogToolBase.RunStatus" />
after
<see cref="T:Cognex.VisionPro.OCRMax.CogOCRMaxTool" />
returns or in a
<see cref="E:Cognex.VisionPro.ICogTool.Ran">
event handler</see> to determine whether a run was successful or
unsuccessful.
</para>
                <para>
The following state flags may be affected:
</para>
                <list type="bullet">
                    <item>
                        <see cref="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfLineResult" />
                    </item>
                    <item>
                        <see cref="F:Cognex.VisionPro.Implementation.CogToolBase.SfCreateLastRunRecord" />
                    </item>
                </list>
            </event>
            <event cref="E:Cognex.VisionPro.ICogTool.Ran">
Fires after the tool runs.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.TuneParams">
            <summary>
Parameters which control the behavior of OCRMax AutoCorrect(),
AutoTune(), and Tune() functions.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuneParams</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if TuneParams is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.TuneData">
            <summary>
A collection of CogOCRMaxTuneRecords used to tune the CogOCRMaxTool.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuneData</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if TuneData is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.LastRunRecordDiagEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
CogOCRMaxLastRunRecordDiagConstants.
</summary>
            <value>
The LastRunRecordDiagEnable value. The default value is (int)CogOCRMaxLastRunRecordDiagConstants::InputImageByReference | (int)CogOCRMaxLastRunRecordDiagConstants::Region.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLastRunRecordDiagEnable</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.LastRunRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
CogOCRMaxLastRunRecordConstants.
</summary>
            <value>
The LastRunRecordEnable value. The default value is (int)CogOCRMaxLastRunRecordConstants::Result.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLastRunRecordEnable</item>
                    <item>SfCreateLastRunRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.CurrentRecordEnable">
            <summary>
Enable creation of records by bitwise ORing the appropriate
CogOCRMaxCurrentRecordConstants.
</summary>
            <value>
The CurrentRecordEnable value. The default value is (int)CogOCRMaxCurrentRecordConstants::InputImage | (int)CogOCRMaxCurrentRecordConstants::Region.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCurrentRecordEnable</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.LineResult">
            <summary>
Gets the result of running the OCRMax tool.
</summary>
            <value>
The LineResult value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineResult</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.TimeoutEnabled">
            <summary>
Enables the timeout mechanism.
</summary>
            <value>
The TimeoutEnabled value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTimeoutEnabled</item>
                </list>
            </event>
            <remarks>
                <para>
The tool's timeout value.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Timeout">
            <summary>
Gets or sets the timeout value used by this tool in milliseconds.
</summary>
            <value>
The Timeout value. The default value is 5000.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTimeout</item>
                </list>
            </event>
            <remarks>
                <para>
The tool's timeout value.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.UnknownCharacterMarker">
            <summary>
A string which will be used to identify the unknown character code in
result strings generated by this tool.
</summary>
            <value>
The UnknownCharacterMarker value. The default value is "?".
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUnknownCharacterMarker</item>
                </list>
            </event>
            <remarks>
                <para>
If the classifier fails to match a run-time character with a score that
satisfies the classifier's accept threshold, the resulting
CogOCRMaxChar.CharacterCode output is set to a special character code
(0xF800) that means the character is "Unknown". This
UnknownCharacterMarker provides an alias for displaying the unknown
character code is the ResultString.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
if UnknownCharacterMarker is set to null.
</exception>
            <exception cref="T:System.ArgumentException">
if UnknownCharacterMarker is the empty string or contains more than 
a single text element.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SwapCharSet">
            <summary>
The set of characters which have been predetermined to  be "swappable"
(They appear similar and are hard to distinguish, e.g. '0' (zero) and
'O' (capital oh)).
</summary>
            <value>
The SwapCharSet value. The default value is a default constructed CogOCRMaxSwapCharSet instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSwapCharSet</item>
                </list>
            </event>
            <remarks>
                <para>
SwapChars are used by the classifier and fielding. The classifier will
ignore swap chars when calculating its confidence score. Additionally
the AlternateCharacters in the OCRMax result will never contain a character
that is a SwapChar of the primary result.
</para>
                <para>
A user may configure the swap chars to prevent the classifier from being
confused by otherwise understandable string due to the similarity
between two or more characters which are known to have very similar
appearances (e.g. '0' (zero) and 'O' (captial oh)). By setting up swap
chars the user can determined that it does not matter if the tool reads
a '0' (zero) or an 'O' (capital oh), because the correct string can be
determined by the surrounding context or by using prior knowledge of the
text being read.
</para>
                <para>
To illustrate: The information contained in the string "0ctober 2Oth" is
still evident despite the fact that the CogOCRMaxTool read '0' (zero) and
'O' (capital oh) in the incorrect positions.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if SwapCharSet is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.FieldingEnabled">
            <summary>
Enable or disable the fielding operation
</summary>
            <value>
The FieldingEnabled value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFieldingEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Fielding">
            <summary>
The Fielding operator. Fielding can be used to improve the classifier
results based on prior knowledge of the string being read.
</summary>
            <value>
The Fielding value. The default value is a default constructed CogOCRMaxFielding instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFielding</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if Fielding is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.ClassifierRunParams">
            <summary>
Parameters which control how the classification step is run.
</summary>
            <value>
The ClassifierRunParams value. The default value is a default constructed CogOCRMaxClassifierRunParams instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfClassifierRunParams</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if ClassifierRunParams is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Classifier">
            <summary>
Classification is the second main step in performing OCRMax. Classification
takes in a CogOCRMaxChar produced by the segmenter and returns the best
matching character, the score of that best matching character, and the
confidence of that best matching character. By classifying all of the
segmented characters in a line of text, the classifier determines the
result string for the whole line. 
See the <see cref="!:z:8bd611a4-8ec3-40d7-a03b-d96de1dd5c2b">OCRMax Theory Guide</see> 
for more information.
</summary>
            <value>
The Classifier value. The default value is a default constructed CogOCRMaxClassifier instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfClassifier</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if Classifier is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Segmenter">
            <summary>
Character Segmentation is the first step performed by the CogOCRMaxTool.
Segmentation takes an image as input and extracts a set of segmented
character images (CogOCRMaxChar(s)).  For example, if an image contains the
line of text "ABCD", then character segmentation produces four separate
images (CogOCRMaxChar(s)), each of which is an image of a single character.
Character segmentation does not know anything about actually determining
which letter a character image corresponds to; in the above example, it
has no way of knowing that the first image  corresponds to the letter
"A". 
See the <see cref="!:z:8bd611a4-8ec3-40d7-a03b-d96de1dd5c2b">OCRMax Theory Guide</see> 
for more information.
</summary>
            <value>
The Segmenter value. The default value is a default constructed CogOCRMaxSegmenter instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSegmenter</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if Segmenter is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Region">
            <summary>
Gets or sets the optional region which determines where the tool should
look for text.
</summary>
            <value>
The Region value. The default value is a default constructed CogRectangleAffine instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRegion</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
            <remarks>
                <para>
The region should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the region other than the one line of
characters.
</para>
                <para>
The x-axis should be approximately parallel to the baseline of the
contained line of characters, with its positive direction pointing along
the reading direction. The skew should be the approximate value of the
skew of the line of characters.
</para>
                <para>
If the region is null the whole image will serve as the region.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTool.InputImage">
            <summary>
Gets or sets the image on which to run OCRMax.
</summary>
            <value>
The InputImage value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfInputImage</item>
                    <item>SfCreateCurrentRecord</item>
                </list>
            </event>
            <remarks>
                <para>
Only 8-bit greyscale, 16-bit greyscale, and 16-bit range images
are supported.
</para>
                <para>
For range images, the OCRMax tool automatically replaces missing 
range image pixels using a neighborhood interpolation filter of 
the image within the region prior to running OCR on the range 
image's 16 bit grey pixel data.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.Clone">
            <summary>
Returns a deep copy of this class instance.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxTool)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxTool object.
</summary>
            <param name="other">
The CogOCRMaxTool to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.#ctor">
            <summary>
Construct a default CogOCRMaxTool object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.CreateMultiLineLabel(Cognex.VisionPro.CogColorConstants,Cognex.VisionPro.CogGraphicLabelAlignmentConstants,System.Drawing.Font,System.Double,System.Double,System.String,System.String)">
            <summary>
Build a multiline CogGraphicLabel from the multiline text string.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.CacheLastRunRecordData">
            <summary>
Cache the last run record data so it 
can be accesed by CreateLastRunRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTool.ClearCachedLastRunRecordData">
            <summary>
Clear any cached last run record data.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfTuneParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TuneParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfTuneData">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TuneData may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfLastRunRecordDiagEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LastRunRecordDiagEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfLastRunRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LastRunRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfCurrentRecordEnable">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CurrentRecordEnable may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfLineResult">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LineResult may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TimeoutEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Timeout may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfUnknownCharacterMarker">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UnknownCharacterMarker may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfSwapCharSet">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SwapCharSet may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfFieldingEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by FieldingEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfFielding">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Fielding may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfClassifierRunParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ClassifierRunParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfClassifier">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Classifier may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfSegmenter">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Segmenter may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfRegion">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Region may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTool.SfInputImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by InputImage may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTool">
            <summary>
The CogOCRMaxTool (Optical Character Recognition) reads a line of text in an
image. The CogOCRMaxTool performs three primary operations: segmentation,
classification, and fielding. Segmentation occurs first and uses
thresholding techniques to identify which areas in the image appear to
contain lines of text. Classification occurs second and is responsible for
"reading" any text found by the segmenter.  It does this by comparing the
images of segmented characters to previously acquired images of known
characters in a font. Fielding is the third and final stage of OCRMax. Fielding
is an optional step which uses prior information about the text being read
to improve or correct the classification results. For more details see the
documentation for <see cref="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter" />, 
<see cref="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier" />, 
<see cref="T:Cognex.VisionPro.OCRMax.CogOCRMaxFielding" />, as well
as the <see cref="!:z:8bd611a4-8ec3-40d7-a03b-d96de1dd5c2b">OCRMax Theory Guide</see>.
</summary>
            <example>
                <!-- CogOCRMaxExample1 -->
                <!-- Show's simple use of CogOCRMaxTool API
     The sample:
     1. Uses a CogOCRMaxTool to segment the
        CogOCRMaxChars from an image
     2. Labels the segmented characters with
        the correct character code and adds 
        them to a Tool's CogOCRMaxFont
     3. Trains the Tool's CogOCRMaxClassifier
        based on the Font.
     4. Runs the Tool again and prints out the
        read string 
-->
                <code lang="Visual Basic">
Imports System.Drawing
Imports Cognex.VisionPro
Imports Cognex.VisionPro.OCRMax

Module CogOCRMaxExample

  Sub Main()

    Dim OCRMaxTool As New CogOCRMaxTool()

    ' Load an image containing the text to read.
    Dim bmp As New Bitmap(System.Environment.GetEnvironmentVariable("VPRO_ROOT") &amp; "\images\alphanumbers.bmp")

    Dim image As New CogImage8Grey(bmp)

    ' Create a rectangle that surrounds the text 
    ' "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    Dim rect As New CogRectangleAffine()
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0)

    ' Set the image and search region of the tool.
    OCRMaxTool.InputImage = image
    OCRMaxTool.Region = rect

    ' Segment the characters in the image.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept OrElse OCRMaxTool.LineResult.Count &lt;&gt; 26 Then
      Console.WriteLine("Initial segmentation failed. " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    ' Get an array of Unicode UTF-32 character codes
    ' which represent a string of all the letters in the 
    ' english alphabet.
    Dim alphabetString As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    Dim alphabetCharCodes As Integer() = CogOCRMaxChar.GetCharCodesFromString(alphabetString)

    ' Label each segmented character with the correct
    ' character code and add it to the classifier's font.
    For i As Integer = 0 To OCRMaxTool.LineResult.Count - 1
      Dim c As CogOCRMaxChar = OCRMaxTool.LineResult(i).GetCharacter()
      c.CharacterCode = alphabetCharCodes(i)
      OCRMaxTool.Classifier.Font.Add(c)
    Next

    Try
      ' Train the classifier based on the font.
      OCRMaxTool.Classifier.Train()
    Catch ex As Exception
      Console.WriteLine("Failed to train classifier characters: " &amp; ex.Message)
    End Try

    ' Run the (now trained) tool again.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept Then
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    If OCRMaxTool.LineResult.Status &lt;&gt; CogOCRMaxLineResultStatusConstants.Read Then
      Console.WriteLine("OCRMax tool failed to read the line of text.")
      Return
    End If

    ' Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString)
  End Sub
End Module
  </code>
                <code lang="C#">
using System;
using System.Drawing;
using Cognex.VisionPro;
using Cognex.VisionPro.OCRMax;

class CogOCRMaxExample
{
  static void Main()
  {
    CogOCRMaxTool OCRMaxTool = new CogOCRMaxTool();

    // Load an image containing the text to read.
    Bitmap bmp = new Bitmap(
      System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
      @"\images\alphanumbers.bmp");

    CogImage8Grey image = new CogImage8Grey(bmp);

    // Create a rectangle that surrounds the text 
    // "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    CogRectangleAffine rect = new CogRectangleAffine();
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0);

    // Set the image and search region of the tool.
    OCRMaxTool.InputImage = image;
    OCRMaxTool.Region = rect;

    // Segment the characters in the image.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept ||
        OCRMaxTool.LineResult.Count != 26)
    {
      Console.WriteLine(
        "Initial segmentation failed. " + OCRMaxTool.RunStatus.Message);
      return;
    }

    // Get an array of Unicode UTF-32 character codes
    // which represent a string of all the letters in the 
    // english alphabet.
    string alphabetString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int[] alphabetCharCodes =
      CogOCRMaxChar.GetCharCodesFromString(alphabetString);

    // Label each segmented character with the correct
    // character code and add it to the classifier's font.
    for (int i = 0; i &lt; OCRMaxTool.LineResult.Count; i++)
    {
      CogOCRMaxChar c = OCRMaxTool.LineResult[i].GetCharacter();
      c.CharacterCode = alphabetCharCodes[i];
      OCRMaxTool.Classifier.Font.Add(c);
    }

    try
    {
      // Train the classifier based on the font.
      OCRMaxTool.Classifier.Train();
    }
    catch (Exception ex)
    {
      Console.WriteLine(
        "Failed to train classifier characters: " + ex.Message);
    }

    // Run the (now trained) tool again.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept)
    {
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message);
      return;
    }

    if (OCRMaxTool.LineResult.Status != CogOCRMaxLineResultStatusConstants.Read)
    {
      Console.WriteLine("OCRMax tool failed to read the line of text.");
      return;
    }

    // Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString);
  }
}
  </code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult,System.String,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingConfusionMetricConstants,System.Double,System.Double)">
            <summary>
Construct a new overall CogOCRMaxTool level CogOCRMaxLineResult from the individual 
OCRMax operator component results.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetFieldingLineResultInternal">
            <summary>
Returns a reference to the internal fielding line result 
held by the overal OCRMax result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetClassifierLineResultInternal">
            <summary>
Returns a reference to the internal classifier line result 
held by the overal OCRMax result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetSegmenterLineResultInternal">
            <summary>
Returns a reference to the internal segmenter line result 
held by the overal OCRMax result.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxLineResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxLineResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxLineResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.CreateTuneRecordFromResult(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRectangleAffine)">
            <summary>
Returns a CogOCRMaxTuneRecord based on this result.
The record can be corrected and then used to tune the
the CogOCRMaxTool.
</summary>
            <remarks>
                <para>
NOTE: For input images of type CogImage16Range, non-visible or missing 
pixels are automatically removed using a neighborhood interpolation filter 
of the image within the region.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadTypeException">
Thrown if inputImage is not a CogImage8Grey, CogImage16Grey, or CogImage16Range.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.CreateResultGraphics(Cognex.VisionPro.OCRMax.CogOCRMaxResultGraphicConstants)">
            <summary>
Creates a CogGraphicCollection which represents the result.
</summary>
            <param name="graphicOptions">
Flags which control which graphics are included in the returned graphic collection.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetFieldingLineResult">
            <summary>
Returns a copy of the result of the Tool's fielding operation.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetClassifierLineResult">
            <summary>
Returns a copy of the result of the Tool's classifier operation.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.GetSegmenterLineResult">
            <summary>
Returns a copy of the result of the Tool's segmenter operation.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.BinarizedLineImage">
            <summary>
Return an image of the line of the characters after normalization, and
binarization.
</summary>
            <value>
The BinarizedLineImage value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.NormalizedLineImage">
            <summary>
An image of the line of characters after normalization.
</summary>
            <value>
The NormalizedLineImage value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.LineImage">
            <summary>
An image of the line of the characters.
</summary>
            <value>
The LineImage value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.Status">
            <summary>
The overall status of the result.
</summary>
            <value>
The Status value. The default value is CogOCRMaxLineResultStatusConstants::NoText.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.UnknownCharacterMarker">
            <summary>
Used to represent characters that could not be classified in the
ResultString.
</summary>
            <value>
The UnknownCharacterMarker value. The default value is "?".
</value>
            <remarks>
                <para>
The UknownCharacterMarker held by a CogOCRMaxLineResult is the same as the
UnknownCharacterMarker propery of the CogOCRMaxTool at the time the
CogOCRMaxLineResult was created.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.ResultString">
            <summary>
The result string read by the OCRMax tool.
</summary>
            <value>
The ResultString value. The default value is nullptr.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxLineResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxLineResult object.
</summary>
            <param name="other">
The CogOCRMaxLineResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.#ctor">
            <summary>
Construct a default CogOCRMaxLineResult object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult.Initialize">
            <summary>
Cognex Internal Use Only
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxLineResult">
            <summary>
A Collection of CogOCRMaxPositionResults which represent the output/result of
running the OCRMax tool.
</summary>
            <example>
                <!-- CogOCRMaxExample1 -->
                <!-- Show's simple use of CogOCRMaxTool API
     The sample:
     1. Uses a CogOCRMaxTool to segment the
        CogOCRMaxChars from an image
     2. Labels the segmented characters with
        the correct character code and adds 
        them to a Tool's CogOCRMaxFont
     3. Trains the Tool's CogOCRMaxClassifier
        based on the Font.
     4. Runs the Tool again and prints out the
        read string 
-->
                <code lang="Visual Basic">
Imports System.Drawing
Imports Cognex.VisionPro
Imports Cognex.VisionPro.OCRMax

Module CogOCRMaxExample

  Sub Main()

    Dim OCRMaxTool As New CogOCRMaxTool()

    ' Load an image containing the text to read.
    Dim bmp As New Bitmap(System.Environment.GetEnvironmentVariable("VPRO_ROOT") &amp; "\images\alphanumbers.bmp")

    Dim image As New CogImage8Grey(bmp)

    ' Create a rectangle that surrounds the text 
    ' "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    Dim rect As New CogRectangleAffine()
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0)

    ' Set the image and search region of the tool.
    OCRMaxTool.InputImage = image
    OCRMaxTool.Region = rect

    ' Segment the characters in the image.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept OrElse OCRMaxTool.LineResult.Count &lt;&gt; 26 Then
      Console.WriteLine("Initial segmentation failed. " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    ' Get an array of Unicode UTF-32 character codes
    ' which represent a string of all the letters in the 
    ' english alphabet.
    Dim alphabetString As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    Dim alphabetCharCodes As Integer() = CogOCRMaxChar.GetCharCodesFromString(alphabetString)

    ' Label each segmented character with the correct
    ' character code and add it to the classifier's font.
    For i As Integer = 0 To OCRMaxTool.LineResult.Count - 1
      Dim c As CogOCRMaxChar = OCRMaxTool.LineResult(i).GetCharacter()
      c.CharacterCode = alphabetCharCodes(i)
      OCRMaxTool.Classifier.Font.Add(c)
    Next

    Try
      ' Train the classifier based on the font.
      OCRMaxTool.Classifier.Train()
    Catch ex As Exception
      Console.WriteLine("Failed to train classifier characters: " &amp; ex.Message)
    End Try

    ' Run the (now trained) tool again.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept Then
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    If OCRMaxTool.LineResult.Status &lt;&gt; CogOCRMaxLineResultStatusConstants.Read Then
      Console.WriteLine("OCRMax tool failed to read the line of text.")
      Return
    End If

    ' Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString)
  End Sub
End Module
  </code>
                <code lang="C#">
using System;
using System.Drawing;
using Cognex.VisionPro;
using Cognex.VisionPro.OCRMax;

class CogOCRMaxExample
{
  static void Main()
  {
    CogOCRMaxTool OCRMaxTool = new CogOCRMaxTool();

    // Load an image containing the text to read.
    Bitmap bmp = new Bitmap(
      System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
      @"\images\alphanumbers.bmp");

    CogImage8Grey image = new CogImage8Grey(bmp);

    // Create a rectangle that surrounds the text 
    // "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    CogRectangleAffine rect = new CogRectangleAffine();
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0);

    // Set the image and search region of the tool.
    OCRMaxTool.InputImage = image;
    OCRMaxTool.Region = rect;

    // Segment the characters in the image.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept ||
        OCRMaxTool.LineResult.Count != 26)
    {
      Console.WriteLine(
        "Initial segmentation failed. " + OCRMaxTool.RunStatus.Message);
      return;
    }

    // Get an array of Unicode UTF-32 character codes
    // which represent a string of all the letters in the 
    // english alphabet.
    string alphabetString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int[] alphabetCharCodes =
      CogOCRMaxChar.GetCharCodesFromString(alphabetString);

    // Label each segmented character with the correct
    // character code and add it to the classifier's font.
    for (int i = 0; i &lt; OCRMaxTool.LineResult.Count; i++)
    {
      CogOCRMaxChar c = OCRMaxTool.LineResult[i].GetCharacter();
      c.CharacterCode = alphabetCharCodes[i];
      OCRMaxTool.Classifier.Font.Add(c);
    }

    try
    {
      // Train the classifier based on the font.
      OCRMaxTool.Classifier.Train();
    }
    catch (Exception ex)
    {
      Console.WriteLine(
        "Failed to train classifier characters: " + ex.Message);
    }

    // Run the (now trained) tool again.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept)
    {
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message);
      return;
    }

    if (OCRMaxTool.LineResult.Status != CogOCRMaxLineResultStatusConstants.Read)
    {
      Console.WriteLine("OCRMax tool failed to read the line of text.");
      return;
    }

    // Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString);
  }
}
  </code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.#ctor(Cognex.VisionPro.CogRectangleAffine,Cognex.VisionPro.CogRectangleAffine,Cognex.VisionPro.OCRMax.CogOCRMaxPolarityConstants,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingConfusionMetricConstants,System.Double,System.Double)">
            <summary>
Create a new CogOCRMaxTool level position result from the underlying OCRMax
operator components. This override is for characters which
do not have a real segmenter result becuase they were inserted by
fielding.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingConfusionMetricConstants,System.Double,System.Double)">
            <summary>
Create a new CogOCRMaxTool level position result from the underlying OCRMax
operator components.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxPositionResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxPositionResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxPositionResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.GetCharacter">
            <summary>
Gets a CogOCRMaxChar representation of this position result. CogOCRMaxChars
contain information about a character which is necessary for training
the classifier. Usually CogOCRMaxChars are extracted from the result and
added to the Classifier's Font using the OCRMaxTool.Classifier.Font.Add()
method. This process is repeated until the training information in the
font enables the classifier to successfully read all the characters of
interest to the OCRMax application.
</summary>
            <exception cref="T:System.InvalidOperationException">
Thrown if this position result was inserted by the OCRMax fielding
operation and does not have any character info for training.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.ProcessedImage">
            <summary>
The processed image, which is generated from the input rectified image
and used for classification.
</summary>
            <value>
The ProcessedImage value. The default value is null.
</value>
            <remarks>
                <para>
This image would be null if KeepProcessedImage was false
in the classifier run params for the run that generated this result.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.SkippedTrainCharacterIndices">
            <summary>
The list of indices to training character instances that were skipped
(i.e., not considered) during classification, e.g., due to violating
scale/size constraints.
</summary>
            <value>
The SkippedTrainCharacterIndices value. The default value is a default constructed CogReadOnlyIntCollection instance.
</value>
            <remarks>
                <para>
This list would be empty if ReportSkippedTrainCharacterIndices was false
in the classifier run params for the run that generated this result.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.AlternativeCharacters">
            <summary>
The list of alternative characters. These characters induced scores 
satisfying the alternative score threshold.
</summary>
            <value>
The AlternativeCharacters value. The default value is a default constructed CogOCRMaxClassifierCharResultCollection instance.
</value>
            <remarks>
                <para>
Note that the alternative characters are computed in a more
sophisticated manner than simplify finding all characters which
induce scores satisfying the accept threshold. Instead, the alternative
characters are computed as any character which induces a score
satisfying the following metric:
</para>
                <para>
"(the lowest score that is greater than or equal to the accept
threshold) -
</para>
                <para>
(confidence threshold)" plus one different character more than that.
</para>
                <para>
This list includes at most one instance for each character code/class.
</para>
                <para>
This list is sorted in the order of descending scores.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.ID">
            <summary>
Gets a unique ID used to identify this result. 
This ID also corresponds to the index of this result 
in the CogOCRMaxLineResult to which this result belongs. 
</summary>
            <value>
The ID value. The default value is (-1).
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.ConfidenceScore">
            <summary>
The confidence score, in the range [0, 1].
</summary>
            <value>
The ConfidenceScore value. The default value is (0).
</value>
            <remarks>
                <para>
The confidence score is the difference between PrimaryCharacter.Score
and ConfusionCharacter.Score. If the calculation results 
in a value less than (0), the confidence score will be set to (0).
</para>
                <para>
If the highest scoring character does not satisfy the accept threshold,
then the confidence score will be set to (0).
</para>
                <para>
If the classifier has only (1) training character, the confidence score
will be set to the score and the confusionCharacter will be set to null.
</para>
                <para>
This is set to (0) if ConfusionExplanation is Failure.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.ConfusionCharacter">
            <summary>
The confusion character.
</summary>
            <value>
The ConfusionCharacter value. The default value is a default constructed CogOCRMaxClassifierCharResult instance.
</value>
            <remarks>
                <para>
The highest scoring alternative character that is not a swap character
of the highest scoring character.
</para>
                <para>
This will be set to a default constructed CogOCRMaxClassifierChar if there
is no confusion character.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.ConfusionExplanation">
            <summary>
The reason that lead to the Confused status.
</summary>
            <value>
The ConfusionExplanation value. The default value is CogOCRMaxClassifierConfusionExplanationConstants::NotConfused.
</value>
            <remarks>
                <para>
This is useful only if Status is Confused.
</para>
                <para>
If the status is Confused the ConfusionExplanation indicates whether it
was due to the confidence score being too low, or due to a failure of
the classification validation check.
</para>
                <para>
The classification validation check can be enabled/disabled by setting
the ClassifierTrainParams.Alogrithm property.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.CellRect">
            <summary>
The cell rectangle of position result in the image. The
cell rectangle is a bounding box that encloses not only all of the
foreground (e.g. ink) pixels of a character image, but also typically
additional padding region.  Cell rectangles are typically height of the
full line of text containing the character. Ideally, all of the cell
rectangles in a line of text touch their adjacent neighbors. 
</summary>
            <value>
The CellRect value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.MarkRect">
            <summary>
The mark rectangle of the position result in the image. The mark
rectangle of a character is a tight bounding box enclosing all of
foreground (e.g. ink) pixels in the character image.
</summary>
            <value>
The MarkRect value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.Polarity">
            <summary>
The Polarity of the character.
</summary>
            <value>
The Polarity value. The default value is CogOCRMaxPolarityConstants::Unknown.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.Score">
            <summary>
The position result score.
</summary>
            <value>
The Score value. The default value is 0.
</value>
            <remarks>
                <para>
The score is a value between 0 and 1 which is an indication of the
closeness of the match to the training instances.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.Status">
            <summary>
The status of the OCRMax read operation at this character position
summarized into one of four discrete states.
</summary>
            <value>
The Status value. The default value is CogOCRMaxPositionResultStatusConstants::NotRead.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.CharacterCode">
            <summary>
The character code, which is a Unicode UTF-32 code point.
</summary>
            <value>
The CharacterCode value. The default value is (int)CogOCRMaxCharCodeConstants::Unknown.
</value>
            <remarks>
                <para>
The key's character code may be set to CogOCRMaxCharCodeConstants.Unknown
(0xF800) to signify that this character has not/could not been properly
classified.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxPositionResult object.
</summary>
            <param name="other">
The CogOCRMaxPositionResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.#ctor">
            <summary>
Construct a default CogOCRMaxPositionResult object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult.Initialize">
            <summary>
Cognex Internal Use Only
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResult">
            <summary>
Contains a the result for a single character position in a CogOCRMaxLineResult.
</summary>
            <remarks>
The CogOCRMaxPositionResult contains detailed information about the character
position found in the image.  This includes:
<list type="table"><item><term>MarkRect and CellRect</term><description>Position of the found character in the image</description></item><item><term>CharacterCode</term><description>What Character was read at this position (also available via GetString())</description></item><item><term>Score</term><description>How closely the character matched the font character</description></item><item><term>Key</term><description>Which character in the CogOCRMaxFont was the matching character</description></item><item><term>ConfidenceScore</term><description>A measure of how certain the Tool is of the chosen match when compared with the next best match</description></item><item><term>ConfusionCharacter</term><description>The next best matching character</description></item><item><term>AlternativeCharacters</term><description>A list of other characters that were near matches</description></item><item><term>Status</term><description>Information about the position result sumarized into a set of discrete <see cref="T:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants">status values</see></description></item><item><term>ID</term><description>A unique ID used to identify this result. 
This ID also corresponds to the index of this result 
in the CogOCRMaxLineResult to which this result belongs.
</description></item></list></remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult)">
            <summary>
Perform OCRMax Fielding on the supplied
CogOCRMaxClassifierLineResult.
</summary>
            <returns>
A CogOCRMaxFieldingLineResult object.
</returns>
            <param name="inputClassifierLineResult">
The CogOCRMaxClassifierLinerResult containing the string to
be verified.
</param>
            <exception cref="T:System.ArgumentNullException">
If the inputClassifierLineResult argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the FieldingDefinitions collection contains any entries with
duplicate Alias fields.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet)">
            <summary>
Perform OCRMax Fielding on the supplied
CogOCRMaxClassifierLineResult.
</summary>
            <returns>
A CogOCRMaxFieldingLineResult object.
</returns>
            <param name="inputClassifierLineResult">
The CogOCRMaxClassifierLinerResult containing the string to
be verified.
</param>
            <param name="swapCharSet">
Optional swap char set. May be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the inputClassifierLineResult argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If the FieldingDefinitions collection contains any entries with
duplicate Alias fields.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxFieldingParamsException">
                <list>
                    <item>if VariableLength and (LengthMin &gt; FieldCount)</item>
                    <item>if VariableLength and LastIndexMin &gt;= FieldCount)</item>
                    <item>if a position result in inputClassifierLineResult does not
contain a character, contains duplicate alternate characters,
or contains alternate characters that are set to the special
Cognex unknown character code.</item>
                </list>
            </exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.LastIndexMin">
            <summary>
The fielding subsequences to be considered must end at a position no
smaller than this index (in the FieldString). This property is ignored 
if VariableLength is false.
Default is 0.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the LastIndexMin property is set to a new value.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If value is less than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.FirstIndexMax">
            <summary>
The fielding subsequences to be considered
must start at a position no greater than this index
(in the FieldString).
This property is ignored if VariableLength is false.
Default is 999.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the FirstIndexMax property is set to a new value.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If value is less than zero.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.LengthMax">
            <summary>
Get or set the maximum acceptable string length, inclusive.
This parameter is ignored if VariableLength is false. Note that
this setter will enforce LengthMax &gt;= LengthMin by setting
LengthMin to equal the new LengthMax if necessary.
Default is 999.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the LengthMax property is set to a new value.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied LengthMax is less than 1.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.LengthMin">
            <summary>
Get or set the minimum acceptable string length, inclusive.
This property is ignored if VariableLength is false. Note that
this setter will enforce LengthMin less than or equal to
LengthMax by setting LengthMax to equal the new LengthMin
if necessary. Default is 1.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the LengthMin property is set to a new value.
</event>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied LengthMin is less than 1.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.VariableLength">
            <summary>
Get or set whether to run the CogOCRMaxFielding operator in
variable-length mode. If false, run in fixed-length mode.
Fixed-length mode requires that the classifier result
match the field string in its entirety while variable-length
allows matching a partial sub-set of the field string.
Default is false.
</summary>
            <remarks>
Variable length is useful if the length of the 
run time string is unknown. For example if the
text to be read can be either:
<para>
"SER:123"
</para><para>
  OR
</para><para>
"SER:1234"
</para></remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the VariableLength property is set to a new value.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.ConfusionMetric">
            <summary>
Get or set how the CogOCRMaxFielding will determine confusion, which
will be reflected in each
CogOCRMaxFieldingPositionResult.PostFieldingClassifierResult's Status,
ConfusionCharacter, ConfusionExplanation, and ConfidenceScore.
Default is OnlyFieldedCharacters.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If the input argument is not a valid member of the
CogOCRMaxFieldingConfusionMetricConstants enumeration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.AcceptedMetric">
            <summary>
Get or set how the CogOCRMaxFielding will judge Accepted.
Valid choices include "PrimaryMatches" (which does
not allow a secondary match to be judged Accepted),
and "PrimaryAndSecondaryMatches" (which does allow
either Primary or Secondary matches to be judged
Accepted). Default is PrimaryAndSecondaryMatches.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If the input argument is not a valid member of the
CogOCRMaxFieldingAcceptedMetricConstants enumeration.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.IgnoreFailingPrefixSuffix">
            <summary>
Get or set whether to ignore characters which failed
the classification phase (scored below the accept threshold)
at the beginning or end of the input string.
This can be useful if the input image contains 
spurious, non-character features at either end
of the line of text.
Occasionally the segmentation phase will incorrectly
identify such spurious features as characters. 
These spurious characters will fail 
classification and can be correctly ignored by 
setting IgnoreFailingPrefixSuffix to true.
Default is true.
</summary>
            <remarks>
                <para>
Note: This property is ignored when VariableLength is false.
</para>
                <para>
Note: IgnoreFailingPrefixSuffix will not ignore a failing
character if the character is failing because it does not match the
fielding at that position. In other words enabling 
IgnoreFailingPrefixSuffix will only ignore "Unknown" characters
that are likely to not be charcters at all.
</para>
            </remarks>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the IgnoreFailingPrefixSuffix property is set to a new value.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.IgnoreUnfieldedSpaces">
            <summary>
Get or set whether to ignore/skip spaces in the input string
where the corresponding fielding settings for those character
settings do not allow spaces. Default is true.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires after the IgnoreUnfieldedSpaces property is set to a new value.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.FieldingDefinitions">
            <summary>
Get or set the fielding definition collection for this operator.
This property may be assigned an empty collection but may
not be set to null. Note that a default constructed
CogOCRMaxFieldingDefinitionCollection is not empty - it
contains a number a predefined aliases.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.FieldCount">
            <summary>
Get the number of fielding positions currently defined by
the FieldString. Note that the returned value honors the
EscapeCharacterEnabled and EscapeCharacter properties.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.EscapeCharacterEnabled">
            <summary>
Get or set whether the EscapeCharacter should be considered when
evaluating the FieldString.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.EscapeCharacter">
            <summary>
Get or set the character that may optionally be used to
distinguish whether a character in the FieldString
should be considered as a possible alias for a fielding definition.
If EscapeCharacterEnabled is true and this character is encountered
in the FieldString, the next character in the field string will
be interpreted literally and will not be evaluated as a possible
alias.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.FieldString">
            <summary>
Get or set the string that specifies what characters are
expected. This string may optionally contain characters
that correspond to fielding definition aliases.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxFielding object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.Finalize">
            <summary>
Finalize this CogOCRMaxFielding object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.Dispose">
            <summary>
Destruct this CogOCRMaxFielding object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxFielding)">
            <summary>
Constructs a new instance of this class as a deep copy of the
given instance.
</summary>
            <param name="Other">
The CogOCRMaxFielding object to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.#ctor(System.String)">
            <summary>
Constructs a new instance of this class, and
initializes the FieldString property to the
supplied value.
</summary>
            <param name="fieldString">
Set the FieldString property of this newly constructed
CogOCRMaxFielding object to this value. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied fieldString argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfLastIndexMin">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LastIndexMin
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfFirstIndexMax">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by FirstIndexMax
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfLengthMax">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LengthMax
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfLengthMin">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by LengthMin
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfVariableLength">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by VariableLength
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfConfusionMetric">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by ConfusionMetric
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfAcceptedMetric">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by AcceptedMetric
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfIgnoreFailingPrefixSuffix">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by IgnoreFailingPrefixSuffix
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfIgnoreUnfieldedSpaces">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by IgnoreUnfieldedSpaces
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfFieldingDefinitions">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by FieldingDefinitions
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfFieldCount">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by FieldCount
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfEscapeCharacterEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by EscapeCharacterEnabled
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfEscapeCharacter">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by EscapeCharacter
may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFielding.SfFieldString">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by FieldString
may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFielding">
            <summary>
Fielding is the third main step in performing OCRMax. 
<para>
Fielding takes the Classifier results as an input
and outputs a refined set of results based on prior 
information and expectations of the text being read.
For instance, if you know the text being read always
start with the letter 'C', fielding can use this
information to improve the classifier results.
</para>
The Classifier results represent a line of character 
positions and the scores of different characters at each 
position.
<para>
A user configures the Fielding to provides information
about what characters are expected at different positions
in the string.
Fielding uses this information, and the information in the
Classifier results, to make small corrections in 
situations where the Classifier was unable to 
make a clear determination of what character was printed 
at a particular position.
Fielding may also use the expected string information to 
invalidate the classifier result at locations where the classifier 
found something very different than what was expected by the 
fielding.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.LocateDuplicateAlias">
            <summary>
Find the index of the first fielding definition whose Alias is
a duplicate of an earlier fielding definition. Returns -1 if no
duplicates are found.
</summary>
            <returns>
The index of the first duplicate found, or -1 if no duplicates
are found.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Remove(System.Char)">
            <summary>
Removes the fielding definition with the specified alias.
</summary>
            <param name="alias">
The alias of the desired fielding definition.
</param>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.RemovingItem">
Occurs before the value is removed.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.RemovedItem">
Occurs after the value is removed.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count property.
</event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Remove(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition)">
            <summary>
Removes the specified fielding definition from this collection.
</summary>
            <param name="value">
The fielding definition to remove from this collection.
</param>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.RemovingItem">
Occurs before the value is removed.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.RemovedItem">
Occurs after the value is removed.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count property.
</event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.IndexOf(System.Char)">
            <summary>
Get the index of the fielding definition with the specified
alias. If the fielding definition cannot be found, -1 is returned.
</summary>
            <param name="alias">
The Alias of the desired fielding definition.
</param>
            <returns>
The index of the specified fielding definiton if found, otherwise -1.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.IndexOf(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition)">
            <summary>
Get the index of the supplied fielding definition. If the fielding
definition cannot be found, -1 is returned.
</summary>
            <param name="value">
The fielding definition whose index is desired.
</param>
            <returns>
The index of the supplied fielding definiton if found, otherwise -1.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Contains(System.Char)">
            <summary>
Determines whether this collection contains a fielding definition
with the specified Alias value.
</summary>
            <param name="alias">
The Alias to locate in this collection.
</param>
            <returns>
Whether or not the collection contains the specified fielding definition.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Contains(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition)">
            <summary>
Determines whether this collection contains a specific field
definition.
</summary>
            <param name="value">
The CogOCRMaxFieldingDefinition to locate in this collection.
</param>
            <returns>
Whether or not the collection contains the supplied fielding definition.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Insert(System.Int32,Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition)">
            <summary>
Insert the given fielding definition at the specified index.
</summary>
            <param name="value">
The fielding definition to add to this collection.
</param>
            <param name="index">
The position at which to insert the fielding definition.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
If the supplied index is not a valid index into this collection.
</exception>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
Occurs before the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
Occurs after the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count and Item properties.
</event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Add(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition)">
            <summary>
Append the supplied fielding definition to the end of the collection.
</summary>
            <param name="value">
The fielding definition to add to this collection.
</param>
            <exception cref="T:System.ArgumentNullException">
If the supplied argument is null.
</exception>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertingItem">
Occurs before the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.InsertedItem">
Occurs after the value is inserted.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Count and Item properties.
</event>
            <returns>
The index of the newly added fieldind definition.
</returns>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.default(System.Char)">
            <summary>
Gets or sets the CogOCRMaxFieldingDefinition object having
the specified alias.
</summary>
            <param name="Alias">
The Char alias of the desired fielding definition.
</param>
            <value>
The CogOCRMaxFieldingDefinition at the specified position within
this collection.
</value>
            <exception cref="T:System.ArgumentNullException">
If the supplied value is null.
</exception>
            <exception cref="T:System.IndexOutOfRangeException">
If the supplied alias parameter is not found.
</exception>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacingItem">
Occurs before the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacedItem">
Occurs after the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Item property.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.default(System.Int32)">
            <summary>
Gets or sets the CogOCRMaxFieldingDefinition at the specified position
within this collection.
</summary>
            <param name="Index">
The zero-based index that specifies the position of interest in
this collection.
</param>
            <value>
The CogOCRMaxFieldingDefinition at the specified position within
this collection.
</value>
            <exception cref="T:System.ArgumentNullException">
If the supplied value is null.
</exception>
            <exception cref="T:System.IndexOutOfRangeException">
If the supplied index parameter is not valid.
</exception>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacingItem">
Occurs before the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogCollectionEvents.ReplacedItem">
Occurs after the value is replaced.
</event>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires because this method changes the Item property.
</event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Clone">
            <summary>
Create a duplicate of this CogOCRMaxFieldingDefinitionCollection
object.
</summary>
            <returns>
A newly created duplicate of this CogOCRMaxFieldingDefinitionCollection
object.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for the CogOCRMaxFieldingDefinitionCollection
object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Finalize">

Finalize this CogOCRMaxFieldingDefinitionCollection object.

</member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.Dispose">

Destruct this CogOCRMaxFieldingDefinitionCollection object.

</member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection)">
            <summary>
Construct a deep copy of the supplied
CogOCRMaxFieldingDefinitionCollection object.
</summary>
            <param name="Other">
The CogOCRMaxFieldingDefinitionCollection object to be copied.
May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection.#ctor">
            <summary>
Construct a default CogOCRMaxFieldingDefinitionCollection object.
This object will NOT initially be empty, Rather, this collection
default constructs with the following three non-editable field
definitions, all disabled:
<br />
'*': Wildcard=true,CharacterSet=""
<br />
'N': Wildcard=false,CharacterSet="0123456789"
<br />
'A': Wildcard=false,
  CharacterSet="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinitionCollection">
            <summary>
This class holds zero or more CogOCRMaxFieldingDefinition objects.
Note that the ordering of objects within this collection does not
affect processing.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.Editable">
            <summary>
Get whether the CharacterSet and/or Wildcard fields
may be modified. Note that this property does NOT control
access to either the Alias or Enabled properties -
they are always modifiable.
</summary>
            <remarks>The editable field can only be set 
when this class is first constructed.</remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.Wildcard">
            <summary>
Get or set whether this fielding definition includes any and
all characters (including space). If this property is true,
the CharacterSet property is ignored. This property may not be
set if the Editable property is false.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentException">
If you attempt to set this property when Editable is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.CharacterSet">
            <summary>
Get or set any individual characters to be included in this
field definition. May be empty but may not be null.
This property is ignored if Wildcard is true. This property
may not be set if Editable is false.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
            <exception cref="T:System.ArgumentException">
If you attempt to set this property when Editable is false.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.Alias">
            <summary>
Get or set the single character that will be used to refer
to this field definition.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.Enabled">
            <summary>
Get or set whether this field definition should be used by the
CogOCRMaxFielding operator in interpreting its FieldString property
when its Execute method is called.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
Fires when the value of this property changes.
</event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxFieldingDefinition object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.Finalize">
            <summary>
Finalize this CogOCRMaxFieldingDefinition object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.Dispose">
            <summary>
Destruct this CogOCRMaxFieldingDefinition object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition)">
            <summary>
Construct a new instance of this class as a deep copy
</summary>
            <param name="Other">
The instance to copy from.
</param>
            <exception cref="T:System.ArgumentNullException">
If the input argument is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.#ctor(System.Boolean,System.Char,System.String,System.Boolean,System.Boolean)">
            <summary>
Constructs a new instance of this class with the
specified values. The characterSet argument may be
empty but may not be null.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.#ctor">
            <summary>
Constructs a new instance of this class.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.SfWildcard">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Wildcard may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.SfCharacterSet">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by CharacterSet may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.SfAlias">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Alias may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition.SfEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event
every time the value returned by Enabled may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingDefinition">
            <summary>
This class is a named, reusable description of the
characters that are expected at some position. Multiple character
positions may be specified by referring to the name, or 'alias', of
a single field definition object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.GetString">
            <summary>
Returns a string which represents this result.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.GetString(System.String)">
            <summary>
Returns a string which represents this result.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code in
the returned string.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the unknown character
code.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.Accepted">
            <summary>
Whether this CogOCRMaxFieldingLineResult passed checking by the
CogOCRMaxFielding operator. If AcceptedMetric is PrimaryMatches,
this will be true if and only if both of the follwoing are true:
a) the status for any result position is Primary or PrimarySwap,
and b) the status for any input position is Primary, PrimarySwap,
or DeletedIgnored. If AcceptedMetric is PrimaryAndSecondaryMatches,
this will be true if and only if both of the following are true: c) the
status for any result position is Primary or PrimarySwap or Secondary
or SecondarySwap, and d) the status for any input position is
Primary or PrimarySwap or Secondary or SecondarySwap or DeletedIgnored.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxFieldingLineResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.Finalize">
            <summary>
Finalize this CogOCRMaxFieldingLineResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.Dispose">
            <summary>
Destruct this CogOCRMaxFieldingLineResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult)">
            <summary>
Constructs a new instance of this class as a deep copy
of the given instance.
</summary>
            <param name="other">
The instance to copy from.
</param>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingLineResult">
            <summary>
The result of fielding a line of text.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.GetString(System.String)">
            <summary>
Returns a string which represents this result.
</summary>
            <remarks>
                <para>
This override will substitute a custom string for the Unknown character
code.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.GetString">
            <summary>
Returns a string which represents this result.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.PostFieldingClassifierResult">
            <summary>
The classifier position result describing this position after
fielding was performed. Note that this may be null if the position
was deleted by the CogOCRMaxFielding operator (and hence did not exist
after fielding).
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.PreFieldingClassifierResult">
            <summary>
The classifier position result describing this position before
fielding was performed. Note that this may be null if the position
was inserted by the CogOCRMaxFielding operator (and hence did not exist
before fielding).
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.Status">
            <summary>
The status for this position. May be Primary, PrimarySwap,
Secondary, SecondarySwap, Substituted, SubstitutedSpace,
NoMatch, Inserted, Deleted, or DeletedIgnored.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxFieldingPositionResult object.
</summary>
            <param name="Info">
The standard SerializationInfo argument.
</param>
            <param name="Ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.Finalize">
            <summary>
Finalize this CogOCRMaxFieldingPositionResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.Dispose">
            <summary>
Destruct this CogOCRMaxFieldingPositionResult.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult)">
            <summary>
Constructs a new instance of this class as a deep copy
of the given instance.
</summary>
            <param name="other">
The instance to copy from.
</param>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingPositionResult">
            <summary>
A verification result for a single position.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.cfConvertResults(Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneResultImplCollection,cstd_vector_coctn_autoTuneResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Convert the VisionPro Tune results back to CVT results
</summary>
            <remarks>
results_c is constucted and is the correct size.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.cfConvertCVTAutoSegmentOutputToVproTuneRecords(cstd_vector_coctn_autoTuneResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cstd_vector_coctn_autoTuneResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Convert CVT's autoSegment output in to a VisionPro
CogOCRMaxTuneRecordCollection representation.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.DoesRecordMatchToolResult(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord,Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,Cognex.VisionPro.OCRMax.CogOCRMaxClassifier)">
            <summary>
Returns true if the record and the result
of running OCRMax on this record are considered a match.
</summary>
            <exception>
Throws any exceptions that occur while running the segmeneter
or classifier.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.GetTuneRecordsCount">
            <summary>
Returns the number of Tune Records in the Tune Data.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.GetTuneRecord(System.Int32)">
            <summary>
Returns a copy of the Tune Record at the specified index.
</summary>
            <exception cref="T:System.IndexOutOfRangeException">
                <list type="bullet">
                    <item>
Thrown if <paramref name="index" /> is outside the valid
range of Tune Records.</item>
                </list>
            </exception>
            <param name="index">
The index of the Tune Record to return.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.GetTuneRecords">
            <summary>
Returns a collection of the CogOCRMaxTuneRecords
held by this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.GetTunedFont(Cognex.VisionPro.OCRMax.CogOCRMaxFont,Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams)">
            <summary>
Returns the tuned OCRMax Font.
The tuned font is merged with the existing font.
</summary>
            <remarks>
Note that characters in the existing font which
were added via the tuning mechanism may not be 
included in the returned font if tuning determines
that they are no longer required.
<para>
Tuning uses CogOCRMaxChar FontID field to track
which characters were added via the tuning mechainsm.
</para></remarks>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>
Thrown if Tuned is false.
</item>
                    <item>
Thrown if the tool is unable to extract a valid
font because a character in the tune records is
mislabled.
</item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.GetTunedFont(Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams)">
            <summary>
Returns the tuned OCRMax Font.
</summary>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>
Thrown if Tuned is false.
</item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.GetTunedSegmenter">
            <summary>
Returns the tuned OCRMax Segmenter operator.
</summary>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>
Thrown if Tuned is false.
</item>
                </list>
            </exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.RemoveAllTuneRecords">
            <summary>
Removes all tune records from the tune data.
<para>
After calling this function the TuneData will be in the
"untuned" state.
</para></summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.RemoveTuneRecord(System.Int32)">
            <summary>
Removes a record from the tune data.
<para>
After calling this function the TuneData will be in the
"untuned" state.
</para><para>
In order to re-enter the tuned state the user shold call the 
Tune() function.
</para></summary>
            <exception cref="T:System.IndexOutOfRangeException">
                <list type="bullet">
                    <item>
Thrown if <paramref name="index" /> is outside the valid
range of Tune Records.</item>
                </list>
            </exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this function is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuned</item>
                </list>
            </event>
            <param name="index">
The index of the Tune Record to remove.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.AddTuneRecord(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord)">
            <summary>
Adds an additional tune record to the tune data.
<para>
The input record should be verified to be correct
by the user.
</para><para>
The input record should be a representative  
example of the image you wish the tuned tool to read.
</para><para>
After calling this function the TuneData will be in the
"untuned" state.
</para><para>
In order to re-enter the tuned state the user should call the 
Tune() function.
</para></summary>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="record" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>
Thrown if <paramref name="record" /> does not contain the same number of
CharacterCodes, MarkRects, and CellRects.</item>
                </list>
            </exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this function is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuned</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.AutoTune(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord,Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Adds the additional tune record to the tune data 
and performs an incremental auto tune.
<para>
The input record should be verified to be a correct
record by the user.
</para><para>
The input record should be a representative 
example of the image you wish the tuned tool to read.
</para><para>
After calling this function the TuneData will be in the
"tuned" state.
</para><para>
When in the tuned state the user can call GetTunedSegmenter(),
and GetTunedFont() to extract tuned OCRMax operators.
</para></summary>
            <param name="record">
A corrected tune record which contains the image, region, correct 
character codes, as well as the correct mark and cell rectangles.
</param>
            <param name="tuneParams">
A CogOCRMaxTuneParams object which controls the AutoTune
process.
</param>
            <param name="segmenter">
The current CogOCRMaxSegmenter to use as a hint or starting
point for the AutoTune process.
</param>
            <param name="classifierTrainParams">
The current CogOCRMaxClassifierTrainParams, this 
argument is ignored by AutoTune.
</param>
            <param name="classifierRunParams">
The current CogOCRMaxClassifierRunParams, this 
argument is ignored by AutoTune.
</param>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item>Thrown if <paramref name="record" /> is null.</item>
                    <item>Thrown if <paramref name="tuneParams" /> is null.</item>
                    <item>Thrown if <paramref name="segmenter" /> is null.</item>
                    <item>Thrown if <paramref name="classifierTrainParams" /> is null.</item>
                    <item>Thrown if <paramref name="classifierRunParams" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentException">
                <list type="bullet">
                    <item>
Thrown if <paramref name="record" /> does not contain the same number of
CharacterCodes, MarkRects, and CellRects.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
                <list type="bullet">
                    <item>Thrown if the <paramref name="record" /> has an unallocated image</item>
                    <item>Thrown if <paramref name="record" /> contains no character codes</item>
                    <item>Thrown if <paramref name="record" /> character codes contains an unknown character marker</item>
                    <item>Thrown if <paramref name="record" /> has a mark rect which has an angle or skew greater than 45 degrees relative to the region</item>
                </list>
            </exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this function is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuned</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.Tune(Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
                <para>
Performs a full Tune of the CogOCRMaxTuneRecords contained in
this object.
</para>
                <para>
After calling this function the TuneData will be in the
"tuned" state.
</para>
                <para>
When in the tuned state the user can call GetTunedSegmenter(),
and GetTunedFont() to extract the tuned OCRMax operators.
</para>
                <para>
Note that performing a full Tune may produce different results
than calling the incremental AutoTune() on the same set of 
CogOCRMaxTuneRecords data.
</para>
            </summary>
            <param name="tuneParams">
A CogOCRMaxTuneParams object which controls the AutoCorrect
process.
</param>
            <param name="segmenter">
The current CogOCRMaxSegmenter to use as a hint or starting
point for the AutoCorrect process.
</param>
            <param name="classifierTrainParams">
The current CogOCRMaxClassifierTrainParams, this 
argument is ignored by AutoCorrect.
</param>
            <param name="classifierRunParams">
The current CogOCRMaxClassifierRunParams, this 
argument is ignored by AutoCorrect.
</param>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item>Thrown if <paramref name="tuneParams" /> is null.</item>
                    <item>Thrown if <paramref name="segmenter" /> is null.</item>
                    <item>Thrown if <paramref name="classifierTrainParams" /> is null.</item>
                    <item>Thrown if <paramref name="classifierRunParams" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if tune data contains zero tune records.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
                <list type="bullet">
                    <item>Thrown if any tune record has an unallocated image</item>
                    <item>Thrown if any tune record contains no character codes</item>
                    <item>Thrown if any tune record has a character code which is the unknown character marker</item>
                    <item>Thrown if any tune records has a mark rect which has an angle or skew greater than 45 degrees relative to the region</item>
                    <item>Thrown if (number of mark rects != number of cell rects != number of character codes) for any tune record</item>
                </list>
            </exception>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this function is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuned</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.Untune">
            <summary>
Causes the TuneData to become "untuned"
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this function is called.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTuned</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.AutoCorrect(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord,Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
                <para>
AutoCorrect makes educated guesses at a "correct" tune record 
by searching for an OCRMax result that matches the character codes
contained in the partially correct input record.
</para>
                <para>
The primary input to AutoCorrect() is a tune record which contains an image,
a region, and the correct string of character codes.
It is important for the inputRecords to already contain the 
character codes that the user expects the OCRMaxTool to eventually read in order for the
AutoCorrect function to work properly.
</para>
                <para>
The output of AutoCorrect() is a set of tune records 
which now includes the corrected mark and cell rects location
of each character.
</para>
            </summary>
            <remarks>
                <para>
AutoCorrect() is primarily used during tuning to aid the user
in creating "correct" tune records that can be then passed to
AutoTune().
In many cases calling AutoCorrect() will be easier than
manually constructing the corrected record.
</para>
                <para>
AutoCorrect may use data from other records contained in the 
tune data, as well as any of the segmenter, classifier,
and classifierTrainParams as hints or starting points when
when trying to find a correct record.
</para>
            </remarks>
            <param name="inputRecord">
A tune record which contains the image, region, and correct 
character codes.
<para>
Note that the input tune records Mark and Cell Rectangles may
not be filled in, or may be incorrect.
</para></param>
            <param name="tuneParams">
A CogOCRMaxTuneParams object which controls the AutoCorrect
process.
</param>
            <param name="segmenter">
The current CogOCRMaxSegmenter to be used as a hint or starting
point for the AutoCorrect process.
</param>
            <param name="classifierTrainParams">
The current CogOCRMaxClassifierTrainParams, this 
argument is ignored by AutoCorrect.
</param>
            <param name="classifierRunParams">
The current CogOCRMaxClassifierRunParams, this 
argument is ignored by AutoCorrect.
</param>
            <exception cref="T:System.ArgumentNullException">
                <list type="bullet">
                    <item>Thrown if <paramref name="inputRecord" /> is null.</item>
                    <item>Thrown if <paramref name="tuneParams" /> is null.</item>
                    <item>Thrown if <paramref name="segmenter" /> is null.</item>
                    <item>Thrown if <paramref name="classifierTrainParams" /> is null.</item>
                    <item>Thrown if <paramref name="classifierRunParams" /> is null.</item>
                </list>
            </exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
                <list type="bullet">
                    <item>Thrown if the <paramref name="inputRecord" /> has an unallocated image</item>
                    <item>Thrown if <paramref name="inputRecord" /> contains no character codes</item>
                    <item>Thrown if <paramref name="inputRecord" /> character codes contains an unknown character marker</item>
                    <item>Thrown if <paramref name="inputRecord" /> has a mark rect which has an angle or skew greater than 45 degrees relative to the region</item>
                </list>
            </exception>
            <returns>
A set of corrected tune records which have the mark and cell
rects locations of each character filled in or fixed.
</returns>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxTuneData)">
            <summary>
Copy Constructor
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.SfGetTuneRecordsCount">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by GetTuneRecords() may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.SfGetTuneRecords">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by GetTuneRecords() may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData.SfTuned">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by Tuned may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTuneData">
            <summary>
CogOCRMaxTuneData contains a set of CogOCRMaxTuneRecords
for use with training the CogOCRMaxTool.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordCollection">
            <summary>
A collection of CogOCRMaxTuneRecords
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.ClassifierCorrected">
            <summary>
Indicates that the character codes have been 
modified since the record was first created.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSegmenterCorrected</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.SegmenterCorrected">
            <summary>
Indicates that the cell or mark rectangles have been 
modified since the record was first created.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSegmenterCorrected</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.Origin">
            <summary>
Identifies how the tune record was created.
</summary>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfOrigin</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.#ctor(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRectangleAffine,Cognex.VisionPro.OCRMax.CogRectangleAffineCollection,Cognex.VisionPro.OCRMax.CogRectangleAffineCollection,Cognex.VisionPro.OCRMax.CogOCRMaxCharKeyCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordOrigin)">
            <summary>
Cognex Internal Use Only
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord)">
            <summary>
Copy Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.#ctor">
            <summary>
Default Constructor
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.SfClassifierCorrected">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by ClassifierCorrected may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.SfSegmenterCorrected">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by SegmenterCorrected may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.SfOrigin">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by Origin may have changed.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord.cfConvertResults(cstd_vector_coctn_autoTuneResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Converts a CVT vector of autoTuneResults to a
VisionPro CogOCRMaxTuneResultImplCollection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecord">
            <summary>
Contains data about a line of text in an image that 
can be used to tune the CogOCRMaxTool.
</summary>
            <remarks>
The OCRMaxTool tuning process involves the following steps.
<para>
Tune records are constructed from a CogOCRMaxLineResult.
</para><para>
Any incorrect OCRMaxTool results are converted into a tune record.
</para><para>
Once converted the record is corrected. The correction is done
by manually editing the record or by using the CogOCRTool's 
AutoCorrect() function.
</para><para>
Once a tune record is correct, it can then be used to tune the CogOCRMaxTool.
The OCRMaxTool is tuned by passing the corrected tune record to the
AutoTune() function.
</para><para>
Tuning helps the OCRMaxTool find parameters that will correctly read
the tune record.
</para></remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.GetCvtCharExtractParams(coctn_charExtractParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Gets a coctn_charExtractParams object based on this 
CogOCRMaxTuneParams object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.GetCvtAutoTuneParams(coctn_autoTuneParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Gets a coctn_autoTuneParams object which represents
this CogOCRMaxTuneParams and the input segmenter, classifier
and classifierRunParams.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.RegenerateFont">
            <summary>
Controls whether the OCRMax tuning mechanism will
regenerate the characters in the pre-existing font.
</summary>
            <value>
The RegenerateFont value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRegenerateFont</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.MaxNumCharInstancesInFont">
            <summary>
Set the maximum number of instances per character that the
OCRMax tuning mechanism will include in the tuned font.
</summary>
            <value>
The MaxNumCharInstancesInFont value. The default value is 
System::Int32::MaxValue.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMaxNumCharInstancesInFont</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than or equal to 0.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.NumSteps">
            <summary>
Controls how many steps the OCRMax tuning mechanism will
try when modifying a parameter.
</summary>
            <value>
The NumSteps value. The default value is 6.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNumSteps</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than or equal 0 or 
greater than 100.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.RegionMatchOverlapFrac">
            <summary>
Controls how much two character regions must overlap to 
be considered the same by OCRMax tuning.
</summary>
            <value>
The RegionMatchOverlapFrac value. The default value is 0.8.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfRegionMatchOverlapFrac</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than or equal to 0.0 or 
greater than or equal to 1.0
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.PaddingFactor">
            <summary>
Controls how "loosely" the OCRMax tuning mechanism will
set the segmentation params.
</summary>
            <value>
The PaddingFactor value. The default value is 0.13.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPaddingFactor</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than
or equal to 1.0
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.MaxCandidateCount">
            <summary>
Controls "how hard" OCRMax tuning will try to find valid parameters
by setting the maximum number of internal candidates the tune 
mechanism will evaluate.
</summary>
            <value>
The MaxCandidateCount value. The default value is 30.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMaxCandidateCount</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than or equal to 0
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.TunablePropertiesEnable">
            <summary>
Enables or disables which parameters of CogOCRMaxTool 
will be tuned.
</summary>
            <value>
The ComputeDiagnostics value. The default value is 
CogOCRMaxTunablePropertiesConstants::All.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTunablePropertiesEnable</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxTuneParams object.
</summary>
            <param name="other">
The CogOCRMaxTuneParams to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.#ctor">
            <summary>
Construct a default CogOCRMaxTuneParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfRegenerateFont">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by RegenerateFont  may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfMaxNumCharInstancesInFont">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by MaxNumCharInstancesInFont may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfNumSteps">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by NumSteps may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfRegionMatchOverlapFrac">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by RegionMatchOverlapFrac may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfPaddingFactor">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by PaddingFactor may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfMaxCandidateCount">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by MaxCandidateCount may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams.SfTunablePropertiesEnable">
            <summary>
Set in the EventArgs of the Changed event every time the
value returned by TunablePropertiesEnable may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTuneParams">
            <summary>
Tune parameters for the CogOCRMaxTool.
</summary>
            <remarks>
The tune params control how the CogOCRMaxTool's
Tune() and AutoTune() features function.
</remarks>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneResultImplSet">
            <summary>
This class is a .NET representation of 
a the CVT coctn_autoTuneResultSet struct.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneResultImplCollection">
            <summary>
A colllection of CogOCRMaxTuneResultImpls
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneResultImpl.GetCvtRef">
            <summary>
Cognex internal use only
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneResultImpl">
            <summary>
This class is a .NET representation of 
a the CVT coctn_autoTuneResult struct.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImplCollection">
            <summary>
A Collection of CogOCRMaxTuneRecordImpls
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.GetParams(coctn_autoTuneRecord*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the properties of the coctn_autoTuneRecord
argument to match this CogOCRMaxTuneRecordImpl.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.SetParams(coctn_autoTuneRecord*)">
            <summary>
Sets the properties of this CogOCRMaxTuneRecordImpl
to match that of the cvtRecord argument.
</summary>
            <remarks>
SetParams should only be called from a constructor
as it does not raise changed events.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.RemoveMissingPixels(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.CogRectangleAffine)">
            <summary>
Calls into CVT to remove any missing pixel from the range image.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.CreateTuneRecordGraphics(System.String)">
            <summary>
Creates a CogGraphicCollection which represents the current 
state of the tune record.
<para>
Note that changes to returned graphics collection are not 
reflected in the original tune record and vice versa.
</para></summary>
            <exception cref="T:System.InvalidOperationException">
                <list type="bullet">
                    <item>Thrown if CellRects contains a null rectangle.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.CharacterCodesVerified">
            <summary>
Indicates that the character codes of this record
have been verified as correct.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.RectanglesVerified">
            <summary>
Inidcates that the cell and mark rectangles of this record
have been verified as correct.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.Classified">
            <summary>
Indicates that the character codes of this record
were generated as a result of running the CogOCRMaxClassifier.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.Segmented">
            <summary>
Indicates that the cell and mark rectangles of this record
were generated as a result of running the CogOCRMaxSegmenter.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.HasImage16">
            <summary>
Indicates that this record contains 16 bit image data.
</summary>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.CharacterCodes">
            <summary>
An ordered collection of UTF-32 encoded characters 
which identify the correct character at each position
in the string.
</summary>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.CellRects">
            <summary>
An ordered collection of rectangles that define
the cell rectangles for each character in the image.
</summary>
            <remarks>
Space characters do have valid cell rectangle  
in the CellRects collection at the appropriate
position in the string to indicate where the space
is located.
</remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.MarkRects">
            <summary>
An ordered collection of rectangles that tightly
enclose each of the characters in the image.
</summary>
            <remarks>
Space characters have a null rectangle included 
in the MarkRects collection at the appropriate
position in the string.
</remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.Region">
            <summary>
The region of the image which contains the 
text to be read.
</summary>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.Image16">
            <summary>
An image which contains text to be read.
</summary>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.Image">
            <summary>
An image which contains text to be read.
</summary>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.GetImage">
            <summary>
Gets the image contained within this record.
If this is an 8 bit record the Image property is returned.
If this is an 16 bit record the Image16 property is returned.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.#ctor(coctn_autoTuneRecord*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct an instance CogOCRMaxTuneRecordImpl
the equivilent cvtRecord.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.#ctor(Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl)">
            <summary>
Copy Constructor
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.#ctor(Cognex.VisionPro.ICogImage,Cognex.VisionPro.CogRectangleAffine,Cognex.VisionPro.OCRMax.CogRectangleAffineCollection,Cognex.VisionPro.OCRMax.CogRectangleAffineCollection,Cognex.VisionPro.OCRMax.CogOCRMaxCharKeyCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
Construct a CogOCRMaxTuneRecordImpl from its parts.
</summary>
            <remarks>
For CogImage16Range, nin-visible or missing pixels are automatically 
filled in using a neighborhood interpolation filter of the image 
within the region.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl.#ctor">
            <summary>
Default Constructor
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxTuneRecordImpl">
            <summary>
This class is a .NET representation of 
a the CVT coctn_autoTuneRecord struct.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogRectangleAffineCollection">
            <summary>
A collection of CogRectangleAffine objects.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifier.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.OnDeserialization(System.Object)">
            <summary>
Called when to complete the deserialziation of the 
CogOCRMaxClassifier.
</summary>
            <param name="sender">
The object which called this method
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="sender" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(System.Collections.Generic.IEnumerable`1{Cognex.VisionPro.OCRMax.CogOCRMaxChar},Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Classify a collection of characters.
</summary>
            <param name="characters">
The characters to be classified.
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the input's CogOCRMaxChar.CharacterCode == 20 (space) the classifier
will automatically classify the character as a space. The space
character's score and confidence score will be set to the 1 in the
classifier output.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="characters" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(System.Collections.Generic.IEnumerable`1{Cognex.VisionPro.OCRMax.CogOCRMaxChar},Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet)">
            <summary>
Classify a collection of characters.
</summary>
            <param name="characters">
The characters to be classified.
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <param name="swapCharSet">
The set of chracters which have been predetermined to  be "swappable"
(They appear similar and are hard to distinguish, e.g. '0' and 'O').
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the input's CogOCRMaxChar.CharacterCode == 20 (space) the classifier
will automatically classify the character as a space. The space
character's score and confidence score will be set to the 1 in the
classifier output.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="characters" /> is null.
Thrown if <paramref name="runParams" /> is null.
Thrown if <paramref name="swapCharSet" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxChar,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Classify a single character. The input CogOCRMaxChar contains an image of
the character, as well as a Metrics property which define the
character's mark rectangle and cell rectangle. Typically the input
CogOCRMaxChar.CharacterCode is set to Unknown because the character has
not yet been classified.
</summary>
            <param name="character">
The character to be classified.
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the input's CogOCRMaxChar.CharacterCode == 20 (space) the classifier
will automatically classify the character as a space. The space
character's score and confidence score will be set to the 1 in the
classifier output.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="character" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxChar,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet)">
            <summary>
Classify a single character. The input CogOCRMaxChar contains an image of
the character, as well as a Metrics property which define the
character's mark rectangle and cell rectangle. Typically the input
CogOCRMaxChar.CharacterCode is set to Unknown because the character has
not yet been classified.
</summary>
            <param name="character">
The character to be classified.
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <param name="swapCharSet">
The set of chracters which have been predetermined to  be "swappable"
(They appear similar and are hard to distinguish, e.g. '0' and 'O').
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the input's CogOCRMaxChar.CharacterCode == 20 (space) the classifier
will automatically classify the character as a space. The space
character's score and confidence score will be set to the 1 in the
classifier output.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item><item>
the classifier's font contains no characters
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="character" /> is null.
Thrown if <paramref name="runParams" /> is null.
Thrown if <paramref name="swapCharSet" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,System.Collections.Generic.IList`1{Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult})">
            <summary>
Classify the line of segmented characters contained in the
CogOCRMaxSegmenterLineResult.
</summary>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <param name="segmentedCharacters">
The characters to be classified (usually the output of CogOCRMaxSegmenter).
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the CogOCRMaxClassifierPositionResult.IsSpace property is true the
classifier will automatically classify the character as a space. The
space character's score and confidence score will be set to the
CogOCRMaxClassifierPositionResult.SpaceScore of the input.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="runParams" /> is null.
Thrown if <paramref name="segmentedCharacters" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet,System.Collections.Generic.IList`1{Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult})">
            <summary>
Classify the line of segmented characters contained in the
CogOCRMaxSegmenterLineResult.
</summary>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <param name="swapCharSet">
The set of chracters which have been predetermined to  be "swappable"
(They appear similar and are hard to distinguish, e.g. '0' and 'O').
</param>
            <param name="segmentedCharacters">
The characters to be classified (usually the output of CogOCRMaxSegmenter).
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the CogOCRMaxClassifierPositionResult.IsSpace property is true the
classifier will automatically classify the character as a space. The
space character's score and confidence score will be set to the
CogOCRMaxClassifierPositionResult.SpaceScore of the input.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="runParams" /> is null.
Thrown if <paramref name="swapCharSet" /> is null.
Thrown if <paramref name="segmentedCharacters" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Classify a single segmented character.
</summary>
            <param name="segmentedCharacter">
The segmented character to be classified (usually the output of
CogOCRMaxSegmenter).
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the CogOCRMaxClassifierPositionResult.IsSpace property is true the
classifier will automatically classify the character as a space. The
space character's score and confidence score will be set to the
CogOCRMaxClassifierPositionResult.SpaceScore of the input.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="segmentedCharacter" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet)">
            <summary>
Classify a single segmented character.
</summary>
            <param name="segmentedCharacter">
The segmented character to be classified (usually the output of
CogOCRMaxSegmenter).
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <param name="swapCharSet">
The set of chracters which have been predetermined to  be "swappable"
(They appear similar and are hard to distinguish, e.g. '0' and 'O').
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the CogOCRMaxClassifierPositionResult.IsSpace property is true the
classifier will automatically classify the character as a space. The
space character's score and confidence score will be set to the
CogOCRMaxClassifierPositionResult.SpaceScore of the input.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="segmentedCharacter" /> is null.
Thrown if <paramref name="runParams" /> is null.
Thrown if <paramref name="swapCharSet" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet)">
            <summary>
Classify the line of segmented characters contained in the
CogOCRMaxSegmenterLineResult.
</summary>
            <param name="segmentedCharacters">
The segmented characters to be classified (usually the output of
CogOCRMaxSegmenter).
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <param name="swapCharSet">
The set of chracters which have been predetermined to  be "swappable"
(They appear similar and are hard to distinguish, e.g. '0' and 'O').
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the CogOCRMaxClassifierPositionResult.IsSpace property is true the
classifier will automatically classify the character as a space. The
space character's score and confidence score will be set to the
CogOCRMaxClassifierPositionResult.SpaceScore of the input.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="segmentedCharacters" /> is null.
Thrown if <paramref name="runParams" /> is null.
Thrown if <paramref name="swapCharSet" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Execute(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Classify the line of segmented characters contained in the
CogOCRMaxSegmenterLineResult.
</summary>
            <param name="segmentedCharacters">
The segmented characters to be classified (usually the output of
CogOCRMaxSegmenter).
</param>
            <param name="runParams">
The run params that specify how to perform classification.
</param>
            <remarks>
                <para>
Note that space characters are a special case. The OCRMax Classifier does
not classify space characters. Instead the classifier input (cf. the
segmenter output) is responsible for deciding if a particular character
is a space.  The classifier simply "passes through" space characters and
their associated scores. Space characters are not assigned alternative
characters, and the confidence score is set to be equal to the regular
score in the classifier output.
</para>
                <para>
If the CogOCRMaxClassifierPositionResult.IsSpace property is true the
classifier will automatically classify the character as a space. The
space character's score and confidence score will be set to the
CogOCRMaxClassifierPositionResult.SpaceScore of the input.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
any character's image is not allocated
</item><item>
any character's cell rect is not specified
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="segmentedCharacters" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Untrain">
            <summary>
Untrains the classifier.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Train">
            <summary>
Trains the classifier using the current font and train params.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierCannotTrainSpaceException">
Thrown if one of the characters is a the space character.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
Font does not contain any characters to train.
</item><item>
Font contains a null character.
</item><item>
Font contains a character with a CellRectImage that is not specified
</item><item>
Font contains a character with Key.CharacterCode == Unknown
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.TrainOnRun">
            <summary>
Controls the classifier's execute behavior when the classifier is not
trained.
</summary>
            <value>
The TrainOnRun value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTrainOnRun</item>
                </list>
            </event>
            <remarks>
                <para>
If the classifier is in an untrained state and TrainOnRun = True,
Calling Execute() will cause the classifier to train itself from the
current Font and TrainParams.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Font">
            <summary>
Contains the CogOCRMaxChars (images of individual characters) used to train
the classifier.
</summary>
            <value>
The Font value. The default value is a default constructed CogOCRMaxFont instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFont</item>
                </list>
            </event>
            <remarks>
                <para>
The OCRMax Classifier trains and runs on CogOCRMaxChar objects. The train time
CogOCRMaxChars are stored within the Classifier.Font collection.
</para>
                <para>
Fonts are usually created by using the segmenter to extract CogOCRMaxChars
from an image and then manually 'filling in' the proper
Key.CharacterCode for each character before adding them to the fonts
characters collection.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if Font is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.TimeoutEnabled">
            <summary>
Enables the timeout for the classifier.
</summary>
            <value>
The TimeoutEnabled value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTimeoutEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Timeout">
            <summary>
Gets or sets the timeout for running the classifier in milliseconds.
</summary>
            <value>
The Timeout value. The default value is 5000.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTimeout</item>
                </list>
            </event>
            <remarks>
                <para>
This timeout is independent of the CogOCRMaxTool Timeout property when the
classifier is used as part of the OCRMax Tool
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.TrainTimeoutEnabled">
            <summary>
Enables the timeout for classifier training.
</summary>
            <value>
The TrainTimeoutEnabled value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTrainTimeoutEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.TrainTimeout">
            <summary>
Gets or sets the timeout for classifier training in milliseconds.
</summary>
            <value>
The TrainTimeout value. The default value is 5000.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTrainTimeout</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.TrainParams">
            <summary>
Parameters which control how the classifier is trained.  Changing the
train params of a trained classifier will cause it to become untrained.
</summary>
            <value>
The TrainParams value. The default value is a default constructed CogOCRMaxClassifierTrainParams instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTrainParams</item>
                </list>
            </event>
            <exception cref="T:System.ArgumentNullException">
Thrown if TrainParams is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.Trained">
            <summary>
The classifier is a trained operator. This property reflects whether or
not the classifier is in a trained state.
</summary>
            <value>
The Trained value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTrained</item>
                </list>
            </event>
            <remarks>
                <para>
The OCRMax Classifier trains and runs on CogOCRMaxChar objects. The train time
CogOCRMaxChars are stored within the Classifier.Font collection.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifier)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifier object.
</summary>
            <param name="other">
The CogOCRMaxClassifier to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.#ctor">
            <summary>
Construct a default CogOCRMaxClassifier object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.OnFontOrTrainParamsChanged(System.Object,Cognex.VisionPro.CogChangedEventArgs)">
            <summary>
Called when the Font or Train Params have changed 
to Untrain the tool.
</summary>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="sender" /> is null.
Thrown if <paramref name="e" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.StartTracking">
            <summary>
Starts listening to events on the Font.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.CheckTrainStatus">
            <summary>
Checks to see if auto-training is required, if so Train() is called.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
Font does not contain any characters to train.
</item><item>
Font contains a null character.
</item><item>
Font contains a character with a CellRectImage that is not specified
</item><item>
Font contains a character with Key.CharacterCode == Unknown
</item><item>
Font contains a character with Key().IsSpace != Metrics.IsBlank
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException">
Thrown if the tool is not trained and TrainOnRun is false.
</exception>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTrainOnRun">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TrainOnRun may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfFont">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Font may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TimeoutEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Timeout may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTrainTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TrainTimeoutEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTrainTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TrainTimeout may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTrainParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TrainParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier.SfTrained">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Trained may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifier">
            <summary>
Classification is the second main step in performing OCRMax. Classification
takes in a CogOCRMaxChar produced by the segmenter and returns the best
matching character, the score of that best matching character, and the
confidence of that best matching character. By classifying all of the
segmented characters in a line of text, the classifier determines the result
string for the whole line. See the <see cref="!:z:8bd611a4-8ec3-40d7-a03b-d96de1dd5c2b">OCRMax Theory Guide</see> 
for more information.
</summary>
            <remarks>
                <para>
CogOCRMaxChar objects each contain an Image of the character as well as that
character's Key and Metrics. The Key contains the character's character
code; a Unicode UTF-32 code point which determines which 'letter' the
CogOCRMaxChar corresponds to. The Metrics contain two regions (the mark
rectangle and the cell rectangle) which define the location of the character
in the image.  The mark rectangle of a character is a tight bounding box
enclosing all of foreground (e.g. ink) pixels in the character image. The
cell rectangle is a bounding box that encloses not only all of the
foreground (e.g. ink) pixels of a character image, but also typically
additional padding region.  Cell rectangles are typically height of the full
line of text containing the character. Ideally, all of the cell rectangles
in a line of text touch their adjacent neighbors. The CogOCRMaxChar class
contains additional information as well, but the classifier only considers
the rectified image, its mark rectangle, its cell rectangle, and the 32-bit
character code.
</para>
                <para>
The run-time character rectified images don't have to be exactly the same as
the train-time character rectified images - in other words, the classifier
should handle slight rotation, arbitrary x-scale and y-scale, and reasonable
variation in terms of character texture and background texture.
</para>
                <para>
In order to run the classifier it must first be trained. The OCRMax Classifier
is trained by adding one or more examples of CogOCRMaxChars for each possible
run-time character to the Classifier's Font. The OCRMax Classifier determines
the character of the input CogOCRMaxChar by comparing its image to the training
instances and finding the best match.
</para>
                <para>
Handling Scale Variation by Resampling to Fixed Size:
</para>
                <para>
The OCRMax Classifier is designed to handle x-scale/y-scale/uniform-scale/aspect
variations in the run-time character in the rectified image. The 
OCRMax Classifier always resamples each rectified image to a
predetermined size (the same resampled size is used for both train-time
rectified images and run-time rectified images).
</para>
                <para>
Note that the classifier can be set to rescale while maintaining the
rectified image's aspect ratio. In this case each character can be resampled
to a different width, although they will all be resampled to the same
height.
</para>
                <para>
Confidence/Confusion:
</para>
                <para>
The OCRMax Classifier determines not only the classification (character
code/instance) of the run-time rectified image, but it also reports the
score of that classification and the confidence of that classification. The
score is an indication of the closeness of the match to the training
instances. The confidence is computed as the difference between the score of
the classification (the highest scoring training instance) and the score of
the next-highest classification (the highest scoring training instance from
a different class). The OCRMax Classifier result includes a status (Read,
Confused, or Failed) indicating the quality of the result:
</para>
                <para>
The status is Read if its score satisfies the accept threshold and the
confidence score satisfies the confidence threshold.
</para>
                <para>
The status is Confused if the score satisfies the accept threshold but
either (a) the confidence score does not satisfy the confidence threshold,
or (b) a classification validation check does not pass.
</para>
                <para>
The classification validation check attempts to verify that the highest
scoring candidate is the correct classification. If this validation fails,
the classifier result is marked as Confused, and the confidence score is set
to 0. The result of this validation does not affect the result score.
</para>
                <para>
When the result is Confused, the confusionExplanation member of the
classifier result indicates whether it was due to the confidence score being
too low, or due to a failure of the classification validation check.
</para>
                <para>
Note: If the classifier has only 1 training character, the confidence score
will be set to the score and the  confusionCharacter will be default
constructed.
</para>
                <para>
The status is Failed if the score does not satisfy the  accept threshold.
</para>
                <para>
Note: If the highest scoring character does not satisfy the accept
threshold, then the confidence score will be set to 0 and  the alternative
character vector will be empty, and the confusion character will be a
default constructed character.
</para>
                <para>
In addition to determining the classification, the score, and the confidence
score, the OCRMax Classifier also reports a set of alternative classifications.
The alternative classifications are all of the classes which induce
sufficiently high scores. The confusion character is defined to be the
highest scoring alternative character that is not a swap character of the
highest scoring character. There will always be at least one alternative
character/confusion character so long as the highest scoring character met
the accept threshold and so long as there is at least one other (nonswap)
class with nonzero score. Note that the alternative classifications are
computed in a more sophisticated manner than simplify finding all
classifications which induce scores satisfying the accept threshold.
Instead, the alternative classifications are computed as any class which
induced a score satisfying the following alternative score threshold:
</para>
                <para>
"(the lowest score that is greater than or equal to the accept threshold) -
(confidence threshold)" plus one different character more than that.
</para>
                <para>
The alternative characters are sorted in order of decreasing score.
</para>
                <para>
Swap Characters:
</para>
                <para>
Note that the OCRMax Classifier optionally takes a swap character set
(CogOCRMaxSwapCharSet) as input. If a swap character set is specified, then the
confidence score is defined as the difference between the score of the
highest scoring classification and the score of the next-highest
classification which is not swappable with the highest scoring
classification.
</para>
                <para>
Scale Filters:
</para>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints are
compared against the rectified image.
</para>
                <para>
Handling Spaces:
</para>
                <para>
The OCRMax Classifier handles space characters differently from nonspace
characters. In particular, users specify whether input characters are to be
classified as spaces.
</para>
                <para>
The current classifier behavior is to pass through all space characters with
the specified score, with no alternative characters, and with the confidence
score set to be equal to the score.
</para>
                <para>
Notes:
</para>
                <para>
The OCRMax Classifier analyzes each rectified image's character cell rectangle
with respect to the rectified image's character mark rectangle. The
classifier algorithm expects the mark rectangle to be relatively accurate
and it expects the cell rectangle to be less accurate. Consequently, the
classifier algorithm, for the most part, ignores the pixels in between the
rectified image's character cell rectangle and the rectified image's mark
rectangle. The classifier algorithm mainly considers the size and position
of the cell rectangle window. The classifier algorithm requires that the
cell rectangle be specified for every training/runtime character.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.MakeccOCRClassifier">
            <summary>
Create a ccOCRClassifier based on this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.SetFromccOCRClassifier(ccOCRClassifier!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxClassifierImpl from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.#ctor(ccOCRClassifier!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierImpl based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierImpl.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.GetTrainCharacterIndices(Cognex.VisionPro.OCRMax.CogOCRMaxCharKey)">
            <summary>
Returns the indices of all training instances in TrainCharacterKeys()
that match the specified character key.
</summary>
            <param name="key">
The CogOCRMaxCharKey for which to retrieve the Indices.
</param>
            <remarks>
                <para>
This function will attempt to match all specified fields of
CogOCRMaxCharKey. If any of key.Instance, key.Variant, and key.FontID is
Unspecified, it will be treated as don't-care, and this function will
ignore that field.
</para>
                <para>
Returns an empty vector if the specified key is not found.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if key.CharacterCode == Unknown.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="key" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.GetTrainCharacterKeys">
            <summary>
Returns a copy of the keys of all training characters.
</summary>
            <remarks>
                <para>
This data is available even if SaveTrainCharacters == false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.GetTrainCharactersProcessed">
            <summary>
Returns a copy of the training characters after processing (re-sampling
and image pre-processing).
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNoSavedDataException">
Thrown if if SaveTrainCharacters==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.GetTrainCharacters">
            <summary>
Returns a copy of the training characters.
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNoSavedDataException">
Thrown if if SaveTrainCharacters==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.GetTrainParams">
            <summary>
Returns a copy of the training params specified when calling
StartTrain(), Train(), or Retrain().
</summary>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Run(Cognex.VisionPro.OCRMax.CogOCRMaxChar[],System.Boolean[],System.Double[],Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Run the classifier on the input character(s).
</summary>
            <remarks>
                <para>
If the input character is to be classified as a space, set isSpace to
true and provide a spaceScore within [0, 1].
</para>
                <para>
The classifier ignores spaceScore if isSpace is false.
</para>
                <para>
The classifier throws an exception if the value of isSpace is different
from runCharacter.key().isSpace(), or is different from
runCharacter.metrics().isBlank().
</para>
                <para>
The overloads that do not take the isSpace parameter are used only for
classifying nonspace characters. For each input character, both
runCharacter.metrics().isBlank() and runCharacter.key().isSpace() must
return false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
if the collections do not have the same size in the overloads that take
multiple collections.
</item><item>
any runCharacter's image is not allocated
</item><item>
any runCharacter's cellRectImage is not specified
</item><item>
runCharacter.Metrics.IsBlank() == true or runCharacter.Key.IsSpace() ==
true for the overloads that do not take the isSpace parameter.
</item><item>
isSpace != runCharacter.key().isSpace() or isSpace !=
runCharacter.metrics().isBlank() for the overloads that take the isSpace
parameter.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotTrainedException">
Thrown if if IsTrained()==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="runCharacters" /> is null.
Thrown if <paramref name="isSpace" /> is null.
Thrown if <paramref name="spaceScore" /> is null.
Thrown if <paramref name="swapCharacterSet" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Run(Cognex.VisionPro.OCRMax.CogOCRMaxChar,System.Boolean,System.Double,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Run the classifier on the input character(s).
</summary>
            <remarks>
                <para>
If the input character is to be classified as a space, set isSpace to
true and provide a spaceScore within [0, 1].
</para>
                <para>
The classifier ignores spaceScore if isSpace is false.
</para>
                <para>
The classifier throws an exception if the value of isSpace is different
from runCharacter.key().isSpace(), or is different from
runCharacter.metrics().isBlank().
</para>
                <para>
The overloads that do not take the isSpace parameter are used only for
classifying nonspace characters. For each input character, both
runCharacter.metrics().isBlank() and runCharacter.key().isSpace() must
return false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
if the collections do not have the same size in the overloads that take
multiple collections.
</item><item>
any runCharacter's image is not allocated
</item><item>
any runCharacter's cellRectImage is not specified
</item><item>
runCharacter.Metrics.IsBlank() == true or runCharacter.Key.IsSpace() ==
true for the overloads that do not take the isSpace parameter.
</item><item>
isSpace != runCharacter.key().isSpace() or isSpace !=
runCharacter.metrics().isBlank() for the overloads that take the isSpace
parameter.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotTrainedException">
Thrown if if IsTrained()==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="runCharacter" /> is null.
Thrown if <paramref name="swapCharacterSet" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Run(Cognex.VisionPro.OCRMax.CogOCRMaxChar[],Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Run the classifier on the input character(s).
</summary>
            <remarks>
                <para>
If the input character is to be classified as a space, set isSpace to
true and provide a spaceScore within [0, 1].
</para>
                <para>
The classifier ignores spaceScore if isSpace is false.
</para>
                <para>
The classifier throws an exception if the value of isSpace is different
from runCharacter.key().isSpace(), or is different from
runCharacter.metrics().isBlank().
</para>
                <para>
The overloads that do not take the isSpace parameter are used only for
classifying nonspace characters. For each input character, both
runCharacter.metrics().isBlank() and runCharacter.key().isSpace() must
return false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
if the collections do not have the same size in the overloads that take
multiple collections.
</item><item>
any runCharacter's image is not allocated
</item><item>
any runCharacter's cellRectImage is not specified
</item><item>
runCharacter.Metrics.IsBlank() == true or runCharacter.Key.IsSpace() ==
true for the overloads that do not take the isSpace parameter.
</item><item>
isSpace != runCharacter.key().isSpace() or isSpace !=
runCharacter.metrics().isBlank() for the overloads that take the isSpace
parameter.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotTrainedException">
Thrown if if IsTrained()==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="runCharacters" /> is null.
Thrown if <paramref name="swapCharacterSet" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Run(Cognex.VisionPro.OCRMax.CogOCRMaxChar,Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet,Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Run the classifier on the input character(s).
</summary>
            <remarks>
                <para>
If the input character is to be classified as a space, set isSpace to
true and provide a spaceScore within [0, 1].
</para>
                <para>
The classifier ignores spaceScore if isSpace is false.
</para>
                <para>
The classifier throws an exception if the value of isSpace is different
from runCharacter.key().isSpace(), or is different from
runCharacter.metrics().isBlank().
</para>
                <para>
The overloads that do not take the isSpace parameter are used only for
classifying nonspace characters. For each input character, both
runCharacter.metrics().isBlank() and runCharacter.key().isSpace() must
return false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
if the collections do not have the same size in the overloads that take
multiple collections.
</item><item>
any runCharacter's image is not allocated
</item><item>
any runCharacter's cellRectImage is not specified
</item><item>
runCharacter.Metrics.IsBlank() == true or runCharacter.Key.IsSpace() ==
true for the overloads that do not take the isSpace parameter.
</item><item>
isSpace != runCharacter.key().isSpace() or isSpace !=
runCharacter.metrics().isBlank() for the overloads that take the isSpace
parameter.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotTrainedException">
Thrown if if IsTrained()==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="runCharacter" /> is null.
Thrown if <paramref name="swapCharacterSet" /> is null.
Thrown if <paramref name="runParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Retrain(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams)">
            <summary>
Re-train the classifier with the specified parameters and the training
instances saved in the tool. It is okay to call Retrain() repeatedly.
Effects of earlier calls will be cleared by the last call. After the
call, both IsStartTrained() and IsTrained() remain true.
</summary>
            <remarks>
                <para>
This does not change the value of SaveTrainCharacters().
</para>
                <para>
This requires that SaveTrainCharacters() be true.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotTrainedException">
Thrown if if IsTrained()==false.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNoSavedDataException">
Thrown if if SaveTrainCharacters()==false.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="params" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Train(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams,Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1{Cognex.VisionPro.OCRMax.CogOCRMaxChar})">
            <summary>
Convenience functions to call StartTrain() followed by
TrainIncremental(). After the call, IsStartTrained() and IsTrained()
become/remain true. It is okay to call Train() repeatedly. Effects of
earlier calls will be cleared by the last call.
</summary>
            <remarks>
                <para>
The algorithms Basic and BasicWithValidation can continue incremental
training when SaveTrainCharacters()==false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
trainCharcters does not contain any characters to train.
</item><item>
trainCharcters contains a null train character.
</item><item>
trainCharacters' contains a character with a CellRectImage that is not
specified
</item><item>
trainCharacters' contains a character with
trainCharacter.Key.CharacterCode == Unknown
</item><item>
trainCharacters' contains a character with
trainCharacter.key().isSpace() != trainCharacter.metrics().isBlank()
</item></list></exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="trainParams" /> is null.
Thrown if <paramref name="trainCharacters" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.TrainIncremental(Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1{Cognex.VisionPro.OCRMax.CogOCRMaxChar})">
            <summary>
Add one training instance to this classifier. Requires IsStartTrained()
be true. After the call, IsTrained() becomes/remains true.
</summary>
            <remarks>
                <para>
The algorithms Basic and BasicWithValidation can continue incremental
training when SaveTrainCharacters()==false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
trainCharcters does not contain any characters to train.
</item><item>
trainCharcters contains a null train character.
</item><item>
trainCharacters' contains a character with a CellRectImage that is not
specified
</item><item>
trainCharacters' contains a character with
trainCharacter.Key.CharacterCode == Unknown
</item><item>
trainCharacters' contains a character with
trainCharacter.key().isSpace() != trainCharacter.metrics().isBlank()
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierCannotTrainException">
Thrown if SaveTrainCharacters == false for algorithms that must train on
all training characters at once.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="trainCharacters" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.TrainIncremental(Cognex.VisionPro.OCRMax.CogOCRMaxChar)">
            <summary>
Add one training instance to this classifier. Requires IsStartTrained()
be true. After the call, IsTrained() becomes/remains true.
</summary>
            <remarks>
                <para>
The algorithms Basic and BasicWithValidation can continue incremental
training when SaveTrainCharacters()==false.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
Thrown if IsStartTrained() == false.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
Thrown if:
<list type="bullet"><item>
the trainCharacter's CellRectImage is not specified
</item><item>
trainCharacter.Key.CharacterCode == Unknown
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierCannotTrainException">
Thrown if:
<list type="bullet"><item>
trainCharacter.Key.IsSpace() != trainCharacter.Metrics().IsBlank()
</item><item>
SaveTrainCharacters == false for algorithms that must train on all
training characters at once.
</item></list></exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="trainCharacter" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.StartTrain(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams)">
            <summary>
Start the training process with the specified parameters. This calls
Untrain() as the first step. It is legal to call startTrain()
repeatedly. Effects of earlier calls will be cleared by the last call.
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="trainParams" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Untrain">
            <summary>
Untrain the classifier.  Discard information of all training parameters
and training instances.
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.IsStartTrained">
            <summary>
Whether training has started, regardless of if the classifier has
received any training instances.
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.IsTrained">
            <summary>
Whether this classifier has been trained with at least one training
instance.
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.SaveTrainCharacters">
            <summary>
Whether to save all training characters.
</summary>
            <value>
The SaveTrainCharacters value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSaveTrainCharacters</item>
                </list>
            </event>
            <remarks>
                <para>
When setting this to false, the setter will immediately discard any
saved training characters.
</para>
                <para>
After setting this to false, it is not allowed to call: Retrain(),
GetTrainCharacters(), GetTrainCharactersProcessed(), or
TrainIncremental() for algorithms needing all characters.
</para>
                <para>
After setting this to false, it is not allowed to serialize the
classifier.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.Clone">
            <summary>
Returns a deep copy of this class instance.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.#ctor(Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifierImpl object.
</summary>
            <param name="other">
The CogOCRMaxClassifierImpl to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl.#ctor">
            <summary>
Construct a default CogOCRMaxClassifierImpl object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.Implementation.Internal.CogOCRMaxClassifierImpl">
            <summary>
An internal, more direct wrap of the CVL OCRMax Classifier.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.MakeccOCRClassifierLineResult">
            <summary>
Create a ccOCRClassifierLineResult based on this object.
Todo pass in the address of a prealocated object
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.SetFromccOCRClassifierLineResult(ccOCRClassifierLineResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxClassifierLineResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.#ctor(ccOCRClassifierLineResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierLineResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierLineResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxClassifierLineResult.
</summary>
            <param name="unknownCharacterMarker">
A string to use in place if the Uknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the Unknown character
code.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
            <exception cref="T:System.InvalidOperationException">
Thrown if the line result contains a null position result.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxClassifierLineResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.Status">
            <summary>
The result status: Read, Confused, or Failed. This is the lowest grade
among all position results in this line result.
</summary>
            <value>
The Status value. The default value is CogOCRMaxClassifierPositionStatusConstants::Failed.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfStatus</item>
                </list>
            </event>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifierLineResult object.
</summary>
            <param name="other">
The CogOCRMaxClassifierLineResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult.#ctor">
            <summary>
Construct a default CogOCRMaxClassifierLineResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierLineResult">
            <summary>
All result data for the classification of one line of characters.
</summary>
            <remarks>
This class is a collection of CogOCRMaxClassifierPositionResults 
that make up the result data for this line.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.SetFromccOCRClassifierPositionResult(ccOCRClassifierPositionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxClassifierPositionResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.#ctor(ccOCRClassifierPositionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierPositionResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierPositionResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxClassifierPositionResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxClassifierPositionResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.ProcessedImage">
            <summary>
The processed image, which is generated from the input rectified image
and used for classification.
</summary>
            <value>
The ProcessedImage value. The default value is null.
</value>
            <remarks>
                <para>
This image would be null if KeepProcessedImage was false for the run
that generated this result.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.SkippedTrainCharacterIndices">
            <summary>
The list of indices to training character instances that were skipped
(i.e., not considered) during classification, e.g., due to violating
scale/size constraints.
</summary>
            <value>
The SkippedTrainCharacterIndices value. The default value is a
default constructed CogReadOnlyIntCollection.
</value>
            <remarks>
                <para>
This list would be empty if runParams.ReportSkippedTrainCharacterIndices
was false for the run that generated this result.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.AlternativeCharacters">
            <summary>
The list of alternative classes, and optionally, their training
instances, which induced scores satisfying the alternative score
threshold.
</summary>
            <value>
The AlternativeCharacters value. The default value is default
default constructed CogOCRMaxClassifierCharResultCollection.
</value>
            <remarks>
                <para>
Note that the alternative classifications are computed in a more
sophisticated manner than simplify finding all classifications which
induce scores satisfying the accept threshold. Instead, the alternative
classifications are computed as any class which induced a score
satisfying the following alternative score.
</para>
                <para>
Threshold:
</para>
                <para>
"(the lowest score that is greater than or equal to the accept
threshold) -
</para>
                <para>
(confidence threshold)" plus one different character more than that.
</para>
                <para>
This list includes at most one instance for each character code/class.
</para>
                <para>
This list is sorted in the order of descending scores.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.ConfidenceScore">
            <summary>
The confidence score, in the range [0, 1].
</summary>
            <value>
The ConfidenceScore value. The default value is 0.
</value>
            <remarks>
                <para>
The confidence score is the difference between PrimaryCharacter.Score
and ConfusionCharacter.Score.
</para>
                <para>
If the highest scoring character does not satisfy the accept threshold,
then the confidence score will be set to 0.
</para>
                <para>
If the classifier has only 1 training character, the confidence score
will be set to the score and the confusionCharacter will be set to null.
</para>
                <para>
This is set to 0 if ConfusionExplanation is Failure.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.ConfusionCharacter">
            <summary>
The confusion character.
</summary>
            <value>
The ConfusionCharacter value. The default value is null.
</value>
            <remarks>
                <para>
The highest scoring alternative character that is not a swap character
of the highest scoring character.
</para>
                <para>
This will be set to null there is no confusion character.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.ConfusionExplanation">
            <summary>
The reason that lead to the Confused status.
</summary>
            <value>
The ConfusionExplanation value. The default value is CogOCRMaxClassifierConfusionExplanationConstants::NotConfused.
</value>
            <remarks>
                <para>
This is useful only if Status is Confused.
</para>
                <para>
If the status is Confused the ConfusionExplanation indicates whether it
was due to the confidence score being too low, or due to a failure of
the classification validation check.
</para>
                <para>
The classification validation check can be enabled/disabled by setting
the ClassifierTrainParams.Alogrithm property.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.Status">
            <summary>
The result status: Read, Confused, or Failed.
</summary>
            <value>
The Status value. The default value is CogOCRMaxClassifierPositionStatusConstants::Failed.
</value>
            <remarks>
                <para>
The status is READ if its score satisfies the accept threshold and the
confidence score satisfies the confidence threshold.
</para>
                <para>
The status is CONFUSED if the score satisfies the accept threshold but
either (a) the confidence score does not satisfy the confidence
threshold, or (b) a classification validation check does not pass.
</para>
                <para>
The status is FAILED if the score does not satisfy the accept threshold.
</para>
                <para>
The classification validation check can be enabled/disabled by setting
the ClassifierTrainParams.Alogrithm property.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.PrimaryCharacter">
            <summary>
The determined classification of the input image.
</summary>
            <value>
The PrimaryCharacter value. The default value is null.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifierPositionResult object.
</summary>
            <param name="other">
The CogOCRMaxClassifierPositionResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult.#ctor">
            <summary>
Construct a default CogOCRMaxClassifierPositionResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionResult">
            <summary>
All result data for the classification of a run-time character.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResultCollection.#ctor(std.vector&lt;ccOCRClassifierCharResult,std.allocator&lt;ccOCRClassifierCharResult&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierCharResultCollection based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResultCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierCharResultCollection.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResultCollection.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResultCollection)">
            <summary>
Copy Constructor; creates and deep copy of this collection.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResultCollection.#ctor">
            <summary>
Default Constructor; creates and empty collection.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResultCollection">
            <summary>
A Collection of CogOCRMaxClassifierCharResults.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.SetFromccOCRClassifierCharResult(ccOCRClassifierCharResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxClassifierCharResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.#ctor(ccOCRClassifierCharResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierCharResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierCharResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxClassifierCharResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxClassifierCharResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.IsPrimarySwap">
            <summary>
Whether the character in this result is a swap character of the primary
character.
</summary>
            <value>
The IsPrimarySwap value. The default value is false.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.Score">
            <summary>
The classification result score.
</summary>
            <value>
The Score value. The default value is 0.
</value>
            <remarks>
                <para>
The score is a value between 0 and 1 which is an indication of the
closeness of the match to the training instances.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.Key">
            <summary>
The classification result character key.
</summary>
            <value>
The Key value. The default value is a default constructed CogOCRMaxCharKey instance.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifierCharResult object.
</summary>
            <param name="other">
The CogOCRMaxClassifierCharResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult.#ctor">
            <summary>
Construct a default CogOCRMaxClassifierCharResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierCharResult">
            <summary>
Result data for one potential classification of the run-time image.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.GetParams(coc_classifierRunParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Return the CVT version of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.MakeccOCRClassifierRunParams">
            <summary>
Create a ccOCRClassifierRunParams based on this object.
Todo pass in the address of a prealocated object
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SetFromccOCRClassifierRunParams(ccOCRClassifierRunParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxClassifierRunParams from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.#ctor(ccOCRClassifierRunParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierRunParams based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierRunParams.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.KeepProcessedImage">
            <summary>
Whether to keep around the processed image corresponding to the run-time
input rectified image. This processed image is usually provided for
diagnostic purposes and is usually disabled for production runs.
</summary>
            <value>
The KeepProcessedImage value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfKeepProcessedImage</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.ReportSkippedTrainCharacterIndices">
            <summary>
Whether to include in the result object the set of train character
indices which were skipped because they did not satisfy the scale
constraints.
</summary>
            <value>
The ReportSkippedTrainCharacterIndices value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfReportSkippedTrainCharacterIndices</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.YScaleFilterHigh">
            <summary>
The high value for y-scale filter range for skipping candidate
classes/instances whose rectified training image's y-size (i.e. height)
is beyond the range specified here.
</summary>
            <value>
The YScaleFilterHigh value. The default value is 1.5.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfYScaleFilterHigh</item>
                </list>
            </event>
            <remarks>
                <para>
Y-scale is computed as the y-size of rectified run-time image divided by
the y-size of a particular training class/instance.
</para>
                <para>
This is effective only if UseYScaleFilter is true.
</para>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints
are compared against the rectified image.
</para>
                <para>
Setting this property to a value less than YScaleFilterLow will cause
YScaleFilterLow to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than or equal to 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.YScaleFilterLow">
            <summary>
The low value for y-scale filter range for skipping candidate
classes/instances whose rectified training image's y-size (i.e. height)
is beyond the range specified here.
</summary>
            <value>
The YScaleFilterLow value. The default value is 0.666.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfYScaleFilterLow</item>
                </list>
            </event>
            <remarks>
                <para>
Y-scale is computed as the y-size of rectified run-time image divided by
the y-size of a particular training class/instance.
</para>
                <para>
This is effective only if UseYScaleFilter is true.
</para>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints
are compared against the rectified image.
</para>
                <para>
Setting this property to a value greater than YScaleFilterHigh will
cause YScaleFilterHigh to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than or equal to
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.UseYScaleFilter">
            <summary>
Whether to use the y-scale filter.
</summary>
            <value>
The UseYScaleFilter value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUseYScaleFilter</item>
                </list>
            </event>
            <remarks>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints
are compared against the rectified image.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.XScaleFilterHigh">
            <summary>
The high value for x-scale filter range for skipping candidate
classes/instances whose rectified training image's y-size (i.e. width)
is beyond the range specified here.
</summary>
            <value>
The XScaleFilterHigh value. The default value is 1.5.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfXScaleFilterHigh</item>
                </list>
            </event>
            <remarks>
                <para>
X-scale is computed as the x-size of rectified run-time image divided by
the x-size of a particular training class/instance.
</para>
                <para>
This is effective only if UseXScaleFilter is true.
</para>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints
are compared against the rectified image.
</para>
                <para>
Setting this property to a value less than XScaleFilterLow will cause
XScaleFilterLow to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than or equal to 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.XScaleFilterLow">
            <summary>
The low value for x-scale filter range for skipping candidate
classes/instances whose rectified training image's x-size (i.e. width)
is beyond the range specified here.
</summary>
            <value>
The XScaleFilterLow value. The default value is 0.666.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfXScaleFilterLow</item>
                </list>
            </event>
            <remarks>
                <para>
X-scale is computed as the x-size of rectified run-time image divided by
the x-size of a particular training class/instance.
</para>
                <para>
This is effective only if UseXScaleFilter is true.
</para>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints
are compared against the rectified image.
</para>
                <para>
Setting this property to a value greater than XScaleFilterHigh will
cause XScaleFilterHigh to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than or equal to
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.UseXScaleFilter">
            <summary>
Whether to use the x-scale filter.
</summary>
            <value>
The UseXScaleFilter value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUseXScaleFilter</item>
                </list>
            </event>
            <remarks>
                <para>
The OCRMax Classifier allows the user to optionally specify x-scale/y-scale
filter ranges, which specify the acceptable scale factors between the
train-time character mark rectangles and the run-time character mark
rectangles. Only classes/instances that satisfy the scale constraints
are compared against the rectified image.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.ConfidenceThreshold">
            <summary>
The confidence threshold.
</summary>
            <value>
The ConfidenceThreshold value. The default value is 0.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfConfidenceThreshold</item>
                </list>
            </event>
            <remarks>
                <para>
The status of a character is set to Confused if the score satisfies the
accept threshold but the confidence score does not satisfy the
confidence threshold.
</para>
                <para>
A character's confidence score is the difference between the score of
the classification (the highest scoring training instance) and the score
of the next-highest classification (the highest scoring training
instance from a different class).
</para>
                <para>
Note: Even if the confidence score satisfies the confidence threshhold,
the character status may still be set to Confused if the classification
validation check does not pass.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than 1.0
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.AcceptThreshold">
            <summary>
The accept threshold.
</summary>
            <value>
The AcceptThreshold value. The default value is 0.8.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAcceptThreshold</item>
                </list>
            </event>
            <remarks>
                <para>
The status of a character is set to FAILED if the score does not satisfy
the accept threshold.
</para>
                <para>
A Characters score is an indication of the closeness of the match to the
training instances.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than 1.0
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifierRunParams object.
</summary>
            <param name="other">
The CogOCRMaxClassifierRunParams to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.#ctor">
            <summary>
Construct a default CogOCRMaxClassifierRunParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfKeepProcessedImage">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by KeepProcessedImage may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfReportSkippedTrainCharacterIndices">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ReportSkippedTrainCharacterIndices may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfYScaleFilterHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by YScaleFilterHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfYScaleFilterLow">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by YScaleFilterLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfUseYScaleFilter">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UseYScaleFilter may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfXScaleFilterHigh">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by XScaleFilterHigh may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfXScaleFilterLow">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by XScaleFilterLow may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfUseXScaleFilter">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UseXScaleFilter may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfConfidenceThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ConfidenceThreshold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams.SfAcceptThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by AcceptThreshold may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierRunParams">
            <summary>
Run-time parameters for the OCRMax Classifier.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.GetParams(coc_classifierTrainParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Get the CVT version of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.MakeccOCRClassifierTrainParams">
            <summary>
Create a ccOCRClassifierTrainParams based on this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.SetFromccOCRClassifierTrainParams(ccOCRClassifierTrainParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxClassifierTrainParams from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.#ctor(ccOCRClassifierTrainParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxClassifierTrainParams based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxClassifierTrainParams.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.ImagePreprocessing">
            <summary>
The image preprocessing methods used for classification.  The value is a
bit field from CogOCRMaxClassifierImagePreprocessingConstants
</summary>
            <value>
The ImagePreprocessing value. The default value is CogOCRMaxClassifierImagePreprocessingConstants::NormalizeHistogram.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfImagePreprocessing</item>
                </list>
            </event>
            <remarks>
                <para>
The same image preprocessing methods will be applied to both train-time
and run-time characters.
</para>
                <para>
The result image's client coordinate transform retains any effect that
the specified image preprocessing methods may have on the client
transform.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.Algorithm">
            <summary>
The algorithm used for classification.
</summary>
            <value>
The Algorithm value. The default value is CogOCRMaxClassifierAlgorithmConstants::BasicFast.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAlgorithm</item>
                </list>
            </event>
            <remarks>
                <para>
The classification validation step perfomrms some extra calculations to 
"double check" that the highest scoring candidate is really the correct
character. If this validation fails, the character position result 
is marked Confused, the confidence score is set to 0, and the
ConfusionExplanation is set to ClassificationValidationFailure.
The result of the validation step does not affect the result score.
</para>
                <para>
Enable Validation when it's imporant to prevent the tool from
accidentally reading the wrong character (similar to increaing the 
confusion threshold).
The tradeoff is that enabling Validation may cause some strings
that would have read OK to come back confused.
</para>
                <para>
If enabling Validation is causing character confusion on seemingly 
readable characters, it may help to add some additional character
instances (of that character) to the Font.
</para>
                <para>
BasicFast is a newer more streamlined version of the Basic algorithm.
BasicFast is suggested for most applications.
BasicFast is typically much faster than Basic, with similar robustness.
The older Basic algorithm is maintained for compatibility with older
applications.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.AspectMode">
            <summary>
How use the 'rectified character images' aspect ratio when resampling
the rectified image at train-time/run-time.
</summary>
            <value>
The AspectMode value. The default value is Ignore.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAspectMode</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.TemplateWidth">
            <summary>
The width to which the rectified images are resampled for
classification.
</summary>
            <value>
The TemplateWidth value. The default value is 10.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTemplateWidth</item>
                </list>
            </event>
            <remarks>
                <para>
Setting the width may cause the height to be adjusted such that the
total template area (height x width) is less than or equal to 32768.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than 32768
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.TemplateHeight">
            <summary>
The height to which the rectified images are resampled for
classification.
</summary>
            <value>
The TemplateHeight value. The default value is 18.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTemplateHeight</item>
                </list>
            </event>
            <remarks>
                <para>
Setting the height may cause the width to be adjusted such that the
total template area (height x width) is less than or equal to 32768.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than 32768
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxClassifierTrainParams object.
</summary>
            <param name="other">
The CogOCRMaxClassifierTrainParams to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.#ctor">
            <summary>
Construct a default CogOCRMaxClassifierTrainParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.SfImagePreprocessing">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ImagePreprocessing may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.SfAlgorithm">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Algorithm may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.SfAspectMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by AspectMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.SfTemplateWidth">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TemplateWidth may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams.SfTemplateHeight">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TemplateHeight may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierTrainParams">
            <summary>
Training parameters for the OCRMax Classifier.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.GetParams(coc_charSegmentRunParams*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Return the CVT version of this class.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.MakeccOCCharSegmentRunParams">
            <summary>
Create a ccOCCharSegmentRunParams based on this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SetFromccOCCharSegmentRunParams(ccOCCharSegmentRunParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxSegmenter from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.#ctor(ccOCCharSegmentRunParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxSegmenter based on its cvl equivalent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenter.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.CogRectangleAffine[])">
            <summary>
Segment several lines of characters contained within the search regions.
</summary>
            <param name="image">
The Image from which to segment lines of characters.
</param>
            <param name="regions">
The regions of interest (ROI(s)) of the image from which to segment
characters (one line of characters per region).
</param>
            <remarks>
                <para>
Segmentation is performed on the 16 bit grey pixel data after the removal
of non-visible or missing pixels. If the input range image GetMaskData() 
returns a null visible pixel mask it is assumed that any missing pixels were
removed external to the segmenter in a previous step.
If the image's visible pixel mask is _not_ null, the segmenter removes the
missing pixels using a neighborhood interpolation filter of the image 
within the region before performing segmentation.
</para>
                <para>
The regions should each contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the regions other than the one line of
characters.
</para>
                <para>
The regions are specified in the selected space coordinates of the input
image. The x-axis should be approximately parallel to the baseline of
the contained line of characters, with its positive direction pointing
along the reading direction. The skew should be the approximate value of
the skew of the line of characters.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
any region is entirely outside the image.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:System.NotImplementedException">
Thrown if:
<list type="bullet"><item>
any region is partially outside the input image.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
Thrown if <paramref name="regions" /> is null.
</exception>
            <exception cref="T:System.NotImplementedException">
Thrown if LineRefinementMode is set to Classic.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage16Range)">
            <summary>
Segment one line of characters contained within the image.
</summary>
            <param name="image">
The Image from which to segment characters.
</param>
            <remarks>
                <para>
Segmentation is performed on the 16 bit grey pixel data after the removal
of missing pixels. If the input range image GetMaskData() returns 
a null visible pixel mask it is assumed that any missing pixels were
removed external to the segmenter in a previous step.
If the image's visible pixel mask is _not_ null, the segmenter removes the
missing pixels using a neighborhood interpolation filter of the image within the
region before performing segmentation.
</para>
                <para>
The image should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the image other than the one line of
characters.
</para>
                <para>
The bottom of the image should be approximately parallel to the baseline
of the contained line of characters. If the line of characters is
severely rotated or skewed use the Execute overload that accepts a
region argument.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
UseCharacterMaxWidth is true and CharacterMinWidth is greater than
CharacterMaxWidth.
</item><item>
UseCharacterMaxHeight is true and CharacterMinHeight is greater than
CharacterMaxHeight.
</item><item>
SpaceParams.SpaceMinWidth is greater than SpaceParams.SpaceMaxWidth.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
</exception>
            <exception cref="T:System.NotImplementedException">
Thrown if LineRefinementMode is set to Classic.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage16Range,Cognex.VisionPro.CogRectangleAffine)">
            <summary>
Segment one line of characters contained within the 2D region.
</summary>
            <param name="image">
The Image from which to segment characters.
</param>
            <param name="region">
The region of interest (ROI) of the image from which to segment
characters.
</param>
            <remarks>
                <para>
Segmentation is performed on the 16 bit grey pixel data after the removal
of missing pixels. If the input range image GetMaskData() returns 
a null visible pixel mask it is assumed that any missing pixels were
removed external to the segmenter in a previous step.
If the image's visible pixel mask is _not_ null, the segmenter removes the
missing pixels using a neighborhood interpolation filter of the image
within the region before performing segmentation.
</para>
                <para>
The region should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the region other than the one line of
characters.
</para>
                <para>
The region is specified in the selected space coordinates of the input
image. The x-axis should be approximately parallel to the baseline of
the contained line of characters, with its positive direction pointing
along the reading direction. The skew should be the approximate value of
the skew of the line of characters.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
the region is entirely outside the image.
</item><item>
UseCharacterMaxWidth is true and CharacterMinWidth is greater than
CharacterMaxWidth.
</item><item>
UseCharacterMaxHeight is true and CharacterMinHeight is greater than
CharacterMaxHeight.
</item><item>
SpaceParams.SpaceMinWidth is greater than SpaceParams.SpaceMaxWidth.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
a region that is entirely outside the image.
</item><item>
a region containing the image.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
</exception>
            <exception cref="T:System.NotImplementedException">
Thrown if LineRefinementMode is set to Classic.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage16Grey,Cognex.VisionPro.CogRectangleAffine[])">
            <summary>
Segment several lines of characters contained within the search regions.
</summary>
            <param name="image">
The Image from which to segment lines of characters.
</param>
            <param name="regions">
The regions of interest (ROI(s)) of the image from which to segment
characters (one line of characters per region).
</param>
            <remarks>
                <para>
The regions should each contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the regions other than the one line of
characters.
</para>
                <para>
The regions are specified in the selected space coordinates of the input
image. The x-axis should be approximately parallel to the baseline of
the contained line of characters, with its positive direction pointing
along the reading direction. The skew should be the approximate value of
the skew of the line of characters.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
any region is entirely outside the image.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:System.NotImplementedException">
Thrown if:
<list type="bullet"><item>
any region is partially outside the input image.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
Thrown if <paramref name="regions" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage16Grey)">
            <summary>
Segment one line of characters contained within the image.
</summary>
            <param name="image">
The Image from which to segment characters.
</param>
            <remarks>
                <para>
The image should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the image other than the one line of
characters.
</para>
                <para>
The bottom of the image should be approximately parallel to the baseline
of the contained line of characters. If the line of characters is
severely rotated or skewed use the Execute overload that accepts a
region argument.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
UseCharacterMaxWidth is true and CharacterMinWidth is greater than
CharacterMaxWidth.
</item><item>
UseCharacterMaxHeight is true and CharacterMinHeight is greater than
CharacterMaxHeight.
</item><item>
SpaceParams.SpaceMinWidth is greater than SpaceParams.SpaceMaxWidth.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage16Grey,Cognex.VisionPro.CogRectangleAffine)">
            <summary>
Segment one line of characters contained within the region.
</summary>
            <param name="image">
The Image from which to segment characters.
</param>
            <param name="region">
The region of interest (ROI) of the image from which to segment
characters.
</param>
            <remarks>
                <para>
The region should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the region other than the one line of
characters.
</para>
                <para>
The region is specified in the selected space coordinates of the input
image. The x-axis should be approximately parallel to the baseline of
the contained line of characters, with its positive direction pointing
along the reading direction. The skew should be the approximate value of
the skew of the line of characters.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
the region is entirely outside the image.
</item><item>
UseCharacterMaxWidth is true and CharacterMinWidth is greater than
CharacterMaxWidth.
</item><item>
UseCharacterMaxHeight is true and CharacterMinHeight is greater than
CharacterMaxHeight.
</item><item>
SpaceParams.SpaceMinWidth is greater than SpaceParams.SpaceMaxWidth.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogRectangleAffine[])">
            <summary>
Segment several lines of characters contained within the search regions.
</summary>
            <param name="image">
The Image from which to segment lines of characters.
</param>
            <param name="regions">
The regions of interest (ROI(s)) of the image from which to segment
characters (one line of characters per region).
</param>
            <remarks>
                <para>
The regions should each contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the regions other than the one line of
characters.
</para>
                <para>
The regions are specified in the selected space coordinates of the input
image. The x-axis should be approximately parallel to the baseline of
the contained line of characters, with its positive direction pointing
along the reading direction. The skew should be the approximate value of
the skew of the line of characters.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
any region is entirely outside the image.
</item></list></exception>
            <exception cref="T:System.NotImplementedException">
Thrown if:
<list type="bullet"><item>
any region is partially outside the input image.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
Thrown if <paramref name="regions" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage8Grey)">
            <summary>
Segment one line of characters contained within the image.
</summary>
            <param name="image">
The Image from which to segment characters.
</param>
            <remarks>
                <para>
The image should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the image other than the one line of
characters.
</para>
                <para>
The bottom of the image should be approximately parallel to the baseline
of the contained line of characters. If the line of characters is
severely rotated or skewed use the Execute overload that accepts a
region argument.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
UseCharacterMaxWidth is true and CharacterMinWidth is greater than
CharacterMaxWidth.
</item><item>
UseCharacterMaxHeight is true and CharacterMinHeight is greater than
CharacterMaxHeight.
</item><item>
SpaceParams.SpaceMinWidth is greater than SpaceParams.SpaceMaxWidth.
</item><item>
CharacterFramgentMaxDistanceToMainLine is less than 0.0 or greater than 1.0.
</item><item>
CharacterFragmentMainLineMinYOverlapFrac is less than 0.0 or greater than 1.0.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.CogRectangleAffine)">
            <summary>
Segment one line of characters contained within the region.
</summary>
            <param name="image">
The Image from which to segment characters.
</param>
            <param name="region">
The region of interest (ROI) of the image from which to segment
characters.
</param>
            <remarks>
                <para>
The region should contain one line of characters and surrounding
featureless, but possibly nonuniform and/or noisy, background; there
should be no strong features in the region other than the one line of
characters.
</para>
                <para>
The region is specified in the selected space coordinates of the input
image. The x-axis should be approximately parallel to the baseline of
the contained line of characters, with its positive direction pointing
along the reading direction. The skew should be the approximate value of
the skew of the line of characters.
</para>
                <para>
If AngleHalfRange is greater than zero, the angle of the line will be
refined.  If SkewHalfRange is greater than zero, the skew of the line
will be refined.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" />
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
the region is entirely outside the image.
</item><item>
UseCharacterMaxWidth is true and CharacterMinWidth is greater than
CharacterMaxWidth.
</item><item>
UseCharacterMaxHeight is true and CharacterMinHeight is greater than
CharacterMaxHeight.
</item><item>
SpaceParams.SpaceMinWidth is greater than SpaceParams.SpaceMaxWidth.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
Thrown if:
<list type="bullet"><item>
a region that is entirely outside the image.
</item><item>
a region containing the image.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTransformNotLinearException">
Thrown if:
<list type="bullet"><item>
the image contains a non-linear transform.
</item></list></exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogImageAllocatedException">
Thrown if the image is not allocated.
</exception>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException">
Thrown if the Timeout expired.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="image" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.ComputeDiagnostics">
            <summary>
Whether to compute additional segmenter diagnostics information
when the segmenter is run.
</summary>
            <value>
The ComputeDiagnostics value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfComputeDiagnostics</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.LineRefinementMode">
            <summary>     
Cognex Internal Use Only
</summary>
            <value>
The LineRefinementMode value. The default value is CogOCRMaxSegmenterLineRefinementModeConstants::Standard.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfLineRefinementMode</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Refine line
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SpaceParams">
            <summary>
Parameters to control whether and how to insert space characters.
</summary>
            <value>
The SpaceParams value. The default value is a default constructed CogOCRMaxSegmenterSpaceParams instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSpaceParams</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Analyze
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if SpaceParams is set to null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.MinPitch">
            <summary>
The minimum pitch, in pixels, that can occur between two characters,
where the pitch is computed as specified by the pitch metric.  If the
pitch between two fragments is smaller than this, then they must be
considered to be part of the same character, unless the combined
character would be too wide (as specified by CharacterMaxWidth and/or
CharacterMinAspect).
</summary>
            <value>
The MinPitch value. The default value is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMinPitch</item>
                </list>
            </event>
            <remarks>
                <para>
This parameter is not used if AnalysisMode is Minimal.
</para>
                <para>
Stage: Analyze
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.PitchType">
            <summary>
How individual pitch values are expected to vary; 
the pitch values are measured as specified by the pitch
metric.
</summary>
            <value>
The PitchType value. The default value is CogOCRMaxSegmenterFontPitchTypeConstants::Unknown.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPitchType</item>
                </list>
            </event>
            <remarks>
                <para>
This parameter is not used if AnalysisMode is Minimal.
</para>
                <para>
Stage: Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.PitchMetric">
            <summary>
The metric used to specify the spacing of characters.  Note that pitch
is the distance between (approximately) corresponding points on adjacent
characters and not the distance from the end of one character to the
beginning of the next character (which is called the "intercharacter
gap").  Also note that specifying the pitch metric does not necessarily
imply that the measured pitch values are expected to be constant.
</summary>
            <value>
The PitchMetric value. The default value is CogOCRMaxSegmenterFontPitchMetricConstants::Unknown.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPitchMetric</item>
                </list>
            </event>
            <remarks>
                <para>
This parameter is not used if AnalysisMode is Minimal.
</para>
                <para>
Stage: Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.AnalysisMode">
            <summary>
Whether to perform "minimal analysis" or "standard analysis".  Minimal
analysis performs straightforward segmentation according to the
parameters above.  Standard analysis performs an analysis of the line as
a whole, including e.g. character spacing, to determine the optimal
segmentation.
</summary>
            <value>
The AnalysisMode value. The default value is CogOCRMaxSegmenterAnalysisModeConstants::Standard.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAnalysisMode</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CellRectangleWidthType">
            <summary>
How to compute the width of a character's cell rectangle.
</summary>
            <value>
A <see cref="!:T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCellRectangleWidthTypeConstants" />
value that indicates how to compute the cell rectangle width.  The
default is <see cref="!:F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCellRectangleWidthTypeConstants.Fixed" />.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCellRectangleWidthType</item>
                </list>
            </event>
            <remarks>
                <para>
Note that the cell rectangle of a character is wider than its
mark rectangle.  The mark rectangle is a tight bounding box
enclosing all of the character's ink.  The cell rectangle
encloses the mark rectangle but includes additional blank
space on each side of the ink.
</para>
                <para>
Stage: Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.WidthType">
            <summary>
How the widths of characters in the font are expected to vary.  Note
that the character width is the width of the mark rectangle (e.g. the
bounding box of the ink), not the cell rectangle (which would typically
include padding around the mark rectangle).
</summary>
            <value>
The WidthType value. The default value is
CogOCRMaxSegmenterFontCharWidthTypeConstants::Unknown.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfWidthType</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
Stage: Group, Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.TimeoutEnabled">
            <summary>
Enables the timeout for the segmenter.
</summary>
            <value>
The TimeoutEnabled value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTimeoutEnabled</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Timeout">
            <summary>
Gets or sets the timeout for running the segmenter in milliseconds.
</summary>
            <value>
The Timeout value. The default value is 5000.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfTimeout</item>
                </list>
            </event>
            <remarks>
                <para>
This timeout is independent of the CogOCRMaxTool Timeout property when the
segmenter is used as part of the OCRMax Tool
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterMinAspect">
            <summary>
The minimum allowable aspect of a character, where the aspect is defined
as the height of the entire line of characters divided by the width of
the character's mark rectangle. A character whose aspect is smaller than
this value (i.e. whose width is too large) will be split into pieces
that are not too wide.
</summary>
            <value>
The CharacterMinAspect value. The default value is 0.8.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterMinAspect</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
This value is used only if UseCharacterMinAspect is true.
</para>
                <para>
The technique used to split the character into pieces depends on the
value of WidthType.  If WidthType is FontCharWidthTypeFixed, the
segmenter will try to break the character into pieces of approximately
equal width.  If WidthType is FontCharWidthTypeVariable or
FontCharWidthTypeUnknown, the segmenter will try to break the character
into pieces that are not required to be approximately the same width.
</para>
                <para>
The segmenter may sometimes choose to return characters slightly wider
than the width indicated by this value if it cannot find a reasonable
split.
</para>
                <para>
CharacterMaxWidth is another way of specifying a maximum character
width.
</para>
                <para>
This definition of aspect is more convenient than simply using the
height of the character's mark rectangle divided by the width of the
character's mark rectangle, e.g. so that allowing a dash "-" does not
require using a tiny CharacterMinAspect value.
</para>
                <para>
Stage: Group, Analyze
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than
System::Double::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.UseCharacterMinAspect">
            <summary>
Whether to use CharacterMinAspect to split wide characters.
</summary>
            <value>
The UseCharacterMinAspect value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUseCharacterMinAspect</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Group, Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.MaxIntracharacterGap">
            <summary>
The maximum gap size, in pixels, that can occur within a single
character, even for damaged characters.  An intracharacter gap might
occur, for example, between successive columns of dots in dot matrix
print, or between two pieces of a solid character that was damaged by a
scratch.  Any gap larger than this value will always be interpreted as a
break between two separate characters, whereas gaps less than or equal
to this value may be interpreted either as a break between two separate
characters or as a gap within a single character.
</summary>
            <value>
The MaxIntracharacterGap value. The default value is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMaxIntracharacterGap</item>
                </list>
            </event>
            <remarks>
                <para>
This value is used only if UseMaxIntracharacterGap is true.
</para>
                <para>
This value is used only if CharacterFragmentMergeMode is SpecifyGaps.
</para>
                <para>
Stage: Fragment, Group, Analyze
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterFragmentMergeMode">
            <summary>
Get/set the mode used to determine whether to merge two fragments into
one character during the Group stage.
</summary>
            <value>
The CharacterFragmentMergeMode value. The default value is CogOCRMaxSegmenterCharacterFragmentMergeModeConstants::RequireOverlap.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterFragmentMergeMode</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Group, Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterFragmentMainLineMinYOverlapFrac">
            <summary>
Get/set the minimum fraction by which a character fragment must overlap the
mainline of characters in order for the fragment to be included.
</summary>
            <value>
The CharacterFragmentMainLineMinYOverlapFrac value. The default value is 0.5.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterFragmentMainLineMinYOverlapFrac</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Fragment
</para>
                <para>
Note that fragments which have top and bottom edges which fall closer to 
the main line than CharacterFragmentMaxDistanceToMainLine are included
regardless of how much they overlap the mainline.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterFragmentMaxDistanceToMainLine">
            <summary>
Get/set a modifier in the range [0, 1] this is the maximum distance a
fragment can have outside the main line of characters as percentage of
estimated line height in order to be included.
</summary>
            <value>
The CharacterFragmentMaxDistanceToMainLine value. The default value is 0.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterFragmentMaxDistanceToMainLine</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Fragment
</para>
                <para>
Note that fragments which _overlap_ the mainline by at least
CharacterFragmentMainLineMinYOverlapFrac get included regardless 
of how far their top and bottom edges are from the mainline.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.MinIntercharacterGap">
            <summary>
The minimum gap size, in pixels, that can occur between two characters.
If the gap between two fragments is smaller than this, then they must be
considered to be part of the same character, unless the combined
character would be too wide (as specified by CharacterMaxWidth and/or
CharacterMinAspect).  The gap is measured from the right edge of the
mark rectangle of one character to the left edge of the mark rectangle
of the next character.
</summary>
            <value>
The MinIntercharacterGap value. The default value is 1.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMinIntercharacterGap</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
Note that "left" and "right" are relative to the coordinate axis
defined by the search region, i.e. right is the positive x direction.
</para>
                <para>
This value is used only if CharacterFragmentMergeMode is
SpecifyMinIntercharacterGap or SpecifyGaps.
</para>
                <para>
Stage: Fragment, Group, Analyze
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterMaxHeight">
            <summary>
The maximum allowable height of a character's mark rectangle, in pixels.
This value is used in two ways.  First, this value is used when finding
the line as a whole, e.g. to reject vertically adjacent noise and/or
other lines of vertically adjacent characters.  Second, an individual
character whose height exceeds this value will be trimmed to meet this
height.
</summary>
            <value>
The CharacterMaxHeight value. The default value is 50.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterMaxHeight</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
This value is used only if UseCharacterMaxHeight is true.
</para>
                <para>
A tall character may be trimmed to a height below CharacterMaxHeight if
the segmenter chooses.
</para>
                <para>
Stage: Refine line, Group, Analyze
</para>
                <para>
Setting this property to a value less than CharacterMinHeight will cause
CharacterMinHeight to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.UseCharacterMaxHeight">
            <summary>
Whether to use CharacterMaxHeight to limit the maximum height of a
character and/or the line of characters.
</summary>
            <value>
The UseCharacterMaxHeight value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUseCharacterMaxHeight</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Refine line, Group, Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterMinHeight">
            <summary>
The minimum height of a character's mark rectangle, in pixels, that a
character must have in order to be reported.
</summary>
            <value>
The CharacterMinHeight value. The default value is 20.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterMinHeight</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
Stage: Group, Analyze
</para>
                <para>
Setting this property to a value greater than CharacterMaxHeight will
cause CharacterMaxHeight to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterMaxWidth">
            <summary>
The maximum allowable width of a character's mark rectangle, in pixels. 
A character wider than this value will be split into pieces that are not
too wide.
</summary>
            <value>
The CharacterMaxWidth value. The default value is 50.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterMaxWidth</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
This value is used only if UseCharacterMaxWidth is true.
</para>
                <para>
The technique used to split the character into pieces depends on the
value of WidthType.  If WidthType is FontCharWidthTypeFixed, the
segmenter will try to break the character into pieces of approximately
equal width.  If WidthType is FontCharWidthTypeVariable or
FontCharWidthTypeUnknown, the segmenter will try to break the character
into pieces that are not required to be approximately the same width.
</para>
                <para>
The segmenter may sometimes choose to return characters slightly wider
than this value if it cannot find a reasonable split.
</para>
                <para>
CharacterMinAspect is another way of specifying a maximum character
width.
</para>
                <para>
Stage: Group, Analyze
</para>
                <para>
Setting this property to a value less than CharacterMinWidth will cause
CharacterMinWidth to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.UseCharacterMaxWidth">
            <summary>
Whether to use CharacterMaxWidth to split wide characters.
</summary>
            <value>
The UseCharacterMaxWidth value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUseCharacterMaxWidth</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Group, Analyze
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterMinWidth">
            <summary>
The minimum width of a character's mark rectangle, in pixels, that a
character must have in order to be reported.
</summary>
            <value>
The CharacterMinWidth value. The default value is 15.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterMinWidth</item>
                </list>
            </event>
            <remarks>
                <para>
The mark rectangle of a character is a tight bounding box enclosing all
of the foreground (e.g. ink) pixels in the character image.
</para>
                <para>
Stage: Group, Analyze
</para>
                <para>
Setting this property to a value greater than CharacterMaxWidth will
cause CharacterMaxWidth to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterMinNumPels">
            <summary>
The minimum number of foreground (i.e. text) pixels that a character
must have in order to be reported.
</summary>
            <value>
The CharacterMinNumPels value. The default value is 30.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterMinNumPels</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Group, Analyze
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterFragmentMinXOverlap">
            <summary>
The minimum fraction by which two character fragments must overlap each
other in the x direction in order for the two fragments to be considered
part of the same character.
</summary>
            <value>
The CharacterFragmentMinXOverlap value. The default value is 0.0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterFragmentMinXOverlap</item>
                </list>
            </event>
            <remarks>
                <para>
This value is used only if CharacterFragmentMergeMode = RequireOverlap.
</para>
                <para>
Stage: Fragment
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than 1.0
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterFragmentContrastThreshold">
            <summary>
The minimum amount of contrast (in normalized image grey levels) that a
fragment must have, relative to the binarization threshold, in order to
be considered for possible inclusion in a character.  See the comments
for ForegroundThresholdFrac() for the value of the binarization
threshold.
</summary>
            <value>
The CharacterFragmentContrastThreshold value. The default value is 30.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterFragmentContrastThreshold</item>
                </list>
            </event>
            <remarks>
                <para>
Any character fragment with a contrast lower than this value is
completely ignored for all further processing, as though that fragment
had never been detected.
</para>
                <para>
Stage: Fragment
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.CharacterFragmentMinNumPels">
            <summary>
The minimum number of foreground (i.e. text) pixels that a  fragment
must have in order to be considered for possible inclusion in a
character.  A character fragment is a blob in the binarized image.
</summary>
            <value>
The CharacterFragmentMinNumPels value. The default value is 15.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterFragmentMinNumPels</item>
                </list>
            </event>
            <remarks>
                <para>
Character fragments that contain fewer foreground pixels than this value
are completely ignored for all further processing, as though that
fragment had never been detected.
</para>
                <para>
Stage: Fragment
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 1 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.IgnoreBorderFragments">
            <summary>
Whether to completely ignore any fragments that touch any border of the
ROI.  Ignoring such fragments can be useful for  non-text features such
as the edges of labels that might be included within the ROI.
</summary>
            <value>
The IgnoreBorderFragments value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfIgnoreBorderFragments</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Fragment
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.ForegroundThresholdFrac">
            <summary>
A modifier in the range [0, 1] that is used to compute the binarization
threshold, in the normalized image, that binarizes between foreground
and background.
</summary>
            <value>
The ForegroundThresholdFrac value. The default value is 0.5.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfForegroundThresholdFrac</item>
                </list>
            </event>
            <remarks>
                <para>
When the input character polarity is LightOnDark:
</para>
                <para>
    Threshold = round(max((1 - ForegroundThresholdFrac) * 255, 1))
</para>
                <para>
    Invert = false
</para>
                <para>
A value of zero results in a binarization threshold value of 255,
indicating that only the pixels with value 255 (considered most certain
to be foreground) should be treated as foreground. A value of one gives
a binarization threshold value of 1, indicating that all pixels should
be treated as foreground except for those with the value 0 (considered
most certain to be background) should be treated as background.
</para>
                <para>
When the input character polarity is DarkOnLight:
</para>
                <para>
    Threshold = round(max(ForegroundThresholdFrac * 255, 1))
</para>
                <para>
    Invert = true
</para>
                <para>
A value of zero results in a binarization threshold value of 1,
indicating that only the pixels with value 0 (considered most certain to
be foreground) should be treated as foreground. A value of one gives a
threshold value of 255, indicating that all pixels should be treated as
foreground except for those with the value 255 (considered most certain
to be background) should be treated as background.
</para>
                <para>
In summary, a value of zero indicates that only the pixels considered
most certain to be foreground should be treated as foreground, and a
value of one indicates that all pixels should be treated as foreground
except for those considered most certain to be background.
</para>
                <para>
Stage: Binarize
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than 1.0
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.UseStrokeWidthFilter">
            <summary>
Whether to remove from the normalized image everything that does not
appear to have the same stroke width as the rest of the image. This can
be useful if, for example, characters appear to be connected to each
other by thin noise streaks.  However, using the stroke width filter
might incorrectly remove real characters if the stroke widths are
inconsistent.
</summary>
            <value>
The UseStrokeWidthFilter value. The default value is true.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfUseStrokeWidthFilter</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Normalize
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.NormalizationMode">
            <summary>
The method used to normalize the input image.
</summary>
            <value>
The NormalizationMode value. The default value is CogOCRMaxSegmenterNormalizationModeConstants::LocalAdvanced.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfNormalizationMode</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Normalize
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SkewHalfRange">
            <summary>
Half of the skew search range in radians.
</summary>
            <value>
The SkewHalfRange value. The default value is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSkewHalfRange</item>
                </list>
            </event>
            <remarks>
                <para>
The line skew search range is centered on the skew of affine rectangle
used as the ROI for the segmenter. In other words, the full search range
is skew - SkewHalfRange, skew + SkewHalfRange]. 
</para>
                <para>
Increasing SkewHalfRange increases the segmenter's run time.
</para>
                <para>
Setting SkewHalfRange to 0 effectively disables skew search.
</para>
                <para>
Stage: Refine line
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than PI/4
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.AngleHalfRange">
            <summary>
Half of the angle search range in radians.
</summary>
            <value>
The AngleHalfRange value. The default value is 0.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfAngleHalfRange</item>
                </list>
            </event>
            <remarks>
                <para>
The line angle search range is centered on the xRotation of affine
rectangle used as the ROI for the segmenter. In other words, the full
search range is xRotation - AngleHalfRange, xRotation + AngleHalfRange].
</para>
                <para>
Increasing AngleHalfRange increases the segmenter's run time.
</para>
                <para>
Setting AngleHalfRange to 0 effectively disables angle search.
</para>
                <para>
Stage: Refine line
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0.0 or greater than PI/4
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.Polarity">
            <summary>
The polarity of the characters in the input image.  If the polarity is
Unknown, the polarity will be automatically determined.
</summary>
            <value>
The Polarity value. The default value is CogOCRMaxPolarityConstants::Unknown.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPolarity</item>
                </list>
            </event>
            <remarks>
                <para>
Stage: Refine line, Normalize
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenter object.
</summary>
            <param name="other">
The CogOCRMaxSegmenter to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenter object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCellRectangleWidthType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CellRectangleWidthType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterFragmentMainLineMinYOverlapFrac">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterFragmentMainLineMinYOverlapFrac may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfComputeDiagnostics">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ComputeDiagnostics may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfLineRefinementMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by LineRefinementMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfSpaceParams">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SpaceParams may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfMinPitch">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by MinPitch may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfPitchType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by PitchType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfPitchMetric">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by PitchMetric may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfAnalysisMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by AnalysisMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfWidthType">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by WidthType may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfTimeoutEnabled">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by TimeoutEnabled may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfTimeout">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Timeout may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterMinAspect">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterMinAspect may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfUseCharacterMinAspect">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UseCharacterMinAspect may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfMaxIntracharacterGap">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by MaxIntracharacterGap may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterFragmentMergeMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterFragmentMergeMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterFragmentMaxDistanceToMainLine">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterFragmentMaxDistanceToMainLine may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfMinIntercharacterGap">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by MinIntercharacterGap may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterMaxHeight">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterMaxHeight may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfUseCharacterMaxHeight">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UseCharacterMaxHeight may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterMinHeight">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterMinHeight may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterMaxWidth">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterMaxWidth may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfUseCharacterMaxWidth">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UseCharacterMaxWidth may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterMinWidth">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterMinWidth may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterMinNumPels">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterMinNumPels may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterFragmentMinXOverlap">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterFragmentMinXOverlap may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterFragmentContrastThreshold">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterFragmentContrastThreshold may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfCharacterFragmentMinNumPels">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterFragmentMinNumPels may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfIgnoreBorderFragments">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by IgnoreBorderFragments may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfForegroundThresholdFrac">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by ForegroundThresholdFrac may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfUseStrokeWidthFilter">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by UseStrokeWidthFilter may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfNormalizationMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by NormalizationMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfSkewHalfRange">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SkewHalfRange may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfAngleHalfRange">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by AngleHalfRange may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter.SfPolarity">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Polarity may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenter">
            <summary>
CogOCRMaxSegmenter performs the first main step of OCRMax. Segmentation takes an
image containing a line of text as input, and outputs CogOCRMaxChar(s)
structures which contain information about where individual characters can
be found in the image. For example, if the input image contains the line of
text "ABCD", then segmenter outputs four separate CogOCRMaxChars, each of which
contains an image of a single character. The segmenter does not know
anything about actually determining which letter a CogOCRMaxChar corresponds
to; in the above example, it has no way of knowing that the CogOCRMaxChar is
the letter "A". The job of identifying each CogOCRMaxChar is left to the
classifier. See the <see cref="!:z:8bd611a4-8ec3-40d7-a03b-d96de1dd5c2b">OCRMax Theory Guide</see> 
for more information.
</summary>
            <remarks>
                <para>
Each segmenter property is used in one or more stages of segmentation; each
property will note which stage(s) it is used in with a comment of the form
"Stage: Name", where "Name" is one of the stages listed below.
</para>
                <para>
1) Refine line --- Determine line location, angle, skew, and/or polarity.  
</para>
                <para>
2) Normalize --- Normalize the input image to produce a normalized image.
The normalized image should be binarizable using a single global threshold.
</para>
                <para>
3) Binarize --- Determine a threshold and use it to binarize the normalized
image to produce a binarized image.
</para>
                <para>
4) Fragment --- Perform blob analysis to produce character fragments, where
each character fragment is a single blob.
</para>
                <para>
5) Group --- Group character fragments together to form characters. 
Grouping may include merging and/or splitting fragments.  Small characters
may be discarded.
</para>
                <para>
6) Analyze --- Optionally perform additional analysis to determine a more
optimal grouping.
</para>
                <para>
The OCRMax Segmenter splits a line of text in an image into images of the
individual characters.  The user specifies a CogRectangleAffine as a region
of interest (ROI) that specifies the approximate location, angle, and skew
of the line of text.  The Segmenter is capable of  refining the angle and
skew of the line if requested. 
</para>
                <para>
The x axis of the affine rectangle should be parallel to the baseline of the
text, and the y axis should be parallel to the vertical strokes of the
characters; if there is no skew, the y axis is perpendicular to the x axis. 
The positive direction of the x axis corresponds to the reading direction. 
(Note that the baseline of the text may have any angle 0-360 in the image,
as long as the affine rectangle is oriented at approximately the same angle.
</para>
                <para>
The ROI is expected to contain only the one line of text to be read and some
surrounding background.  The background is allowed to be noisy and it may
have significant background gradients/shading.  In images that are clearly
printed and have little noise, the ROI may be significantly larger than the
line of text; noisy images may require that the ROI be relatively tight
around the line of text.  Note that the ROI should not contain significant
image features other than the line of text; for example, it should not
partially enclose a different nearby line of text, nor should it enclose a
label edge.
</para>
                <para>
As an approximate rule of thumb, the ROI should be larger than the line of
text by at least half a character width on all sides if possible (i.e.
unless a border that large would cause other features to be enclosed within
the ROI).
</para>
                <para>
It is important to note that the OCRMax Segmenter tool is not a general purpose
string finder; it is not capable of finding a string in an arbitrarily
complex image with a large ROI.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.SetFromccOCCharSegmentResult(ccOCCharSegmentResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.#ctor(ccOCCharSegmentResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterResult object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterResult">
            <summary>
A segmenter result is a collection of one or more
CogOCRMaxSegmenterParagraphResults. This result is returned when using the
Execute override that accepts multiple regions of interest as inputs.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.SetFromccOCCharSegmentParagraphResult(ccOCCharSegmentParagraphResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterParagraphResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.#ctor(ccOCCharSegmentParagraphResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterParagraphResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterParagraphResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterParagraphResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterParagraphResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterParagraphResult object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterParagraphResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterParagraphResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterParagraphResult">
            <summary>
A segmentation paragraph result contains one or more lines of segmented
characters.
</summary>
            <remarks>
A CogOCRMaxParagraphResult is a collection of CogOCRMaxSegmenterLineResults.
</remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.SetFromccOCCharSegmentLineResult(ccOCCharSegmentLineResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterLineResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.#ctor(ccOCCharSegmentLineResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterLineResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterLineResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterLineResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterLineResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.BinarizedRectifiedLineImage">
            <summary>
Return an image of the line of the segmented characters after
rectification, normalization, and binarization.
</summary>
            <value>
The BinarizedRectifiedLineImage value. The default value is nullptr.
</value>
            <remarks>
                <para>
The binarized image is always a hard-thresholded version of the
normalized image, produced using the threshold and invert values.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.Invert">
            <summary>
Get the invert value used to binarize the normalized image.
</summary>
            <value>
The Invert value. The default value is false.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.Threshold">
            <summary>
Get the threshold value used to binarize the normalized image.
</summary>
            <value>
The Threshold value. The default value is -1.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.NormalizedRectifiedLineImage">
            <summary>
Return an image of the line of the segmented characters after
rectification and normalization.
</summary>
            <value>
The NormalizedRectifiedLineImage value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.RectifiedLineImage">
            <summary>
Returns an image of the line of the segmented characters after
rectification.
</summary>
            <value>
The RectifiedLineImage value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.Diagnostics">
            <summary>
Returns diagnostic information about the segmented line result.
The diagnostics information includes statistical data about
the segmented characters as well as some additional info about the 
intermediate steps that the segmenter took to produce the result.
</summary>
            <remarks>
Diagnostics will return nullptr unless the CogOCRSegmenter which
produced this line result had it's ComputeDiagnostics property set to true.
</remarks>
            <value>
The Diagnostics Information. The default value is nullptr.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterLineResult object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterLineResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterLineResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResult">
            <summary>
A segmenter line result represents an entire line of segmented characters.
</summary>
            <remarks>
                <para>
A CogOCRMaxSegmenterLineResult is a collection of
CogOCRMaxSegmenterPositionResults.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.SetFromccOCCharSegmentLineResultStats(ccOCCharSegmentLineResultStats!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterLineResultDiagnostics from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.#ctor(ccOCCharSegmentLineResultStats!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterLineResultDiagnostics based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterLineResultDiagnostics.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.NumTrimmedCharactersTooTall">
            <summary>
Returns the number of characters that needed to be trimmed because they
were too tall
</summary>
            <value>
The NumTrimmedCharactersTooTall value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.NumRejectedCharactersTooShort">
            <summary>
Returns the number of rejected characters because they were not tall
enough
</summary>
            <value>
The NumRejectedCharactersTooShort value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.NumRejectedCharactersTooNarrow">
            <summary>
Returns the number of rejected characters because they were not wide
enough
</summary>
            <value>
The NumRejectedCharactersTooNarrow value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.NumRejectedCharactersTooFewPels">
            <summary>
Returns the number of rejected characters because they did not have
enough pixels
</summary>
            <value>
The NumRejectedCharactersTooFewPels value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.NumRejectedCharacterFragmentsOutsideLineBounds">
            <summary>
Returns the number of fragments that were rejected because they were too far from the
main line _AND_ did not overlap it sufficiently to be included.
</summary>
            <value>
The NumRejectedCharacterFragmentsOutsideLineBounds value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.NumRejectedCharacterFragmentsBorderFragment">
            <summary>
Returns number of rejected fragments because they touched the search
region
</summary>
            <value>
The NumRejectedCharacterFragmentsBorderFragment value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.LineHeight">
            <summary>
Returns the height of the expanded line in image coordinates
</summary>
            <value>
The LineHeight value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MaxPitch">
            <summary>
Returns maximum pitch between all found characters
</summary>
            <value>
The MaxPitch value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MinPitch">
            <summary>
Returns minimum pitch between all found characters
</summary>
            <value>
The MinPitch value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MaxIntracharacterGap">
            <summary>
Returns maximum gap between all fragments of individual characters
</summary>
            <value>
The MaxIntracharacterGap value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MinIntracharacterGap">
            <summary>
Returns minimum gap between all fragments of individual characters
</summary>
            <value>
The MinIntracharacterGap value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MaxIntercharacterGap">
            <summary>
Returns maximum gap between all found characters
</summary>
            <value>
The MaxIntercharacterGap value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MinIntercharacterGap">
            <summary>
Returns minimum gap between all found characters
</summary>
            <value>
The MinIntercharacterGap value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.Polarity">
            <summary>
Returns the detected/used polarity of characters
</summary>
            <value>
The Polarity value. The default value is CogOCRMaxPolarityConstants::Unknown.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.Invert">
            <summary>
Returns true if the image was inverted
</summary>
            <value>
The Invert value. The default value is false.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.Threshold">
            <summary>
Returns the computed threshold for binarizing the image
</summary>
            <value>
The Threshold value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MainLineExpanded">
            <summary>
Returns the expanded main line to include partially included fragments
and the expansion with CharacterFragmentMaxDistanceToMainLine, if any.
</summary>
            <value>
The MainLineExpanded value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.MainLine">
            <summary>
Returns detected main line of characters.
MainLine is the rectangle initially detected by the segmenter and
assumed to contain most of the characters’ pixels.
</summary>
            <value>
The MainLine value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.LineSkew">
            <summary>
Returns absolute skew difference between the main line and the search
region used in segmentation
</summary>
            <value>
The LineSkew value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.LineAngle">
            <summary>
Returns absolute angle difference between the main line and the search
region used in segmentation
</summary>
            <value>
The LineAngle value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.FinalCharacterStatistics">
            <summary>
Returns statistical info about final accepted characters in a segmenter
line result
</summary>
            <value>
The FinalCharacterStatistics value. The default value is nullptr.
</value>
            <remarks>
                <para>
Note that the final character statistics do not include data about any
space characters.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if FinalCharacterStatistics is set to NULL.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.FinalCharacters">
            <summary>
Returns the final character groupings
</summary>
            <value>
The FinalCharacters value. The default value is gcnew CogOCRMaxSegmenterElementInfoCollection().
</value>
            <remarks>
                <para>
Note that the final characters do not include space characters which are
added after the final characters are determined.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if FinalCharacters is set to NULL.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.RejectedCharacterStatistics">
            <summary>
Returns statistical info about rejected the characters in a segmenter
line result
</summary>
            <value>
The RejectedCharacterStatistics value. The default value is nullptr.
</value>
            <exception cref="T:System.ArgumentNullException">
Thrown if RejectedCharacterStatistics is set to NULL.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.RejectedCharacters">
            <summary>
Returns any characters that were rejected after being initially formed 
</summary>
            <value>
The RejectedCharacters value. The default value is gcnew CogOCRMaxSegmenterElementInfoCollection().
</value>
            <exception cref="T:System.ArgumentNullException">
Thrown if RejectedCharacters is set to NULL.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.InitialCharacters">
            <summary>
Returns the initial characters which are the result of grouping or
splitting the final fragments into characters
</summary>
            <value>
The InitialCharacters value. The default value is gcnew CogOCRMaxSegmenterElementInfoCollection().
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.FinalFragmentStatistics">
            <summary>
Returns statistical info about the final character fragments in a
segmenter line result
</summary>
            <value>
The FinalFragmentStatistics value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.FinalFragments">
            <summary>
Returns character fragments after inital fragment processing is
complete. The final character fragments are then grouped into
characters.
</summary>
            <value>
The FinalFragments value. The default value is gcnew CogOCRMaxSegmenterElementInfoCollection().
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.RejectedFragmentStatistics">
            <summary>
Returns statistical info about rejected character fragments in a
segmenter line result
</summary>
            <value>
The RejectedFragmentStatistics value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.RejectedFragments">
            <summary>
Returns the fragments that were immediatly rejected because they did not
meet one or more of the restrictions set in the segmenter parameters
</summary>
            <value>
The RejectedFragments value. The default value is gcnew CogOCRMaxSegmenterElementInfoCollection().
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.InitialFragments">
            <summary>
Returns the initial set of fragments before any fragments have been
rejected or split/merged into other fragments
</summary>
            <value>
The initialFragments value. The default value is gcnew CogOCRMaxSegmenterElementInfoCollection().
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics)">
            <summary>
Constructs a deep copy of the supplied 
CogOCRMaxSegmenterLineResultDiagnostics object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterLineResultDiagnostics to be copied.
May not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is Nothing/null/nullptr.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterLineResultDiagnostics object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineResultDiagnostics">
            <summary>
Contains information about how the OCRMax Segmenter arrived at a particular
line result.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection.SetFromstdVectorOfccOCCharSegmentElementInfo(std.vector&lt;ccOCCharSegmentElementInfo,std.allocator&lt;ccOCCharSegmentElementInfo&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterElementInfoCollection from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection.#ctor(std.vector&lt;ccOCCharSegmentElementInfo,std.allocator&lt;ccOCCharSegmentElementInfo&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterElementInfoCollection based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterElementInfoCollection.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterElementInfoCollection object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterElementInfoCollection to be copied. May not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is Nothing/null/nullptr.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterElementInfoCollection object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfoCollection">
            <summary>
A collection of CogOCRMaxSegmenterElementInfos
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.SetFromccOCCharSegmentElementInfo(ccOCCharSegmentElementInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterElementInfo from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.#ctor(ccOCCharSegmentElementInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterElementInfo based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterElementInfo.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.Accepted">
            <summary>
Returns true if the element was accepted
</summary>
            <value>
The Accepted value. The default value is false.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.Action">
            <summary>
Returns the reason a character or fragment was rejected (or None if the
element was accepted)
</summary>
            <value>
The Action value. The default value is CogOCRMaxSegmenterElementActionConstants::None.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.OverlapFrac">
            <summary>
Returns the amount a character or fragment overlaps the mainline 
(in the y direction) as a fraction of the overall height of the 
character or fragment.
<para>
Use this diagnostic to help set the segmenter's
<see cref="!:Cognex::VisionPro::OCRMax::CharacterFragmentMainLineMinYOverlapFrac" />
parameter.
</para></summary>
            <value>
The OverlapFrac value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.DistanceToMainLine">
            <summary>
Returns the distance (in the y direction) of a character or fragment 
from the mainline as a percentage of the estimated line height.
<para>
Use this diagnostic to help set the segmenter's
<see cref="!:Cognex::VisionPro::OCRMax::CharacterFragmentMaxDistanceToMainLine" />
parameter.
</para></summary>
            <value>
The DisatanceToMainLine value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.Contrast">
            <summary>
Returns the contrast the character or fragment
</summary>
            <value>
The Contrast value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.HeightInPixels">
            <summary>
Returns the height of the character or fragment in pixel units.
</summary>
            <value>
The height of the element in pixels. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.WidthInPixels">
            <summary>
Returns the width of the character or fragment in pixel units.
</summary>
            <value>
The width of the element in pixels. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.NumPixels">
            <summary>
Returns the number of pixels in the character or fragment
</summary>
            <value>
The NumPixels value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.Region">
            <summary>
A rectangle which encloses the character or fragment
</summary>
            <value>
The Region value. The default value is nullptr.
</value>
            <exception cref="T:System.ArgumentNullException">
Thrown if Region is set to NULL.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterElementInfo object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterElementInfo to be copied. May not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is Nothing/null/nullptr.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterElementInfo object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementInfo">
            <summary>
Information about an OCR element, which could be a fragment or character.
One or more fragments joined together constitute a character. A fragment can
also get split into more than one character.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.SetFromccOCCharSegmentElementStats(ccOCCharSegmentElementStats!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ccAffineRectangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxSegmenterFragmentStatistics from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.#ctor(ccOCCharSegmentElementStats!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ccAffineRectangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxSegmenterFragmentStatistics based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterFragmentStatistics.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MaxDistanceToMainLine">
            <summary>
Returns maximum vertical distance of all fragments to main line 
as a percentage of line height.
</summary>
            <value>
The MaxDistanceToMainLine value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MaxY">
            <summary>
The maximim Y coordinate of the bottom of all fragments in
the normalized/binarized image
</summary>
            <value>
The MaxY value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MinY">
            <summary>
The minimum Y coordinate of the top of all fragments in
the normalized/binarized image
</summary>
            <value>
The MinY value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MaxContrast">
            <summary>
Returns maximum contrast for all fragments
</summary>
            <value>
The MaxContrast value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MinContrast">
            <summary>
Returns minimum contrast for all fragments
</summary>
            <value>
The MinContrast value. The default value is Double::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MaxNumPixels">
            <summary>
Returns maximum number of pixels for all fragments
</summary>
            <value>
The MaxNumPixels value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.MinNumPixels">
            <summary>
Returns minimum number of pixels for all fragments
</summary>
            <value>
The MinNumPixels value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterFragmentStatistics object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterFragmentStatistics to be copied. May not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is Nothing/null/nullptr.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterFragmentStatistics object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFragmentStatistics">
            <summary>
Statistical information about a set of OCRMax Segmenter fragments
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.SetFromccOCCharSegmentElementStats(ccOCCharSegmentElementStats!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxSegmenterCharacterStatistics from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.#ctor(ccOCCharSegmentElementStats!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxSegmenterCharacterStatistics based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterCharacterStatistics.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.SpaceMaxWidth">
            <summary>
Returns maximum width of all space characters (in pixels)
</summary>
            <value>
The SpaceMaxWidth value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.SpaceMinWidth">
            <summary>
Returns minimum width of all space characters (in pixels)
</summary>
            <value>
The SpaceMinWidth value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.MaxHeight">
            <summary>
Returns maximum height of all characters (in pixels)
</summary>
            <value>
The MaxHeight value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.MinHeight">
            <summary>
Returns minimum height of all characters (in pixels)
</summary>
            <value>
The MinHeight value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.MaxWidth">
            <summary>
Returns maximum width of all characters (in pixels)
</summary>
            <value>
The MaxWidth value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.MinWidth">
            <summary>
Returns minimum width of all characters (in pixels)
</summary>
            <value>
The MinWidth value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.MaxNumPixels">
            <summary>
Returns maximum number of pixels for all characters
</summary>
            <value>
The MaxNumPixels value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.MinNumPixels">
            <summary>
Returns minimum number of pixels for all characters
</summary>
            <value>
The MinNumPixels value. The default value is Int32::MaxValue.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterCharacterStatistics object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterCharacterStatistics to be copied. May not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is Nothing/null/nullptr.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterCharacterStatistics object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterStatistics">
            <summary>
Statistical information about a set of OCRMax Segmenter characters
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.SetFromccOCCharSegmentPositionResult(ccOCCharSegmentPositionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Populate the members of this CogOCRMaxSegmenterPositionResult from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.#ctor(ccOCCharSegmentPositionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Cognex.VisionPro.ICogImage)">
            <summary>
Construct a CogOCRMaxSegmenterPositionResult based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterPositionResult.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterPositionResult.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.GetString">
            <summary>
Returns a string which represents this CogOCRMaxSegmenterPositionResult.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.CellRect">
            <summary>
The cell rectangle of the segmented character. The cell rectangle is
specified in the selected space coordinates of the image used for
segmentation. The cell rectangle is a bounding box that encloses not
only all of the foreground (e.g. ink) pixels of a character image, but
also typically additional padding region.  Cell rectangles are typically
height of the full line of text containing the character. Ideally, all
of the cell rectangles in a line of text touch their adjacent neighbors.

</summary>
            <value>
The CellRect value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.MarkRect">
            <summary>
The mark rectangle of the segmented character. The mark rectangle is
specified in the selected space coordinates of input image used for
segmentation. The mark rectangle of a character is a tight bounding box
enclosing all of foreground (e.g. ink) pixels in the character image.
</summary>
            <value>
The MarkRect value. The default value is nullptr.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.SpaceScore">
            <summary>
The score of the segmented character, if the segmented character is a
space.  The score is in the range [0, 1]. See also
CogSpaceScoreModeConstants.
</summary>
            <value>
The SpaceScore value. The default value is 0.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.IsSpace">
            <summary>
True if the segmented character is a space.
</summary>
            <value>
The IsSpace value. The default value is false.
</value>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.Character">
            <summary>
The segmented character from the result. The result Key.CharacterCode
will be set to either Unknown (0XF800) or Space (0x20).
</summary>
            <value>
The Character value. The default value is nullptr.
</value>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterPositionResult object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterPositionResult to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterPositionResult object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterPositionResult">
            <summary>
A segmentation position result represents a single segmented character.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.MakeccOCCharSegmentSpaceParams">
            <summary>
Create a ccOCCharSegmentSpaceParams based on this object.
Todo pass in the address of a prealocated object
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SetFromccOCCharSegmentSpaceParams(ccOCCharSegmentSpaceParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxSegmenterSpaceParams from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.#ctor(ccOCCharSegmentSpaceParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxSegmenterSpaceParams based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSegmenterSpaceParams.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SpaceMaxWidth">
            <summary>
The maximum width of a space character, in pixels.
</summary>
            <value>
The SpaceMaxWidth value. The default value is 100.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSpaceMaxWidth</item>
                </list>
            </event>
            <remarks>
                <para>
Setting this property to a value less than SpaceMinWidth will cause
SpaceMinWidth to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SpaceMinWidth">
            <summary>
The minimum width of a space character, in pixels.
</summary>
            <value>
The SpaceMinWidth value. The default value is 10.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSpaceMinWidth</item>
                </list>
            </event>
            <remarks>
                <para>
Setting this property to a value greater than SpaceMaxWidth will cause
SpaceMaxWidth to be adjusted accordingly.
</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
Thrown if set to a value less than 0 or greater than
System::Int32::MaxValue
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SpaceScoreMode">
            <summary>
The score mode, which specifies how to handle scoring of space
characters.
</summary>
            <value>
The SpaceScoreMode value. The default value is CogOCRMaxSegmenterSpaceScoreModeConstants::Clutter.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSpaceScoreMode</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SpaceInsertMode">
            <summary>
The insert mode, which specifies how to handle insertion of space
characters into gaps between other characters.
</summary>
            <value>
The SpaceInsertMode value. The default value is CogOCRMaxSegmenterSpaceInsertModeConstants::None.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfSpaceInsertMode</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSegmenterSpaceParams object.
</summary>
            <param name="other">
The CogOCRMaxSegmenterSpaceParams to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.#ctor">
            <summary>
Construct a default CogOCRMaxSegmenterSpaceParams object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SfSpaceMaxWidth">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SpaceMaxWidth may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SfSpaceMinWidth">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SpaceMinWidth may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SfSpaceScoreMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SpaceScoreMode may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams.SfSpaceInsertMode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by SpaceInsertMode may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceParams">
            <summary>
Parameters to control how spaces between characters are handled by the
segmenter.
</summary>
            <remarks />
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.MakeccOCFont">
            <summary>
Create a ccOCFont based on this object.
Todo pass in the address of a prealocated object
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.SetFromccOCFont(ccOCFont!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxFont from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.#ctor(ccOCFont!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxFont based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.OnClearing">
            <summary>
Called whenever the Font is about to be cleared.
</summary>
            <remarks>
                <para>
Overriden to keep track of the CogOCRMaxChars in a CogOCRMaxFont via
StartTracking/StopTracking.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.OnRemovedItem(System.Int32,System.Object)">
            <summary>
Called whenever a CogOCRMaxChar is removed from the Font.
</summary>
            <param name="index">
The index where the CogOCRMaxChar was removed from.
</param>
            <param name="value">
The CogOCRMaxChar that was removed.
</param>
            <remarks>
                <para>
Overriden to keep track of the CogOCRMaxChars in a CogOCRMaxFont via
StartTracking/StopTracking.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.OnReplacingItem(System.Int32,System.Object,System.Object)">
            <summary>
Called whenever a CogOCRMaxChar is being replaced.
</summary>
            <param name="index">
The index where the CogOCRMaxChar is being repalced.
</param>
            <param name="oldValue">
The CogOCRMaxChar being replaced
</param>
            <param name="newValue">
The CogOCRMaxChar which is about to be added to the Font to replace the
oldValue.
</param>
            <remarks>
                <para>
Overriden to keep track of the CogOCRMaxChars in a CogOCRMaxFont via
StartTracking/StopTracking.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="oldValue" /> is null.
Thrown if <paramref name="newValue" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.OnInsertingItem(System.Int32,System.Object)">
            <summary>
Called whenver a CogOCRMaxChar is about to be insterted into the Font.
</summary>
            <param name="index">
The index where the new CogOCRMaxChar is to be inserted.
</param>
            <param name="value">
The new CogOCRMaxChar being inserted.
</param>
            <remarks>
                <para>
Overriden to keep track of the CogOCRMaxChars in a CogOCRMaxFont via
StartTracking/StopTracking.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="value" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxFont.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.OnDeserialization(System.Object)">
            <summary>
Called to force the Font to complete it's Deserialization process.
</summary>
            <param name="sender">
The sender.
</param>
            <remarks>
                <para>
This set's the Font property of the contained CogOCRMaxChars which lets the
CogOCRMaxChars they are a member of a Font. CogOCRMaxChars do not Serialzize
their Font property. Otherwise the entire Font would be serialized every
time user tried to serialize a single CogOCRMaxChar.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="sender" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.Import(System.String)">
            <summary>
Load a Cognex ".ocr" formatted font file from disk.
</summary>
            <param name="fileName">
The full path to the font file to load.
</param>
            <remarks>
                <para>
Note that the .ocr font format is compatible with Cognex's CVL product.
</para>
            </remarks>
            <exception cref="T:System.IO.FileLoadException">
Thrown if Failed to load.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="fileName" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="fileName" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.Export(System.String)">
            <summary>
Save this font into a Cognex ".ocr" formatted font file on disk.
</summary>
            <param name="fileName">
The full path of where to save the font.
</param>
            <remarks>
                <para>
Note that the .ocr font format is compatible with Cognex's CVL product.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="fileName" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="fileName" /> is the empty string.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFont.default(Cognex.VisionPro.OCRMax.CogOCRMaxCharKey)">
            <summary>
Gets the CogOCRMaxChar in the Font with for the specified key.
</summary>
            <exception cref="T:System.IndexOutOfRangeException">if the 
Font does not contain a Character for the given key.</exception>
            <remarks>This is an O(n) operation where n is the number of 
characters in the Font.</remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxFont.Name">
            <summary>
The name of the font.
</summary>
            <value>
The Name value. The default value is "".
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfName</item>
                </list>
            </event>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxFont)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxFont object.
</summary>
            <param name="other">
The CogOCRMaxFont to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.#ctor">
            <summary>
Construct a default CogOCRMaxFont object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.StopTracking(Cognex.VisionPro.OCRMax.CogOCRMaxChar)">
            <summary>
Called whenever a CogOCRMaxChar is removed from the CogOCRMaxFont.
</summary>
            <param name="character">
The CogOCRMaxChar being removed.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="character" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxFont.StartTracking(Cognex.VisionPro.OCRMax.CogOCRMaxChar)">
            <summary>
Called whenever a new CogOCRMaxChar is added to the CogOCRMaxFont.
</summary>
            <param name="character">
The CogOCRMaxChar being added to the CogOCRMaxFont.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="character" /> is null.
</exception>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFont.SfName">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Name may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFont">
            <summary>
A container of CogOCRMaxChars (character images and their associated character
codes) used to train the OCRMax classifier.
</summary>
            <remarks>
                <para>
Note that a CogOCRMaxFont should never contain 'space' characters. The OCRMax
Classifier does not classify space characters. Instead the classifier input
(cf. the segmenter output) is responsible for deciding if a particular
character is a space.  The classifier simply "passes through" space
characters and their associated scores.
</para>
                <para>
Note that a CogOCRMaxFont should never contain CogOCRMaxChars that have their
Key.CharacterCode set to the special "Unknown" character code (0xF800).
</para>
                <para>
Note that a CogOCRMaxChar reference can only be a member of a single
CogOCRMaxFont.
</para>
                <para>
Adding a CogOCRMaxChar to a CogOCRMaxFont will set the CogOCRMaxChar.Key to a value
that is unique amongst all the CogOCRMaxChars in the CogOCRMaxFont.
</para>
                <para>
The Font's indices are maintained the same way as in most standard .NET 
Collections. Meaning, the Add() method will append new CogOCRMaxChars to the
end of the Font (at the highest index) and the order is maintained. In
other words the, CogOCRMaxChars in the Font are not sorted by index in any way.
</para>
            </remarks>
            <example>
                <!-- CogOCRMaxExample1 -->
                <!-- Show's simple use of CogOCRMaxTool API
     The sample:
     1. Uses a CogOCRMaxTool to segment the
        CogOCRMaxChars from an image
     2. Labels the segmented characters with
        the correct character code and adds 
        them to a Tool's CogOCRMaxFont
     3. Trains the Tool's CogOCRMaxClassifier
        based on the Font.
     4. Runs the Tool again and prints out the
        read string 
-->
                <code lang="Visual Basic">
Imports System.Drawing
Imports Cognex.VisionPro
Imports Cognex.VisionPro.OCRMax

Module CogOCRMaxExample

  Sub Main()

    Dim OCRMaxTool As New CogOCRMaxTool()

    ' Load an image containing the text to read.
    Dim bmp As New Bitmap(System.Environment.GetEnvironmentVariable("VPRO_ROOT") &amp; "\images\alphanumbers.bmp")

    Dim image As New CogImage8Grey(bmp)

    ' Create a rectangle that surrounds the text 
    ' "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    Dim rect As New CogRectangleAffine()
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0)

    ' Set the image and search region of the tool.
    OCRMaxTool.InputImage = image
    OCRMaxTool.Region = rect

    ' Segment the characters in the image.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept OrElse OCRMaxTool.LineResult.Count &lt;&gt; 26 Then
      Console.WriteLine("Initial segmentation failed. " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    ' Get an array of Unicode UTF-32 character codes
    ' which represent a string of all the letters in the 
    ' english alphabet.
    Dim alphabetString As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    Dim alphabetCharCodes As Integer() = CogOCRMaxChar.GetCharCodesFromString(alphabetString)

    ' Label each segmented character with the correct
    ' character code and add it to the classifier's font.
    For i As Integer = 0 To OCRMaxTool.LineResult.Count - 1
      Dim c As CogOCRMaxChar = OCRMaxTool.LineResult(i).GetCharacter()
      c.CharacterCode = alphabetCharCodes(i)
      OCRMaxTool.Classifier.Font.Add(c)
    Next

    Try
      ' Train the classifier based on the font.
      OCRMaxTool.Classifier.Train()
    Catch ex As Exception
      Console.WriteLine("Failed to train classifier characters: " &amp; ex.Message)
    End Try

    ' Run the (now trained) tool again.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept Then
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    If OCRMaxTool.LineResult.Status &lt;&gt; CogOCRMaxLineResultStatusConstants.Read Then
      Console.WriteLine("OCRMax tool failed to read the line of text.")
      Return
    End If

    ' Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString)
  End Sub
End Module
  </code>
                <code lang="C#">
using System;
using System.Drawing;
using Cognex.VisionPro;
using Cognex.VisionPro.OCRMax;

class CogOCRMaxExample
{
  static void Main()
  {
    CogOCRMaxTool OCRMaxTool = new CogOCRMaxTool();

    // Load an image containing the text to read.
    Bitmap bmp = new Bitmap(
      System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
      @"\images\alphanumbers.bmp");

    CogImage8Grey image = new CogImage8Grey(bmp);

    // Create a rectangle that surrounds the text 
    // "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    CogRectangleAffine rect = new CogRectangleAffine();
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0);

    // Set the image and search region of the tool.
    OCRMaxTool.InputImage = image;
    OCRMaxTool.Region = rect;

    // Segment the characters in the image.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept ||
        OCRMaxTool.LineResult.Count != 26)
    {
      Console.WriteLine(
        "Initial segmentation failed. " + OCRMaxTool.RunStatus.Message);
      return;
    }

    // Get an array of Unicode UTF-32 character codes
    // which represent a string of all the letters in the 
    // english alphabet.
    string alphabetString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int[] alphabetCharCodes =
      CogOCRMaxChar.GetCharCodesFromString(alphabetString);

    // Label each segmented character with the correct
    // character code and add it to the classifier's font.
    for (int i = 0; i &lt; OCRMaxTool.LineResult.Count; i++)
    {
      CogOCRMaxChar c = OCRMaxTool.LineResult[i].GetCharacter();
      c.CharacterCode = alphabetCharCodes[i];
      OCRMaxTool.Classifier.Font.Add(c);
    }

    try
    {
      // Train the classifier based on the font.
      OCRMaxTool.Classifier.Train();
    }
    catch (Exception ex)
    {
      Console.WriteLine(
        "Failed to train classifier characters: " + ex.Message);
    }

    // Run the (now trained) tool again.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept)
    {
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message);
      return;
    }

    if (OCRMaxTool.LineResult.Status != CogOCRMaxLineResultStatusConstants.Read)
    {
      Console.WriteLine("OCRMax tool failed to read the line of text.");
      return;
    }

    // Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString);
  }
}
  </code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.MakeccOCSwapCharSet">
            <summary>
Create a ccOCSwapCharSet based on this object.
Todo pass in the address of a prealocated object
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.SetFromccOCSwapCharSet(ccOCSwapCharSet!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxSwapCharSet from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.#ctor(ccOCSwapCharSet!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxSwapCharSet based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSwapCharSet.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxSwapCharSet.
</summary>
            <param name="delimiter">
A string used to represent the demarcation between CogOCRMaxSwaps in the
CogOCRMaxSwapCharSet
</param>
            <remarks>
                <para>
This override will substitute a custom string for the delimiter.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="delimiter" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.GetString">
            <summary>
Returns a string which represents this CogOCRMaxSwapCharSet.
</summary>
            <remarks>
                <para>
This override will substitute a vertical pipe ("|") for the delimiter.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.Contains(System.Int32)">
            <summary>
Returns whether any swap character group in this set contains
characterCode.
</summary>
            <param name="characterCode">
The character code of interest.
</param>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.CanSwap(System.Int32,System.Int32)">
            <summary>
Returns whether characterCode1 and characterCode2 exist in the same swap
character group within this set.
</summary>
            <param name="characterCode1">
The first of two character codes that may or may not be swappable.
</param>
            <param name="characterCode2">
The second of two character codes that may or may not be swappable.
</param>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.GetSwapCharacter(System.Int32)">
            <summary>
Returns the swap character that contains characterCode.
</summary>
            <param name="characterCode">
The character code of interest, the method will check to see if any
CogOCRMaxSwapChars in this CogOCRMaxSwapCharSet contains this character code.
</param>
            <remarks>
                <para>
Returns a default empty CogOCRMaxSwapChar object if no group in this set
contains characterCode.
</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.Add(Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar)">
            <summary>
Adds a group of swap characters to this set.
</summary>
            <param name="swapCharacter">
The new CogOCRMaxSwapChar to add to the CogOCRMaxSwapChar set.
</param>
            <remarks>
                <para>
By transitivity, if any character in the group already exists in an
existing group in the set, the new group will be merged with that
existing group.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
Thrown if if swapCharacter.Degen() is true
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="swapCharacter" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.SetSwapCharacters(System.String,System.String)">
            <summary>
Set the swap characters in this set. Each swap character in this set
contains list of characters which are "swappable" (They appear similar
and are hard to distinguish, e.g. '0' (zero) and 'O' (capital oh)).
</summary>
            <param name="swapCharacters">
A string which represents individual CogOCRMaxSwapChars seperated by a
delimeter.
</param>
            <param name="delimiter">
A String which denotes the separation between swap characters. For
example, calling SetSwapCharacters("0D|EF", "|") would result in the set
containing two swap characters, "0D" and "EF".
</param>
            <remarks>
                <para>
The delimiter argument is a String which denotes separation between the
swap characters in this set. For example, calling
SetSwapCharacters("0D|EF", "|") would result in the set containing two
swap characters, "0D" and "EF".
</para>
                <para>
By transitivity, all groups that share a same member character with one
another will be merged into a single group.
</para>
                <para>
The setter will sort the character codes within each group in ascending
order.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
Thrown if if Degen() is true for any element of swapCharacters.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="swapCharacters" /> is null.
Thrown if <paramref name="delimiter" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.SetSwapCharacters(Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar[])">
            <summary>
Set the swap characters in this set. Each swap character in this set
contains a list of characters which are "swappable" (They appear similar
and are hard to distinguish, e.g. '0' (zero) and 'O' (capital oh)).
</summary>
            <param name="swapCharacters">
An array of CogSwapChars with which to populate the CogOCRMaxSwapCharSet.
</param>
            <remarks>
                <para>
By transitivity, all groups that share a same member character with one
another will be merged into a single group.
</para>
                <para>
Calling the setter with an empty array creates an empty set. An empty
set means that there are no swappable characters.
</para>
                <para>
The setter will sort the character codes within each group in ascending
order.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
Thrown if if Degen() is true for any element of swapCharacters.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="swapCharacters" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="swapCharacters" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.GetSwapCharacters">
            <summary>
Get a copy of all swap character groups in this set.
</summary>
            <remarks>
                <para>
By transitivity, all groups that share a same member character with one
another will be merged into a single group.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
Thrown if if Degen() is true for any element of swapCharacters.
</exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSwapCharSet object.
</summary>
            <param name="other">
The CogOCRMaxSwapCharSet to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.#ctor">
            <summary>
Construct a default CogOCRMaxSwapCharSet object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.SfGetString">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by GetString may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet.SfGetSwapCharacters">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by GetSwapCharacters may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSwapCharSet">
            <summary>
This class is a container that holds multiple CogOCRMaxSwapChars. Each
CogOCRMaxSwapChar holds a set of character codes that are "swappable" with each
other.
</summary>
            <remarks>
                <para>
SwapChars are used by the classifier and fielding. The classifier will
ignore swap chars when calculating its confidence score. Additionally the
AlternateCharacters in the OCRMax result will never contain a character that is
a SwapChar of the primary result.
</para>
                <para>
A user may configure the swap chars to prevent the classifier from being
confused by otherwise understandable string due to the similarity between
two or more characters which are known to have very similar appearances
(e.g. '0' (zero) and 'O' (captial oh)). By setting up swap chars the user
can determined that it does not matter if the tool reads a '0' (zero) or an
'O' (capital oh), because the correct string can be determined by the
surrounding context or by using prior knowledge of the text being read.
</para>
                <para>
To illustrate: The information contained in the string "0ctober 2Oth" is
still evident despite the fact that the CogOCRMaxTool read '0' (zero) and 'O'
(capital oh) in the incorrect positions.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.MakeccOCSwapChar">
            <summary>
Create a ccOCSwapChar based on this object.
Todo pass in the address of a prealocated object
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.SetFromccOCSwapChar(ccOCSwapChar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxSwapChar from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.#ctor(ccOCSwapChar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxSwapChar based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxSwapChar.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.GetString">
            <summary>
Get a string representation of the (UTF-32) character codes that are
defined as "swappable" (They appear similar and are hard to distinguish,
e.g. '0' (zero) and 'O' (capital oh)).
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.Contains(System.Int32)">
            <summary>
Returns true if characterCode is included in this swap character.
</summary>
            <param name="characterCode">
The character code of interest.
</param>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.Degen">
            <summary>
Returns true if this group of swap character is degenerate, i.e.,
containing less than two members.
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.SetCharacters(System.Int32[])">
            <summary>
Set the characters (UTF-32) that are defined as "swappable" (They appear
similar and are hard to distinguish, e.g. '0' (zero) and 'O' (capital
oh)).
</summary>
            <param name="characterCodes">
The character codes that should be considerd swappable.
</param>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
Thrown if:
<list type="bullet"><item>
if characterCodes contains any duplicate character codes.
</item><item>
if characterCodes.Count is less than 2
</item><item>
if any of the character codes are Cognex-reserved character codes
</item></list></exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="characterCodes" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.SetCharacters(System.String)">
            <summary>
Set the characters that are defined as "swappable" (They appear similar
and are hard to distinguish, e.g. '0' (zero) and 'O' (capital oh)).
</summary>
            <param name="characters">
The characters that should be considerd swappable.
</param>
            <remarks>
                <para>
The characters will be sorted by the character codes in ascending order.
</para>
            </remarks>
            <exception cref="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
Thrown if:
<list type="bullet"><item>
if characters contains any duplicate character codes.
</item><item>
if characters.Length is less than 2
</item><item>
if any of the character codes are Cognex-reserved characters
</item></list></exception>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="characters" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.GetCharacterCodes">
            <summary>
Get a copy of the (UTF-32) character codes that are defined as
"swappable" (They appear similar and are hard to distinguish, e.g. '0'
(zero) and 'O' (capital oh)).
</summary>
            <exception cref="T:System.ObjectDisposedException">
Thrown if the object is disposed.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxSwapChar object.
</summary>
            <param name="other">
The CogOCRMaxSwapChar to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.#ctor">
            <summary>
Construct a default CogOCRMaxSwapChar object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.SfGetString">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by GetString may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.SfDegen">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Degen may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar.SfGetCharacterCodes">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by GetCharacterCodes may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSwapChar">
            <summary>
This class defines a single group of swap characters. Characters within the
group are swappable with each other. (They appear similar and are hard to
distinguish, e.g. '0' (zero) and 'O' (capital oh)).
</summary>
            <remarks>
                <para>
SwapChars are used by the classifier. The classifier will ignore swap chars
when calculating its confidence score. Additionally the AlternateCharacters
in the OCRMax result will never contain a character that is a SwapChar of the
primary result.
</para>
                <para>
A user may configure the swap chars to prevent the classifier from failing
an otherwise understandable string due to confusion between two or more
characters which are known to have very similar appearances (e.g. '0' and
'O'). In this cases the user has determined that it does not matter if the
tool reads a '0' or an 'O', because the correct string can be determined by
the surrounding context or by using prior knowledge of the text being read.
</para>
                <para>
To illustrate: The information contained in the string "0ctober 2Oth" is
still evident despite the fact that the CogOCRMaxTool read '0' (zero) and 'O'
(capital oh) in the incorrect positions.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.MakeccOCChar">
            <summary>
Create a ccOCChar based on this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SetFromccOCChar(ccOCChar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxChar from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.#ctor(ccOCChar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxChar based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SetFont(Cognex.VisionPro.OCRMax.CogOCRMaxFont)">
            <summary>
Cognex Internal Use Only. Called by the Font which contains the
character to maintain a parent/child relation ship. This helps ensure
that a character instance can only be a member of a single CogOCRMaxFont at
a time.
</summary>
            <param name="font">
The Font in which the character is contained.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="font" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SetKey(Cognex.VisionPro.OCRMax.CogOCRMaxCharKey)">
            <summary>
Cognex Internal Use Only. Called by the Font that contains this
CogOCRMaxChar to set the Character's Key. The Font may set the Character's
Key to ensure that it is unique amongst all other characters in the
Font.
</summary>
            <param name="key">
The new Key value.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="key" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.MakeUniqueInstanceKey(Cognex.VisionPro.OCRMax.CogOCRMaxCharKey,Cognex.VisionPro.Implementation.CogSerializableCollectionBase`1{Cognex.VisionPro.OCRMax.CogOCRMaxChar})">
            <summary>
Cognex Internal Use Only. Returns a CogOCRMaxCharKey which has the same
CharacterCode as key, but, with a unique instance number amongst all the
CogOCRMaxChars in keys.
</summary>
            <param name="key">
The key which supplies the CharacterCode, FontID, and Varaint for the
new key
</param>
            <param name="keys">
A collection of CogOCRMaxChars, the returned CogOCRMaxCharKey is guranteed to
be different from all the Character Keys in this collection.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="key" /> is null.
Thrown if <paramref name="keys" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxChar.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxChar.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetString">
            <summary>
Returns a string which represents this CogOCRMaxChar.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetStringFromCharCode(System.Int32,System.String)">
            <summary>
Returns the String representation of the UTF 32-bit charCode.
</summary>
            <param name="charCode">
The UTF-32 character code to map to a String.
</param>
            <param name="unknownCharacterMarker">
A String to insert in place of any 'unknown' character code values
(0xF800) that occur in charCodes.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetStringFromCharCodes(System.Int32[],System.String)">
            <summary>
Returns the String representation of the UTF 32-bit character codes.
</summary>
            <param name="charCodes">
The UTF-32 character codes to map to a String.
</param>
            <param name="unknownCharacterMarker">
A String to insert in place of any 'unknown' character code values
(0xF800) that occur in charCodes.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if if unknownCharacterMarker is null or empty.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="charCodes" /> is null.
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetCharCodeFromString(System.String,System.String)">
            <summary>
Returns the UTF 32-bit charcode that represents the letter in the input
string.
</summary>
            <param name="input">
The string to convert to character codes.
</param>
            <param name="unknownCharacterMarker">
If the input string matches the unknownCharacterMarker the special
unknown char code value (0xF800) is returned.
</param>
            <exception cref="T:System.ArgumentException">
Thrown if the string maps to more than a single character code.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="input" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetCharCodeFromString(System.String)">
            <summary>
Returns the UTF 32-bit charcode that represents the letter in the input
string.
</summary>
            <param name="input">
The string to convert to character codes.
</param>
            <exception cref="T:System.ArgumentException">
Thrown if the string maps to more than a single character code.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="input" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetCharCodesFromString(System.String,System.String)">
            <summary>
Returns an array of UTF 32-bit character codes that represent the input
string.
</summary>
            <param name="input">
The string to convert to character codes.
</param>
            <param name="unknownCharacterMarker">
May be null or empty if the string does not contain any Unknown
Character Markers.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="input" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.GetCharCodesFromString(System.String)">
            <summary>
Returns an array of UTF 32-bit character codes that represent the input
string.
</summary>
            <param name="input">
The string to convert to character codes.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="input" /> is null.
</exception>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Metrics">
            <summary>
The metrics for this character.
</summary>
            <value>
The Metrics value. The default value is a default constructed CogOCRMaxCharMetrics instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" />
            <remarks>
                <para>
A CogOCRMaxChar's Metrics contain two regions (the mark rectangle and the
cell rectangle) which define where in the image the character is
located. 
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.BinarizedImage">
            <summary>
The Binarized image for this character.
</summary>
            <value>
The BinarizedImage value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" />
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Invert">
            <summary>
The invert value used to binarize the normalized image.
</summary>
            <value>
The Invert value. The default value is false.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" />
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Threshold">
            <summary>
The threshold value used to binarize the normalized image.
</summary>
            <value>
The Threshold value. The default value is -1.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" />
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.NormalizedImage">
            <summary>
The Normalized image for this character.
</summary>
            <value>
The NormalizedImage value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" />
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Image">
            <summary>
A Rectified Image of the character. A Rectified Image is an image of the
character where the character is neither rotated nor skewed
</summary>
            <value>
The Image value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" />
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Font">
            <summary>
A reference to the CogOCRMaxFont of which this character is a member.
</summary>
            <value>
The Font value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfFont</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Polarity">
            <summary>
The Polarity of the character.
</summary>
            <value>
The Polarity value. The default value is CogOCRMaxPolarityConstants::Unknown.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfPolarity</item>
                </list>
            </event>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.Key">
            <summary>
The key for this character. The key contains information that uniquely
identifies this character from other characters when it the CogOCRMaxChar
is a member of a CogOCRMaxFont
</summary>
            <value>
The Key value. The default value is a default constructed CogOCRMaxCharKey instance.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfKey</item>
                </list>
            </event>
            <remarks>
                <para>
The key's character code may be set to CogOCRMaxCharCodeConstants.Unknown
(0xF800) to signify that this character has not/could not been properly
classified.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxChar.CharacterCode">
            <summary>
The character code, which is a Unicode UTF-32 code point.  This can be
set to any Int32 value even though not all Int32 values are valid UTF-32
code points.
</summary>
            <value>
The CharacterCode value. The default value is (int)CogOCRMaxCharCodeConstants::Unknown.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCharacterCode</item>
                    <item>SfGetString</item>
                    <item>SfKey</item>
                </list>
            </event>
            <remarks>
                <para>
The key's character code may be set to CogOCRMaxCharCodeConstants.Unknown
(0xF800) to signify that this character has not/could not been properly
classified.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxChar)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxChar object.
</summary>
            <param name="other">
The CogOCRMaxChar to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxChar.#ctor">
            <summary>
Construct a default CogOCRMaxChar object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SfGetString">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by GetString may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SfFont">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Font may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SfPolarity">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Polarity may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SfKey">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by Key may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxChar.SfCharacterCode">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CharacterCode may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxChar">
            <summary>
This class contains data associated with characters in OCRMax. This includes
the character's character code, the character's image, rectangles that
describe where the character appears in the image, and other data.
</summary>
            <remarks>
                <para>
The CogOCRMaxChar object contains an Image of the character as well as the
character's Key and Metrics. The character code is a UTF-32 code point which
determines which 'letter' the CogOCRMaxChar corresponds to. The Metrics contain
two regions (the mark rectangle and the cell rectangle) which define where
in the image the character is located. The CogOCRMaxChar class contains
additional information as well, but the primary information about a
character is contained within the rectified image, its mark rectangle, its
cell rectangle, and the 32-bit character code.
</para>
                <para>
Users are not typically expected to create instances of CogOCRMaxChar directly.
Instances of CogOCRMaxChar are usually created by calling the GetCharacter()
method of a CogOCRMaxPositionResult.
</para>
                <para>
The CogOCRMaxChar.CharacterCode may be set to a special unknown character code
(0xF800) to indicate that the character code is 'Unknown'.
</para>
                <para>
The CogOCRMaxChar class also appears as the output of CogOCRMaxSegmenter, the
input to CogOCRMaxClassifier, and the members of a CogOCRMaxFont.
</para>
                <para>
Adding a CogOCRMaxChar to a CogOCRMaxFont will cause the CogOCRMaxChar's Key to be
automatically replaced by a new CogOCRMaxCharKey to ensure that the Key's
Instance number is unique.
</para>
            </remarks>
            <example>
                <!-- CogOCRMaxExample1 -->
                <!-- Show's simple use of CogOCRMaxTool API
     The sample:
     1. Uses a CogOCRMaxTool to segment the
        CogOCRMaxChars from an image
     2. Labels the segmented characters with
        the correct character code and adds 
        them to a Tool's CogOCRMaxFont
     3. Trains the Tool's CogOCRMaxClassifier
        based on the Font.
     4. Runs the Tool again and prints out the
        read string 
-->
                <code lang="Visual Basic">
Imports System.Drawing
Imports Cognex.VisionPro
Imports Cognex.VisionPro.OCRMax

Module CogOCRMaxExample

  Sub Main()

    Dim OCRMaxTool As New CogOCRMaxTool()

    ' Load an image containing the text to read.
    Dim bmp As New Bitmap(System.Environment.GetEnvironmentVariable("VPRO_ROOT") &amp; "\images\alphanumbers.bmp")

    Dim image As New CogImage8Grey(bmp)

    ' Create a rectangle that surrounds the text 
    ' "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    Dim rect As New CogRectangleAffine()
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0)

    ' Set the image and search region of the tool.
    OCRMaxTool.InputImage = image
    OCRMaxTool.Region = rect

    ' Segment the characters in the image.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept OrElse OCRMaxTool.LineResult.Count &lt;&gt; 26 Then
      Console.WriteLine("Initial segmentation failed. " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    ' Get an array of Unicode UTF-32 character codes
    ' which represent a string of all the letters in the 
    ' english alphabet.
    Dim alphabetString As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    Dim alphabetCharCodes As Integer() = CogOCRMaxChar.GetCharCodesFromString(alphabetString)

    ' Label each segmented character with the correct
    ' character code and add it to the classifier's font.
    For i As Integer = 0 To OCRMaxTool.LineResult.Count - 1
      Dim c As CogOCRMaxChar = OCRMaxTool.LineResult(i).GetCharacter()
      c.CharacterCode = alphabetCharCodes(i)
      OCRMaxTool.Classifier.Font.Add(c)
    Next

    Try
      ' Train the classifier based on the font.
      OCRMaxTool.Classifier.Train()
    Catch ex As Exception
      Console.WriteLine("Failed to train classifier characters: " &amp; ex.Message)
    End Try

    ' Run the (now trained) tool again.
    OCRMaxTool.Run()

    If OCRMaxTool.RunStatus.Result &lt;&gt; CogToolResultConstants.Accept Then
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message)
      Return
    End If

    If OCRMaxTool.LineResult.Status &lt;&gt; CogOCRMaxLineResultStatusConstants.Read Then
      Console.WriteLine("OCRMax tool failed to read the line of text.")
      Return
    End If

    ' Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString)
  End Sub
End Module
  </code>
                <code lang="C#">
using System;
using System.Drawing;
using Cognex.VisionPro;
using Cognex.VisionPro.OCRMax;

class CogOCRMaxExample
{
  static void Main()
  {
    CogOCRMaxTool OCRMaxTool = new CogOCRMaxTool();

    // Load an image containing the text to read.
    Bitmap bmp = new Bitmap(
      System.Environment.GetEnvironmentVariable("VPRO_ROOT") +
      @"\images\alphanumbers.bmp");

    CogImage8Grey image = new CogImage8Grey(bmp);

    // Create a rectangle that surrounds the text 
    // "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in the image.
    CogRectangleAffine rect = new CogRectangleAffine();
    rect.SetOriginLengthsRotationSkew(340, 748, 1010, 93, 0, 0);

    // Set the image and search region of the tool.
    OCRMaxTool.InputImage = image;
    OCRMaxTool.Region = rect;

    // Segment the characters in the image.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept ||
        OCRMaxTool.LineResult.Count != 26)
    {
      Console.WriteLine(
        "Initial segmentation failed. " + OCRMaxTool.RunStatus.Message);
      return;
    }

    // Get an array of Unicode UTF-32 character codes
    // which represent a string of all the letters in the 
    // english alphabet.
    string alphabetString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int[] alphabetCharCodes =
      CogOCRMaxChar.GetCharCodesFromString(alphabetString);

    // Label each segmented character with the correct
    // character code and add it to the classifier's font.
    for (int i = 0; i &lt; OCRMaxTool.LineResult.Count; i++)
    {
      CogOCRMaxChar c = OCRMaxTool.LineResult[i].GetCharacter();
      c.CharacterCode = alphabetCharCodes[i];
      OCRMaxTool.Classifier.Font.Add(c);
    }

    try
    {
      // Train the classifier based on the font.
      OCRMaxTool.Classifier.Train();
    }
    catch (Exception ex)
    {
      Console.WriteLine(
        "Failed to train classifier characters: " + ex.Message);
    }

    // Run the (now trained) tool again.
    OCRMaxTool.Run();

    if (OCRMaxTool.RunStatus.Result != CogToolResultConstants.Accept)
    {
      Console.WriteLine("OCRMax tool failed: " + OCRMaxTool.RunStatus.Message);
      return;
    }

    if (OCRMaxTool.LineResult.Status != CogOCRMaxLineResultStatusConstants.Read)
    {
      Console.WriteLine("OCRMax tool failed to read the line of text.");
      return;
    }

    // Print out the read string.
    Console.WriteLine("OCRMax Tool read the string: " + OCRMaxTool.LineResult.ResultString);
  }
}
  </code>
            </example>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.MakeccOCCharMetrics">
            <summary>
Create a ccOCCharMetrics based on this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.SetFromccOCCharMetrics(ccOCCharMetrics!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxCharMetrics from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.#ctor(ccOCCharMetrics!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxCharMetrics based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxCharMetrics.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.MarkRect">
            <summary>
The mark rectangle.
</summary>
            <value>
The MarkRect value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfMarkRect</item>
                </list>
            </event>
            <remarks>
                <para>
 The mark rectangle of a character is a tight bounding box enclosing all
of foreground (e.g. ink) pixels in the character image.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.CellRect">
            <summary>
The cell rectangle.
</summary>
            <value>
The CellRect value. The default value is nullptr.
</value>
            <event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed">
                <para>Fires when this property changes.</para>
                <para>The following state flag may be affected:</para>
                <list type="bullet">
                    <item>SfCellRect</item>
                </list>
            </event>
            <remarks>
                <para>
 The cell rectangle is a bounding box that encloses not only all of the
foreground (e.g. ink) pixels of a character image, but also typically
additional padding region.  Cell rectangles are typically height of the
full line of text containing the character. Ideally, all of the cell
rectangles in a line of text touch their adjacent neighbors. 
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxCharMetrics object.
</summary>
            <param name="other">
The CogOCRMaxCharMetrics to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.#ctor">
            <summary>
Construct a default CogOCRMaxCharMetrics object.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.SfMarkRect">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by MarkRect may have changed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics.SfCellRect">
            <summary>
This bit will be set in the EventArgs of a Changed event every time the
value returned by CellRect may have changed.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxCharMetrics">
            <summary>
This class contains metadata associated with characters for OCRMax.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKeyCollection.GetString(System.String)">
            <summary>
Returns a string which represents this collection.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKeyCollection.GetString">
            <summary>
Returns a string which represents this collection.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKeyCollection.#ctor(System.String,System.String)">
            <summary>
Construct a new CogOCRMaxCharKeyCollection from the given text.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxCharKeyCollection">
            <summary>
A collection of CogOCRMaxCharKey objects.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.MakeccOCCharKey">
            <summary>
Create a ccOCCharKey based on this object.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.SetFromccOCCharKey(ccOCCharKey!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Populate the members of this CogOCRMaxCharKey from its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.#ctor(ccOCCharKey!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Construct a CogOCRMaxCharKey based on its cvl equivilent.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
Serialization constructor for CogOCRMaxCharKey.
</summary>
            <param name="info">
The standard SerializationInfo argument.
</param>
            <param name="ctxt">
The standard StreamingContext argument.
</param>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.ToString">
            <summary>
Returns string data about this CogOCRMaxCharKey.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.EqualTo(Cognex.VisionPro.OCRMax.CogOCRMaxCharKey)">
            <summary>
Returns true if other has the same character code,
instance number, font ID, and variant.
</summary>
            <param name="other">
The CogOCRMaxCharKey to test for equality.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.GetString(System.String)">
            <summary>
Returns a string which represents this CogOCRMaxCharKey.
</summary>
            <param name="unknownCharacterMarker">
A string which is used to represent the special unknown character code.
</param>
            <remarks>
                <para>
This override will substitute a custom string for the special unknown
character code.
</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.GetString">
            <summary>
Returns a string which represents this CogOCRMaxCharKey.
</summary>
            <remarks>
                <para>
This override will substitute a question mark ("?") for the Unknown
character code.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.FontID">
            <summary>
This is the ID of the font (i.e. set of characters) of which character
is a member.  One potential use for this value would be to have each
font use a distinct value for the characters in that font, so that an
application could refer to a set of character keys from all the fonts
and still be able to distinguish which character came from which font.
</summary>
            <value>
The FontID value. The default value is -1.
</value>
            <remarks>
                <para>
FontID is provided for user convenience, and its interpretation is
application-specific. OCRMax functions will preserve this value but will
otherwise make no use of it.
</para>
                <para>
For applications that choose to use font IDs to keep track of different
fonts, the Instance values should typically be required to be distinct
only within a single font and not across all fonts.
</para>
                <para>
The value can be -1 to indicate that the instance is not specified.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.Variant">
            <summary>
The variant number, which can be used to indicate a distinct appearance
of a character code.  For example, a particular font might contain two
visually distinct appearances for the digit zero "0", one of which might
simply be an ellipse and another that is an ellipse with a diagonal
stroke through it.
</summary>
            <value>
The Variant value. The default value is -1.
</value>
            <remarks>
                <para>
Note that Instance is independent of Variant, e.g. in a given set of
characters one would typically have no duplicate Instance values
regardless of whether the characters had different Variant values.
</para>
                <para>
Variant is provided for user convenience, and its interpretation is
application-specific. OCRMax functions will preserve this value but will
otherwise make no use of it.
</para>
                <para>
The concept of variant is related to the concept of "variant selectors"
in the Unicode Standard, but the value of the Variant need not be a
Unicode variant selector value.
</para>
                <para>
The value can be -1 to indicate that the instance is not specified.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.Instance">
            <summary>
The instance number, which can be used to uniquely identify a particular
instance of a character with a given character code within a particular
font.
</summary>
            <value>
The Instance value. The default value is -1.
</value>
            <remarks>
                <para>
For example, a set of characters (including an image for each character)
might have two different instances of a character code (e.g. the letter
"A") to represent two different appearances that both corresponded to
that character code. If that font also had a single instance of the
letter "B", then the character codes and instances might reasonably be
the following: 
</para>
                <para>
(CharacterCode="A", Instance=0)
</para>
                <para>
(CharacterCode="A", Instance=1)
</para>
                <para>
(CharacterCode="B", Instance=0)
</para>
                <para>
The value can be -1 to indicate that the instance is not specified.
</para>
            </remarks>
        </member>
        <member name="P:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.CharacterCode">
            <summary>
The character code, which is a Unicode UTF-32 code point.
</summary>
            <value>
The CharacterCode value. The default value is (int)CogOCRMaxCharCodeConstants::Unknown.
</value>
            <remarks>
                <para>
The key's character code may be set to CogOCRMaxCharCodeConstants.Unknown
(0xF800) to signify that this character has not/could not been properly
classified.
</para>
            </remarks>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.#ctor(Cognex.VisionPro.OCRMax.CogOCRMaxCharKey)">
            <summary>
Constructs a deep copy of the supplied CogOCRMaxCharKey object.
</summary>
            <param name="other">
The CogOCRMaxCharKey to be copied. May not be null.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="other" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Construct a new CogOCRMaxCharKey and intialize its properties using the
arguments provided.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey.#ctor">
            <summary>
Construct a default CogOCRMaxCharKey object.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxCharKey">
            <summary>
The CogOCRMaxChar class holds an object of type CogOCRMaxCharKey in its Key
property. The Key contains information that identifies the CogOCRMaxChar. Most
importantly the Key property holds the CharacterCode. The CharacterCode is a
Unicode UTF-32 value which determines the 'letter' a CogOCRMaxChar corresponds
to.
</summary>
            <remarks>
                <para>
Adding a CogOCRMaxChar to a CogOCRMaxFont will cause the CogOCRMaxChar.Key to be
automatically replaced by a new CogOCRMaxCharKey to ensure that the Key's
Instance number is unique.
</para>
            </remarks>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxUndocumentedCvlException">
            <summary>
Thrown by OCRMax if the tool returns an unknown CVL exception.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneParamsException">
            <summary>
Raised if the OCRMax tune parameters are not configured correctly.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxInvalidTuneRecordException">
            <summary>
Raised if an OCRMax tune record is not configured correctly.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxSwapCharParamsException">
            <summary>
Raised if the SwapChar params are not configured properly.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNoSavedDataException">
            <summary>
Thrown by the CogOCRMaxClassifier if the Retrain() is called and the classifier is has no saved training data.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierCannotTrainException">
            <summary>
Thrown by the CogOCRMaxClassifier if SaveTrainCharacters == false for algorithms that must train on all training characters at once.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierCannotTrainSpaceException">
            <summary>
Thrown by the CogOCRMaxClassifier if one of the character is a the space character.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotTrainedException">
            <summary>
Thrown by the CogOCRMaxClassifier if the Retrain() is called and the classifier is not trained.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierNotStartTrainedException">
            <summary>
Thrown if the Classifier has not had start train called on it.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxFontIllegalCharacterException">
            <summary>
Thrown by the CogOCRMaxFont if a user attempts to add an illegal character.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxFieldingParamsException">
            <summary>
Thrown by the CogOCRMaxCFielding if the fielding is configured with illegal parameters.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxClassifierParamsException">
            <summary>
Thrown by the CogOCRMaxClassifier if the classifier is configured with illegal parameters.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.Exceptions.CogOCRMaxSegmenterParamsException">
            <summary>
Thrown by CogOCRMaxSegmenter.Execute if the segmenter is configured with illegal parameters.
</summary>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.cfGetStringFromCharCode(System.Int32,System.String)">
            <summary>
Returns the String representation of the UTF 32-bit charCode.
</summary>
            <param name="charCode">
The UTF-32 character code to map to a String.
</param>
            <param name="unknownCharacterMarker">
A String to insert in place of any 'unknown' character code values
(0xF800) that occur in charCodes.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if if unknownCharacterMarker is null or empty.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.cfGetStringFromCharCodes(System.Int32[],System.String)">
            <summary>
Returns the String representation of the UTF 32-bit character codes.
</summary>
            <param name="charCodes">
The UTF-32 character codes to map to a String.
</param>
            <param name="unknownCharacterMarker">
A String to insert in place of any 'unknown' character code values
(0xF800) that occur in charCodes.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if if unknownCharacterMarker is null or empty.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="charCodes" /> is null.
Thrown if <paramref name="unknownCharacterMarker" /> is null.
</exception>
            <exception cref="T:System.ArgumentException">
Thrown if <paramref name="unknownCharacterMarker" /> is the empty string.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.cfGetCharCodeFromString(System.String,System.String)">
            <summary>
Returns the UTF 32-bit charcode that represents the letter in the input
string.
</summary>
            <param name="input">
The string to convert to character codes.
</param>
            <param name="unknownCharacterMarker">
If the input string matches the unknownCharacterMarker the special
unknown char code value (0xF800) is returned.
</param>
            <exception cref="T:System.ArgumentException">
Thrown if the string maps to more than a single character code.
</exception>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="input" /> is null.
</exception>
        </member>
        <member name="M:Cognex.VisionPro.OCRMax.Implementation.Internal.cfGetCharCodesFromString(System.String,System.String)">
            <summary>
Returns an array of UTF 32-bit character codes that represent the input
string.
</summary>
            <param name="input">
The string to convert to character codes.
</param>
            <param name="unknownCharacterMarker">
May be null or empty if the string does not contain any Unknown
Character Markers.
</param>
            <exception cref="T:System.ArgumentNullException">
Thrown if <paramref name="input" /> is null.
</exception>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordOrigin">
            <summary>
Identifies tune record for use with OCRMax tuning
was created.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordOrigin.TuneData">
            <Summary>
The tune record was retrieved from
tuned data collection of the CogOCRMaxTuneData
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordOrigin.AutoCorrect">
            <Summary>
The tune record was created by the AutoCorrect
feature of of the CogOCRMaxTuneData
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordOrigin.Tool">
            <Summary>
The tune record was created from the output of the
OCRMax tool
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTuneRecordOrigin.User">
            <Summary>
The tune record was created by the user
</Summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants">
            <summary>
Controls which CogOCRMaxSegmeter properties will be
tunned.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.All">
            <Summary>
Enable tuning of all parameters
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterFragmentMainLineMinYOverlapFrac">
            <Summary>
Enable tuning of CharacterFragmentMainLineMinYOverlapFrac 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.SpaceMaxWidth">
            <Summary>
Enable tuning of SpaceMaxWidth 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.SpaceMinWidth">
            <Summary>
Enable tuning of SpaceMinWidth 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.SpaceInsertMode">
            <Summary>
Enable tuning of SpaceInsertMode 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.AnalysisMode">
            <Summary>
Enable tuning of AnalysisMode 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.MinPitch">
            <Summary>
Enable tuning of MinPitch 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.WidthType">
            <Summary>
Enable tuning of WidthType 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.PitchType">
            <Summary>
Enable tuning of PitchType 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.PitchMetric">
            <Summary>
Enable tuning of PitchMetric 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterMinAspect">
            <Summary>
Enable tuning of CharacterMinAspect 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterMaxWidth">
            <Summary>
Enable tuning of CharacterMaxWidth 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterMaxHeight">
            <Summary>
Enable tuning of CharacterMaxHeight 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.MinIntercharacterGap">
            <Summary>
Enable tuning of MinIntercharacterGap 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.MaxIntracharacterGap">
            <Summary>
Enable tuning of MaxIntracharacterGap 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterFragmentMergeMode">
            <Summary>
Enable tuning of CharacterFragmentMergeMode 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterFragmentMaxDistanceToMainLine">
            <Summary>
Enable tuning of CharacterFragmentMaxDistanceToMainLine 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterMinHeight">
            <Summary>
Enable tuning of CharacterMinHeight 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterMinWidth">
            <Summary>
Enable tuning of CharacterMinWidth 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterMinNumPels">
            <Summary>
Enable tuning of CharacterMinNumPels 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterFragmentContrastThreshold">
            <Summary>
Enable tuning of CharacterFragmentContrastThreshold 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterFragmentMinXOverlap">
            <Summary>
Enable tuning of CharacterFragmentMinXOverlap 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.CharacterFragmentMinNumPels">
            <Summary>
Enable tuning of CharacterFragmentMinNumPels 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.IgnoreBorderFragments">
            <Summary>
Enable tuning of IgnoreBorderFragments 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.ForegroundThresholdFrac">
            <Summary>
Enable tuning of ForegroundThresholdFrac 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.UseStrokeWidthFilter">
            <Summary>
Enable tuning of UseStrokeWidthFilter 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.NormalizationMode">
            <Summary>
Enable tuning of NormalizationMode 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.SkewHalfRange">
            <Summary>
Enable tuning of SkewHalfRange 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.AngleHalfRange">
            <Summary>
Enable tuning of AngleHalfRange 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.Polarity">
            <Summary>
Enable tuning of Polarity 
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxTunablePropertiesConstants.None">
            <Summary>
Enable tuning of None 
</Summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants">
            <summary>
Provides diagnostic information about segmenter characters and fragments in
order to show how the segmenter arrived its results.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants.RejectCharacterTooShort">
            <summary>
Character rejected because it was not tall enough
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants.RejectCharacterTooNarrow">
            <summary>
Character rejected because it was not wide enough
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants.RejectCharacterTooFewPixels">
            <summary>
Character rejected because it did not have enough pixels
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants.RejectFragmentOutsideLineBounds">
            <summary>
Fragment rejected because it was outside main line by greater than
CharacterFramgentMaxDistanceToMainLine _AND_ overlaped the main line
by less than CharacterFragmentMainLineMinYOverlapFrac.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants.RejectFragmentBorderFragment">
            <summary>
Fragment rejected because it was touching the search region
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterElementActionConstants.None">
            <summary>
This element was not acted on
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants">
            <summary>
Conveys information about the state of an OCRMax Tool's Line Result. Returns
the most severe status found in the line result's position results.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants.Failed">
            <summary>
The line contains a position result with a status of Failed, and the
the line contains no position results with a status of Mismatch.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants.Mismatch">
            <summary>
The line contains a position result with a status of Mismatch.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants.Confused">
            <summary>
The line contains a position result with a status of Confused, and the
line contains no position results with a status Mismatch of Failed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants.Read">
            <summary>
All of the position results in the line result have a position status of
read.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants.NotRead">
            <summary>
The line result contains a position result with a status of NotRead.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLineResultStatusConstants.NoText">
            <summary>
The OCRMax Tool's segmentation phase didn't find any character candidates
in the input image.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants">
            <summary>
Conveys information about the state of an Position Result
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants.Failed">
            <summary>
No characters scored high enough (above the accept threshold)
to be considered a good read.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants.Mismatch">
            <summary>
The tool found a character that does not match the fielding which scored
much higher than any characters that do match the fielding.  It is likely 
that a character that does _not_ match the fielding was printed at this 
position.
<para>
Mismatch = ScoreNotMatching - ScoreMatching &gt; ConfidenceThreshold
</para><para>
Mismatch status is only returned if the Fielding's ConfusionMetric
property is set to AllCharactersInFont.
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants.Confused">
            <summary>
The Tool identified a character that scored high enough to be a good read 
(above the accept threshold), however, a different character scored close
enough to the same score (within the confusion threshold) such that the 
tool isn't confident that it picked the correct character.
<para>
Confused = | ScorePrimary - ScoreSecondary | &lt; ConfidenceThreshold
</para><para>
ScorePrimary &lt; ScoreSecondary can only be true when Fielding's 
ConfusionMetric property is set to AllCharactersInFont.
</para><para>
Confused status may also be returned if an "internal validation check"
performed by the Tool has failed.  In this case the result's 
ConfusionExplanation property will be set to ClassificationValidationFailure 
to notify you that this has occurred
</para><para>
The internal validation step can be disabled by setting the 
Tool.Classifier.TrainParams.Algorithm property to Basic.
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants.Read">
            <summary>
The OCRMax Tool successfully read the character at this position.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPositionResultStatusConstants.NotRead">
            <summary>
The Tool identified the position of a character in the image; however,
the character at this position could not be "read" by the Classifier.
This is usually because the Classifier has not been properly trained 
from a Font yet.   
<para>
NotRead position results have their character codes set to Unknown
or Space as dictated by the Segmenter.
</para><para>
NotRead is an important state when training the OCRMax Classifier as NotRead
position results can be manually labeled with the correct character code 
and used to build up the Font.
</para></summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordConstants">
            <summary>
Enumeration of non-diagnostic data that can be provided in the Tool's
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordConstants.Result">
            <summary>
Include the result graphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxCurrentRecordConstants">
            <summary>
Enumeration of data that can be provided in the Tool's CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCurrentRecordConstants.All">
            <summary>
Include all possible records in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCurrentRecordConstants.Region">
            <summary>
Include the (interactive) region to be processed at run time in the
CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCurrentRecordConstants.InputImage">
            <summary>
Include the input image in the CurrentRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCurrentRecordConstants.None">
            <summary>
Do not include any records in the CurrentRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxResultGraphicConstants">
            <summary>
Enumeration of data used for creating result graphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxResultGraphicConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxResultGraphicConstants.TipText">
            <summary>
Turn on tip text for result graphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxResultGraphicConstants.CogOCRMaxResultGraphic">
            <summary>
Include the result graphics.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxResultGraphicConstants.None">
            <summary>
Create no result graphics.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants">
            <summary>
Enumeration of diagnostic data that can be provided in the Tool's
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.All">
            <summary>
Include all possible records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.FinalCharacters">
            <summary>
Include rectangle graphic records for the final accepted charaters
found by the segmenter.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.RejectedCharacters">
            <summary>
Include rectangle graphic records for characters that were rejected by
the segmenter. Rejected characters do not fit one or more
of the parameters configured in the segmenter. Characters
might be rejected if they are too narrow, too short, too wide,
or if they contain too few pixels.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.InitialCharacters">
            <summary>
Include rectangles graphic records for the initial set of characters
created by grouping the final fragments into characters.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.FinalFragments">
            <summary>
Include rectangle graphic records for characters fragments that were accepted by
the segmenter and later grouped into characters.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.RejectedFragments">
            <summary>
Include rectangle graphic records for character fragments that were rejected by
the segmenter. Rejected character fragments do not fit one or more
of the parameters configured in the segmenter. Character fragments
might be rejected if their contrast is too low, they are on the border
of the search region, they are outside the bounds of the main line expanded rectangle,
or if they contain too few pixels.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.InitialFragments">
            <summary>
Include rectangle graphic records for the initial set of character
fragments found by the segmenter.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.MainLineExpanded">
            <summary>
Include a copy of the MainLineExpanded rectangle in the
tool records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.MainLine">
            <summary>
Include a copy of the MainLine rectangle in the 
tool records.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.NormalizedRectifiedBinarizedLineImage">
            <summary>
Include a copy of the Normalized Rectified Binarized Line Image in
LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.NormalizedRectifiedLineImage">
            <summary>
Include a copy of the Normalized Rectified Line Image in LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.RectifiedLineImage">
            <summary>
Include a copy of the Rectified Line Image in LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.Region">
            <summary>
Include a copy of the region in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.InputImageDeepCopy">
            <summary>
Include a deep copy of the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.InputImageByReference">
            <summary>
Include a reference to the input image in the LastRunRecord.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxLastRunRecordDiagConstants.None">
            <summary>
Do not include any of the non-diagnostic data in the LastRunRecord.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierImagePreprocessingConstants">
            <summary>
What image preprocessing to perform before classification. Note that if both
are enabled, histogram normalization happens after median subtraction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierImagePreprocessingConstants.SubtractMedian">
            <summary>
Subtract the median of a local neighborhood
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierImagePreprocessingConstants.NormalizeHistogram">
            <summary>
Normalize input image's histogram
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierImagePreprocessingConstants.None">
            <summary>
Do not perform any image preprocessing.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAspectModeConstants">
            <summary>
The Aspect Mode to use for classification
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAspectModeConstants.Disambiguate">
            <Summary>
The classifier uses aspect ration to decide between characters
that are still confused after initially ignoring aspect.
<remarks>
Disambiguate is only available when Algorithm is 
BasicFast.
</remarks></Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAspectModeConstants.Maintain">
            <Summary>
The classifier uses aspect ratio to help score all characters
</Summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAspectModeConstants.Ignore">
            <Summary>
The classifier ignores the aspect ratio of the character
</Summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAlgorithmConstants">
            <summary>
The algorithm to use for classification
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAlgorithmConstants.BasicFast">
            <summary>
BasicFast is a newer more streamlined version of the Basic algorithm.
BasicFast is suggested for most applications.
BasicFast is typically much faster than Basic, with similar robustness.
The older Basic algorithm is maintained for compatibility with older
applications.
Note that BasicFast does not support Validation (Validation is the
additional confusion check that can be enabled with the Basic algorithm).
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAlgorithmConstants.BasicWithValidation">
            <summary>
                <para>
The basic classification algorithm with the classification validation
step.
</para>
                <para>
The classification validation step performs some extra calculations to 
"double check" that the highest scoring candidate is really the correct
character. If this validation fails, the character position result 
is marked Confused, the confidence score is set to 0, and the
ConfusionExplanation is set to ClassificationValidationFailure.
The result of the validation step does not affect the result score.
</para>
                <para>
Enable Validation when it's important to prevent the tool from
accidentally reading the wrong character (similar to increasing  the 
confusion threshold).
The tradeoff is that enabling the Validation step may cause some
strings that would have been read OK to come back with confused
status.
</para>
                <para>
If enabling Validation is causing character confusion on seemingly 
readable characters, it may help to add some additional character
instances (of that character) to the Font.
</para>
            </summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierAlgorithmConstants.Basic">
            <summary>
The basic classification algorithm
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierConfusionExplanationConstants">
            <summary>
The reason a classified character was confused
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierConfusionExplanationConstants.ClassificationValidationFailure">
            <summary>
Failed the classification validation step
<para>
If a position result's status is Confused the ConfusionExplanation 
indicates whether it was due to the confidence score being too low, 
or due to a failure of the classification validation check.
</para><para>
The classification validation check can be enabled/disabled by setting
the ClassifierTrainParams.Alogrithm property.
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierConfusionExplanationConstants.ConfidenceScoreTooLow">
            <summary>
Low confidence score
<para>
If a position result's status is Confused the ConfusionExplanation 
or due to a failure of
the classification validation check.
</para></summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierConfusionExplanationConstants.NotConfused">
            <summary>
No confusion
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionStatusConstants">
            <summary>
The status of a classified character
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionStatusConstants.Failed">
            <summary>
Failed to classify
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionStatusConstants.Confused">
            <summary>
Classified with poor confidence
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxClassifierPositionStatusConstants.Read">
            <summary>
Classified with good confidence
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxCharCodeConstants">
            <summary>
Cognex Custom Character Codes 
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCharCodeConstants.AnyNonspaceCharacter">
            <summary>
This is used to specify that all non-reserved character codes except the
space character 0x20 are allowed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCharCodeConstants.AnyCharacter">
            <summary>
This is used to specify that all non-reserved character codes are
allowed.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxCharCodeConstants.Unknown">
            <summary>
This special value (0xF800) is in the user definable region of UTF-32
Unicode values. It is used specially by Cognex to signify that the 
character code is "unknown".
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineRefinementModeConstants">
            <summary>
Describes the method of line refinement for OCRMax character segmentation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineRefinementModeConstants.Standard">
            <summary>
Standard Mode
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterLineRefinementModeConstants.Classic">
            <summary>
Classic Mode (for backward compatibility).
Note: Classic Mode is not available when segmenting 
images of type CogImage16Range.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchMetricConstants">
            <summary>
Describes the pitch of characters for OCRMax.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchMetricConstants.RightToRight">
            <summary>
Measure pitch as the distance from the right side of a character's mark
rectangle to the right side of the adjacent character's mark rectangle.
Thus, the character's mark rectangle appears right-justified within the
character's cell rectangle. Note that "left" and "right" are relative to
the coordinate axis defined by the search region, i.e. right is the
positive x direction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchMetricConstants.CenterToCenter">
            <summary>
Measure pitch as the distance from the center of a character's mark
rectangle to the center of the adjacent character's mark rectangle.
Thus, the character's mark rectangle appears centered within the
character's cell rectangle.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchMetricConstants.LeftToLeft">
            <summary>
Measure pitch as the distance from the left side of a character's mark
rectangle to the left side of the adjacent character's mark rectangle.
Thus, the character's mark rectangle appears left-justified within the
character's cell rectangle. Note that "left" and "right" are relative to
the coordinate axis defined by the search region, i.e. right is the
positive x direction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchMetricConstants.Unknown">
            <summary>
Unknown metric;  the appropriate pitch may be any of the other pitch
metrics, or else there is no consistent pitch metric (as may be the case
for a proportional-pitch font).
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchTypeConstants">
            <summary>
Used to describe the pitch of characters for OCRMax.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchTypeConstants.Variable">
            <summary>
No character-to-character distance metric is consistent throughout a
string; character placement is erratic.  The pitch is neither fixed nor
proportional.  Note that variable pitch is different from unknown pitch,
since unknown pitch means that the pitch is either fixed or
proportional, but it is not known which one.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchTypeConstants.Proportional">
            <summary>
The pitch is proportional, which means that the pitch between any pair
of characters depends on the particular characters.  The width of a
character's cell rectangle is typically approximately proportional to
the width of its mark rectangle.  Note that although no pitch
measurement is constant throughout a string, typically the
intercharacter gap, which is the distance from the right side of one
character's mark rectangle to the left side of the adjacent character's
mark rectangle, is approximately constant. Note that "left" and "right"
are relative to the coordinate axis defined by the search region, i.e.
right is the positive x direction.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchTypeConstants.Fixed">
            <summary>
The pitch is fixed, which means that the pitch between any pair of
characters is constant, e.g. regardless of the width of the mark
rectangles of the characters.  Thus, all characters can be considered to
have cell rectangles that are the same width. How the pitch is measured
for a given fixed-pitch font is specified the pitch metric.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontPitchTypeConstants.Unknown">
            <summary>
Unknown pitch type, but the type is expected to be either fixed or
proportional, not variable.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCellRectangleWidthTypeConstants">
            <summary>
Used to describe how OCRMax will compute the width of the cell rectangle
that surrounds each character.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCellRectangleWidthTypeConstants.Proportional">
            <summary>
All characters will have cell rectangles whose width is
approximately proportional to the width of the character's
mark rectangle.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCellRectangleWidthTypeConstants.Fixed">
            <summary>
All characters will have cell rectangles of approximately the
same width, regardless of the width of the character's mark
rectangle.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontCharWidthTypeConstants">
            <summary>
Used to describe the width of characters for OCRMax.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontCharWidthTypeConstants.Variable">
            <summary>
The characters in the font may have mark rectangles with different
widths.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontCharWidthTypeConstants.Fixed">
            <summary>
All character mark rectangles in the font have the same width.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterFontCharWidthTypeConstants.Unknown">
            <summary>
Unknown width type; the font may be either fixed width or proportional
width.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterAnalysisModeConstants">
            <summary>
Type of analysis to perform in order to determine the optimal character
segmentation.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterAnalysisModeConstants.Standard">
            <summary>
Perform standard segmentation, which consists of straightforward
segmentation followed by additional analysis to determine the optimal
segmentation using the entire line of characters rather than just
treating each character individually.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterAnalysisModeConstants.Minimal">
            <summary>
Perform minimal segmentation.  This mode performs only straightforward
segmentation.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterFragmentMergeModeConstants">
            <summary>
How to merge character fragments to form characters during the Group stage. 
Note that the Analyze stage may perform additional merges.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterFragmentMergeModeConstants.SpecifyGaps">
            <summary>
Character fragments with a horizontal gap between them may be merged to
form characters, with the decision to merge two fragments based on both
the specified minimum intercharacter gap and the specified maximum
intracharacter gap.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterFragmentMergeModeConstants.SpecifyMinIntercharacterGap">
            <summary>
Character fragments with a horizontal gap between them may be merged to
form characters, where any two fragments with a gap less than the
specified minimum intercharacter gap will be merged.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterCharacterFragmentMergeModeConstants.RequireOverlap">
            <summary>
Character fragments must overlap horizontally by at least one pixel to
be merged.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterNormalizationModeConstants">
            <summary>
How to normalize the image so that the normalized image can be binarized
well using only a global threshold.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterNormalizationModeConstants.LocalAdvanced">
            <summary>
A local normalization is performed, using information about each local
region of the image to normalize that region, including adjusting not
only for the background but also for the contrast of the foreground.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterNormalizationModeConstants.Local">
            <summary>
A local normalization is performed, using information about each local
region of the image to normalize that region.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterNormalizationModeConstants.Global">
            <summary>
A global normalization is performed, using only information about the
image as a whole, not local variations.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterNormalizationModeConstants.None">
            <summary>
No normalization is performed; the input image is used as the normalized
image.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceScoreModeConstants">
            <summary>
How to compute the score of a space character.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceScoreModeConstants.Clutter">
            <summary>
The score of a space character is based on the fraction of pixels that
are background. A space character that consists entirely of background
will receive a score of 1.0.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceScoreModeConstants.One">
            <summary>
Space characters always get a score of 1.0.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceInsertModeConstants">
            <summary>
How to handle insertion of space characters into gaps between other
characters.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceInsertModeConstants.Multiple">
            <summary>
Insert a number of space characters (zero or more) per intercharacter
gap based on how large the gap is.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceInsertModeConstants.Single">
            <summary>
Insert at most one space character per intercharacter gap, no matter how
large the gap is.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxSegmenterSpaceInsertModeConstants.None">
            <summary>
Never insert a space character, no matter how large an intercharacter
gap is.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxPolarityConstants">
            <summary>
Enumeration of character polarity constants.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPolarityConstants.Unknown">
            <summary>
Unknown polarity
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPolarityConstants.LightOnDark">
            <summary>
Light text on a dark background
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxPolarityConstants.DarkOnLight">
            <summary>
Dark text on a light background
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingConfusionMetricConstants">
            <summary>
How confidence/confusion will be computed by the
CogOCRMaxFielding operator.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingConfusionMetricConstants.OnlyFieldedCharacters">
            <summary>
A character's confidence score is calculated by comaparing its
overall score against the overall score of all other characters 
in the font which match the fielding at that position.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingConfusionMetricConstants.AllCharactersInFont">
            <summary>
A character's confidence score is calculated by comaparing its
overall score against the overall score of all other charcters in
the font.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingAcceptedMetricConstants">
            <summary>
How the CogOCRMaxFielding operator will judge Accepted.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingAcceptedMetricConstants.PrimaryAndSecondaryMatches">
            <summary>
Either primary or secondary matches can be judged Accepted.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingAcceptedMetricConstants.PrimaryMatches">
            <summary>
Only primary matches will judged Accepted.
</summary>
        </member>
        <member name="T:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants">
            <summary>
Status values returned by fielding to indicate 
the state of a fielded position result.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.DeletedIgnored">
            <summary>
An input character deleted by fielding
as part of the portions to be ignored (e.g. prefix)
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.Deleted">
            <summary>
An input character deleted by fielding.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.Inserted">
            <summary>
A character inserted by fielding.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.NoMatch">
            <summary>
No match allowed by fielding.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.SubstitutedSpace">
            <summary>
Replaced by a space.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.Substituted">
            <summary>
Replaced by a non-input character.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.SecondarySwap">
            <summary>
Matching a swap character of a secondary character.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.Secondary">
            <summary>
Matching a secondary character.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.PrimarySwap">
            <summary>
Matching a swap character of a primary character.
</summary>
        </member>
        <member name="F:Cognex.VisionPro.OCRMax.CogOCRMaxFieldingStatusConstants.Primary">
            <summary>
Matching the primary character.
</summary>
        </member>
        <member name="T:coc_ocrDictionaryLineFielding">
---------------------------------------------------------------------
 coc_ocrDictionaryLineFielding
---------------------------------------------------------------------

 The coc_ocrDictionaryLineFielding struct encapsulates a fielding array
 for a string; the fielding array specifies one set of acceptable
 characters at each position.

</member>
        <member name="T:coc_ocrDictionaryPositionFielding">
---------------------------------------------------------------------
 coc_ocrDictionaryPositionFielding
---------------------------------------------------------------------

 The coc_ocrDictionaryPositionFielding struct encapsulates a fielding
 array for a character; the fielding specifies the set of acceptable
 characters at a position.

 Each coc_ocrDictionaryPositionFielding includes a bit field and a
 vector of characters. The coc_ocrDictionaryPositionFielding is a simple
 container class in that it does not reinterpret the bit field
 (i.e., compute the vector of characters from the bit field) or the
 vector of characters (i.e., compute the bit field from the
 characters). 

 A runtime character is accepted if it satisfies either
 the bit field or matches any of the characters in the vector. Note
 that the coc_ocrDictionaryPositionFielding is a container class in that
 setting the bit field will not affect the character vector and vice
 versa.

</member>
        <member name="T:coc_ocrDictionaryFieldingType">
 @file ocrfldng.h   OCR Fielding

 API for coc_ocrDictionaryLineFielding (and
 coc_ocrDictionaryPositionFielding on which it is based) which is used
 for OCR Dictionary tool (string verification)


</member>
        <member name="T:coc_classifierAspectMode">
 -------------------
 Aspect
 -------------------

 The OCR Classifier can treat the aspect ratio of the character
 bounding boxes in 3 ways.

 "ignore" is typically fastest and suitable for many applications
 In this mode, aspect ratio is not used (although relative size
 classification can still be used).

 "disambiguate" is an option only in Fast Mode and is in between
 ignore and maintain in terms of speed.  This mode is useful
 when the user wishes to be able to distinguish characters
 that are similar except for their aspect ratio, such as 0 vs.
 O is some fonts.

 "maintain." In addition to performing disambiguation, this mode
 maintains aspect ratio for all of the "relevant" scores --
 i.e. all of those above the accept threshold.  This mode is
 useful if the user wishes to reject characters that have
 incorrect aspect and/or to exploit the misread protection that
 could be offered by a font that purposely uses very different
 aspect ratios for potentially confusable characters.
 For example, an S with a errant slash across it could be reported
 as an 8 in some cases.  If the S and 8 in the font have significantly
 different aspect ratios in the font, then the use of "maintain"
 mode can prevent this misclassification.


</member>
        <member name="T:coc_classifierImagePreprocessing">
 -------------------
 Image Preprocessing
 -------------------

 The OCR Classifier currently uses image preprocessing to normalize
 the greylevels of the rectified images. The OCR Classifier
 currently includes two different greylevel normalization
 procedures: histogram normalization and median subtraction. The
 user can specify that either, both, or neither of these greylevel
 normalization procedures processes the input rectified images at
 training time and runtime. The default image preprocessing only
 involves running
 coc_classifierImagePreprocessing_normalizeHistogram. We recommend
 using the combination of
 coc_classifierImagePreprocessing_subtractMedian and
 coc_classifierImagePreprocessing_normalizeHistogram for
 images/applications which exhibit significant image gradients
 across each character.


</member>
        <member name="T:coc_classifierAlgorithm">
---------
Algorithm
---------

</member>
        <member name="T:csys_cpu_arch">
 @file ocrclass.h   OCR Classifier

 The OCR Classifier is a trainable classifier which classifies
 rectified images (usually provided by the OCR Segmenter)


</member>
        <!-- Discarding badly formed XML document comment for member 'F:coc_positionStatus_confused'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_positionStatus_failed'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierConfusionExplanation_confidenceScoreTooLow'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierConfusionExplanation_internalValidationFailure'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierAlgorithm_basicWithValidation'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierAlgorithm_basicFast'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierAlgorithm_default'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierImagePreprocessing_subtractMedian'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierImagePreprocessing_default'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierAspectMode_maintain'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierAspectMode_disambiguate'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierAspectMode_default'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierTrainParams.aspectMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierTrainParams.algorithm'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierTrainParams.imagePreprocessing'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.xScaleFilterMin'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.xScaleFilterMax'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.useYScaleFilter'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.yScaleFilterMin'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.yScaleFilterMax'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.reportSkippedTrainCharacterIndices'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierRunParams.keepProcessedImage'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierCharResult.isPrimarySwap'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.primaryCharacter'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.positionStatus'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.confusionExplanation'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.confusionCharacter'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.confidenceScore'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.alternativeCharacters'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.skippedTrainCharacterIndices'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierPositionResult.processedImage'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierLineResult.positionResults'. -->
        <!-- Discarding badly formed XML document comment for member 'F:coc_classifierLineResult.lineStatus'. -->
        <!-- Discarding badly formed XML document comment for member 'T:coc_classifier'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierTrainParams_constructCopy(coc_classifierTrainParams*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierTrainParams_assign(coc_classifierTrainParams*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierTrainParams_destruct(coc_classifierTrainParams*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierTrainParams_validate(coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierTrainParams_reset(coc_classifierTrainParams*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierTrainParams_compareEqual(coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierRunParams_constructCopy(coc_classifierRunParams*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierRunParams_assign(coc_classifierRunParams*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierRunParams_destruct(coc_classifierRunParams*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierRunParams_reset(coc_classifierRunParams*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierRunParams_compareEqual(coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierCharResult_construct(coc_classifierCharResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierCharResult_constructCopy(coc_classifierCharResult*,coc_classifierCharResult!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierCharResult_assign(coc_classifierCharResult*,coc_classifierCharResult!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierCharResult_destruct(coc_classifierCharResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierCharResult_compareEqual(coc_classifierCharResult!System.Runtime.CompilerServices.IsConst*,coc_classifierCharResult!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_construct(coc_classifierPositionResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_constructCopy(coc_classifierPositionResult*,coc_classifierPositionResult!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_assign(coc_classifierPositionResult*,coc_classifierPositionResult!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_destruct(coc_classifierPositionResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_compareEqual(coc_classifierPositionResult!System.Runtime.CompilerServices.IsConst*,coc_classifierPositionResult!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_constrainCharacterCodes(coc_classifierPositionResult!System.Runtime.CompilerServices.IsConst*,cstd_vectorChar32!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,System.Int32,coc_classifierPositionResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierPositionResult_getAcceptThreshold(coc_classifierPositionResult!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierLineResult_construct(coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierLineResult_constructCopy(coc_classifierLineResult*,coc_classifierLineResult!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierLineResult_assign(coc_classifierLineResult*,coc_classifierLineResult!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierLineResult_destruct(coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierLineResult_compareEqual(coc_classifierLineResult!System.Runtime.CompilerServices.IsConst*,coc_classifierLineResult!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifierLineResult_constrainCharacterCodes(coc_classifierLineResult!System.Runtime.CompilerServices.IsConst*,cstd_vector_vectorChar32!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,System.Int32,coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_construct(coc_classifier*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_constructCopy(coc_classifier*,coc_classifier!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_assign(coc_classifier*,coc_classifier!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_destruct(coc_classifier*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getIsStartTrained(coc_classifier!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_untrain(coc_classifier*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_startTrain(coc_classifier*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_retrain(coc_classifier*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_trainIncrementalSingle(coc_classifier*,coc_char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_trainIncrementalMultiple(coc_classifier*,cstd_vector_coc_char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_trainIncrementalPtrs(coc_classifier*,coc_char!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_trainMultiple(coc_classifier*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*,cstd_vector_coc_char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_trainPtrs(coc_classifier*,coc_classifierTrainParams!System.Runtime.CompilerServices.IsConst*,coc_char!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getTrainParams(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_classifierTrainParams*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getTrainCharacters(coc_classifier!System.Runtime.CompilerServices.IsConst*,cstd_vector_coc_char*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getTrainCharacterKeys(coc_classifier!System.Runtime.CompilerServices.IsConst*,cstd_vector_coc_charKey*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getTrainCharacterIndices(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_charKey!System.Runtime.CompilerServices.IsConst*,cstd_vector32s*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getNumTrainCharacters(coc_classifier!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getTrainCharacter(coc_classifier!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_char!System.Runtime.CompilerServices.IsConst**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getTrainCharacterProcessed(coc_classifier!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_char*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_setSaveTrainCharacters(coc_classifier*,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_getSaveTrainCharacters(coc_classifier!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runNonspaceSingle(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,coc_char!System.Runtime.CompilerServices.IsConst*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,coc_classifierPositionResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runSpaceSingle(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,coc_char!System.Runtime.CompilerServices.IsConst*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_classifierPositionResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runSingle(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,coc_char!System.Runtime.CompilerServices.IsConst*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32!System.Runtime.CompilerServices.IsLong,coc_classifierPositionResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runNonspaceMultiple(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,cstd_vector_coc_char!System.Runtime.CompilerServices.IsConst*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runNonspacePtrs(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,coc_char!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runMultiple(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,cstd_vector_coc_char!System.Runtime.CompilerServices.IsConst*,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,cstd_vectorb!System.Runtime.CompilerServices.IsConst*,cstd_vector32s!System.Runtime.CompilerServices.IsConst*,coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_runPtrs(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,coc_char!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_classifierRunParams!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,coc_classifierLineResult*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_classifier_compareEqual(coc_classifier!System.Runtime.CompilerServices.IsConst*,coc_classifier!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_constructCopy(coc_ocrDictionaryPositionFielding*,coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_assign(coc_ocrDictionaryPositionFielding*,coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_destruct(coc_ocrDictionaryPositionFielding*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_getFieldingBits(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_setFieldingBits(coc_ocrDictionaryPositionFielding*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_isAnyCharacter(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_isAnyNonspaceCharacter(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_getFieldingCharacters(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,cstd_vectorChar32!System.Runtime.CompilerServices.IsConst**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_setFieldingCharacters(coc_ocrDictionaryPositionFielding*,cstd_vectorChar32!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_getIsSingleCharacter(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_hasFieldingBits(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_hasFieldingCharacters(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_getAllFieldingCharacters(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,cstd_vectorChar32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_setFieldingCharactersAndFieldingBits(coc_ocrDictionaryPositionFielding*,cstd_vectorChar32!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryPositionFielding_compareEqual(coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_construct(coc_ocrDictionaryLineFielding*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_constructCopy(coc_ocrDictionaryLineFielding*,coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_assign(coc_ocrDictionaryLineFielding*,coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_destruct(coc_ocrDictionaryLineFielding*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:csys_typeCheck_Vanish'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_getPositionFieldings(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,cstd_vector_coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_setPositionFieldings(coc_ocrDictionaryLineFielding*,cstd_vector_coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_getNumPositionFieldings(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_getPositionFielding(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_setPositionFielding(coc_ocrDictionaryLineFielding*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_getPositionFieldingExtend(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_ocrDictionaryPositionFielding*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_setPositionFieldingExtend(coc_ocrDictionaryLineFielding*,System.Int32!System.Runtime.CompilerServices.IsLong,coc_ocrDictionaryPositionFielding!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_compareEqual(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_getIsEmpty(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,System.Int32*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:coc_ocrDictionaryLineFielding_runFieldingParams(coc_ocrDictionaryLineFielding!System.Runtime.CompilerServices.IsConst*,coc_swapCharSet!System.Runtime.CompilerServices.IsConst*,coc_ocrDictionaryStringMulti!System.Runtime.CompilerServices.IsConst*,coc_ocrDictionaryFieldingRunParams!System.Runtime.CompilerServices.IsConst*,coc_ocrDictionaryResultSet*)'. -->
    </members>
</doc>